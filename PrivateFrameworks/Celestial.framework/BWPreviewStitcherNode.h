/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

@interface BWPreviewStitcherNode : BWNode {
    float  _additionalZoomFactor;
    BWSpringSimulation * _additionalZoomFactorSpring;
    float  _additionalZoomFactorSpringStartFactor;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _additionalZoomFactorSpringStartPTS;
    bool  _applyShift;
    bool  _aspectRatioChanging;
    NSMutableDictionary * _blackFilledBorderRectsBySurfaceID;
    unsigned int  _bravoShiftCorrectionFlags;
    NSObject<OS_dispatch_group> * _ciPreheatingGroup;
    NSObject<OS_dispatch_queue> * _ciPreheatingQueue;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _configurationLock;
    bool  _currentZoomRequiresWiderCamera;
    <BWPreviewStitcherDelegate> * _delegate;
    bool  _deviceIsStationary;
    bool  _deviceTooHotDimmingEnabled;
    bool  _displaysPrimaryCameraOnly;
    bool  _displaysWidestCameraOnly;
    bool  _drawWiderCameraOnly;
    float  _dynamicWideBaseZoomFactorSmoothingFactor;
    float  _edgeFeatheringAspectCompensation;
    bool  _edgeFeatheringEnabled;
    bool  _featherEdgesForOpacityRamp;
    long long  _fencePortGenerationCount;
    FigCaptureMachPortSendRight * _fencePortSendRight;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _firstFramePTS;
    bool  _frameRateBasedRampsEnabled;
    bool  _havePreheatedCI;
    bool  _hidePartialOverCapture;
    bool  _hideSuperWideOverCaptureWhenTooClose;
    bool  _hideSuperWideStitchingWhenTooClose;
    bool  _lastNarrowerCameraIsTele;
    NSString * _lastNarrowerPortType;
    float  _lastPrimaryCameraAspectRatio;
    NSString * _lastRecommendedMasterPortType;
    int  _lastRegisteredFrameCaptureID;
    bool  _lastRegistrationEnabled;
    long long  _lastRenderTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _lastRenderedPTS;
    struct opaqueCMSampleBuffer { } * _lastSampleBuffer;
    bool  _lastZoomingOrSwitchingCameras;
    bool  _multiCameraStitchingEnabled;
    struct { 
        int width; 
        int height; 
    }  _outputDimensions;
    struct opaqueCMFormatDescription { } * _outputFormatDescription;
    int  _overCaptureStatus;
    bool  _pendingRegistrationAfterDeviceBecomesStationary;
    bool  _previewsWideBeforeSlaveStreamStarts;
    double  _primaryCameraAspectRatio;
    double  _primaryCaptureRectCenterX;
    int  _primaryCaptureRectCenterXPixelOffset;
    int  _primaryCaptureRectCenterXPixelOffsetFudge;
    int  _primaryCaptureRectPixelInset;
    double  _primaryCaptureRectYInset;
    float  _rampStartZoomFactor;
    float  _rampZoomFactorOfInterest;
    bool  _registerFirstFrame;
    bool  _registrationEnabled;
    int  _registrationFrameSkipCount;
    BWPixelBufferPool * _registrationPool;
    NSObject<OS_dispatch_queue> * _registrationQueue;
    struct OpaqueVTImageRotationSession { } * _registrationRotationSession;
    int  _registrationUpdateRampFrameCount;
    struct OpaqueVTImageRotationSession { } * _rotationSession;
    int  _screenScale;
    struct { 
        int width; 
        int height; 
    }  _sensorBinningFactor;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _shiftCorrectionsUpdateLock;
    float  _shiftSmoothingFactor;
    bool  _showFeatherGradient;
    bool  _stoppingForModeSwitch;
    float  _superWideBaseZoomFactor;
    NSData * _superWideCameraViewMatrix;
    float  _superWideCorrectedBaseZoomFactor;
    bool  _superWideDrawingSuspendedUntilFocusImproves;
    bool  _superWideOccludedByWide;
    struct CGPoint { 
        double x; 
        double y; 
    }  _superWideOpticalCenterOffset;
    float  _superWidePixelsPerMicron;
    struct CGPoint { 
        double x; 
        double y; 
    }  _superWideToWideBravoShift;
    struct BWPreviewStitcherShiftCorrection { 
        struct CGPoint { 
            double x; 
            double y; 
        } currentValue; 
        struct CGPoint { 
            double x; 
            double y; 
        } updatedValue; 
        bool valueIsUpdated; 
        bool lastRegistrationWasValid; 
        int registeredFrameCaptureID; 
        BWRamp *rampX; 
        BWRamp *rampY; 
    }  _superWideToWideShiftCorrections;
    struct { 
        struct { 
            float x; 
            float y; 
        } lastWideSpherePos; 
        struct { 
            float x; 
            float y; 
        } lastTeleSpherePos; 
        struct { 
            float x; 
            float y; 
        } currentTeleSpherePos; 
        struct { 
            float x; 
            float y; 
        } previousTeleSpherePos; 
        bool supportAverageSpherePositionKey; 
    }  _superWideToWideShiftState;
    float  _teleBaseZoomFactor;
    float  _teleBaseZoomFactorOverride;
    bool  _teleFocusingOneShot;
    CIContext * _teleOpacityCIContext;
    BWPixelBufferPool * _teleOpacityPool;
    struct { 
        int width; 
        int height; 
    }  _teleOpacityPoolDimensions;
    BWRamp * _teleOpacityRamp;
    struct CGPoint { 
        double x; 
        double y; 
    }  _teleOpticalCenterOffset;
    float  _telePixelsPerMicron;
    NSData * _telephotoCameraViewMatrix;
    bool  _wantWideFallbackDueToTeleAEAF;
    float  _wideBaseZoomFactor;
    float  _wideBaseZoomFactorDynamicOverride;
    bool  _wideBaseZoomFactorDynamicOverrideEnabled;
    float  _wideBaseZoomFactorDynamicOverrideScaled;
    float  _wideBaseZoomFactorOverride;
    float  _wideBaseZoomFactorOverrideMacro;
    int  _wideFallbackMode;
    struct CGPoint { 
        double x; 
        double y; 
    }  _wideFallbackRecenteringShiftOffset;
    BWRamp * _wideFallbackShiftRamp;
    bool  _wideFallbackShiftRampTargetValueIsWide;
    struct BWSmartCameraScene { 
        bool enabled; 
        bool confident; 
        float confidenceFilterRatio; 
        float filteredConfidence; 
        float confidenceThreshold; 
        float confidenceHysteresisValueLag; 
        BOOL confidenceHysteresisTemporalLagBeforeConfident; 
        BOOL confidenceHysteresisTemporalLagBeforeNotConfident; 
        BOOL currentTemporalHysteresis; 
        char *name; 
    }  _wideFocusDistanceFarEnoughForStitching;
    struct BWSmartCameraScene { 
        bool enabled; 
        bool confident; 
        float confidenceFilterRatio; 
        float filteredConfidence; 
        float confidenceThreshold; 
        float confidenceHysteresisValueLag; 
        BOOL confidenceHysteresisTemporalLagBeforeConfident; 
        BOOL confidenceHysteresisTemporalLagBeforeNotConfident; 
        BOOL currentTemporalHysteresis; 
        char *name; 
    }  _wideFocusDistanceFarEnoughToUseTele;
    bool  _wideFocusingOneShot;
    struct CGPoint { 
        double x; 
        double y; 
    }  _wideOpticalCenterOffset;
    float  _widePinholeFocalLengthInfinity;
    float  _widePinholeFocalLengthMacro;
    float  _widePixelsPerMicron;
    struct CGPoint { 
        double x; 
        double y; 
    }  _wideToTeleBravoShift;
    struct BWPreviewStitcherShiftCorrection { 
        struct CGPoint { 
            double x; 
            double y; 
        } currentValue; 
        struct CGPoint { 
            double x; 
            double y; 
        } updatedValue; 
        bool valueIsUpdated; 
        bool lastRegistrationWasValid; 
        int registeredFrameCaptureID; 
        BWRamp *rampX; 
        BWRamp *rampY; 
    }  _wideToTeleShiftCorrections;
    struct { 
        struct { 
            float x; 
            float y; 
        } lastWideSpherePos; 
        struct { 
            float x; 
            float y; 
        } lastTeleSpherePos; 
        struct { 
            float x; 
            float y; 
        } currentTeleSpherePos; 
        struct { 
            float x; 
            float y; 
        } previousTeleSpherePos; 
        bool supportAverageSpherePositionKey; 
    }  _wideToTeleShiftState;
    float  _zoomInFeatheringInnerRadiusEnd;
    float  _zoomInFeatheringInnerRadiusStart;
    float  _zoomInFeatheringOuterRadiusEnd;
    float  _zoomInFeatheringOuterRadiusStart;
    float  _zoomOutFeatheringInnerRadiusEnd;
    float  _zoomOutFeatheringInnerRadiusStart;
    float  _zoomOutFeatheringOuterRadiusEnd;
    float  _zoomOutFeatheringOuterRadiusStart;
}

@property (nonatomic) <BWPreviewStitcherDelegate> *delegate;
@property bool displaysWidestCameraOnly;
@property (nonatomic) bool stoppingForModeSwitch;

+ (void)initialize;

- (void)_callDelegateWithAppliedWiderShift:(struct CGPoint { double x1; double x2; })arg1 narrowerShift:(struct CGPoint { double x1; double x2; })arg2 widerScaleFactor:(float)arg3 narrowerScaleFactor:(float)arg4 widerPixelBuffer:(struct __CVBuffer { }*)arg5 narrowerPixelBuffer:(struct __CVBuffer { }*)arg6 widerPortType:(id)arg7 narrowerPortType:(id)arg8;
- (int)_cameraDisplayTransitionFrameCountForCameraFallbackChange:(bool)arg1 currentFrameRate:(float)arg2;
- (struct CGPoint { double x1; double x2; })_computeBravoWideToTeleShiftFromWideSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 teleSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (bool)_currentlyRampingZoom;
- (bool)_currentlyRunningShortZoomRampOrNotRampingZoom;
- (bool)_currentlySwitchingCameras;
- (bool)_currentlyZoomingOrSwitchingCameras;
- (bool)_displaysPrimaryCameraOnly;
- (void)_getInputRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 outputRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 inputShiftAppliedInOutputRect:(struct CGPoint { double x1; double x2; }*)arg3 toTransferPixelBuffer:(struct __CVBuffer { }*)arg4 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 intoPixelBuffer:(struct __CVBuffer { }*)arg6 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg7 withInputShift:(struct CGPoint { double x1; double x2; })arg8 shiftOutsideBoundingRectAllowed:(bool)arg9 scale:(float)arg10;
- (bool)_haveSuperBravo;
- (bool)_haveSuperWideCamera;
- (bool)_haveTeleCamera;
- (struct opaqueCMSampleBuffer { }*)_newStitchedSampleBufferFromWide:(struct opaqueCMSampleBuffer { }*)arg1 tele:(struct opaqueCMSampleBuffer { }*)arg2 wideRegionsShifts:(struct CGPoint { double x1; double x2; }*)arg3 teleShift:(struct CGPoint { double x1; double x2; })arg4 primaryCaptureRectOut:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg5 primaryCaptureRectBeforeCroppingOut:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg6;
- (void)_preheatCIRenderingAsync;
- (id)_primaryCameraPortType;
- (void)_renderOpacityRampToPixelBuffer:(struct __CVBuffer { }*)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 withWidePixelBuffer:(struct __CVBuffer { }*)arg3 telePixelBuffer:(struct __CVBuffer { }*)arg4 zoomingIn:(bool)arg5 progress:(float)arg6;
- (void)_restitchAndEmitLastInputForAspectAndCenterChange;
- (int)_scale30FPSFrameCount:(int)arg1 toFrameRate:(float)arg2;
- (float)_scaleFactorAppliedForPixelBuffer:(struct __CVBuffer { }*)arg1 usedSourceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 primaryCaptureRectAspectRatio:(double)arg3 metadata:(id)arg4;
- (void)_setOverCaptureStatus:(int)arg1;
- (struct CGPoint { double x1; double x2; })_shiftCorrectionForComputedShift:(struct CGPoint { double x1; double x2; })arg1 forLeftStrip:(bool)arg2 byRegisteringWide:(struct opaqueCMSampleBuffer { }*)arg3 tele:(struct opaqueCMSampleBuffer { }*)arg4 centerBias:(bool)arg5 err:(int*)arg6;
- (float)_teleBaseZoomFactorWithOverride;
- (id)_teleOpacityPool;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_transferPixelBuffer:(struct __CVBuffer { }*)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 intoPixelBuffer:(struct __CVBuffer { }*)arg3 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 withInputShift:(struct CGPoint { double x1; double x2; })arg5 scale:(float)arg6 inputSourceRectOut:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg7;
- (void)_updateAndGetWideRegionShifts:(struct CGPoint { double x1; double x2; }*)arg1 teleShift:(struct CGPoint { double x1; double x2; }*)arg2 wideIsSuperWide:(bool)arg3 forComputedShift:(struct CGPoint { double x1; double x2; })arg4 registrationEnabled:(bool)arg5 currentFrameRate:(float)arg6;
- (void)_updateOverCaptureStatusWithWiderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 narrowerSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)_updateShiftCorrectionsAsyncFromComputedShift:(struct CGPoint { double x1; double x2; })arg1 byRegisteringWide:(struct opaqueCMSampleBuffer { }*)arg2 tele:(struct opaqueCMSampleBuffer { }*)arg3 centerBias:(bool)arg4;
- (bool)_updateZoomStatusFromWideSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 teleSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)_waitForCIPreheatingToFinish;
- (float)_wideBaseZoomFactorWithOverride;
- (float)_wideBaseZoomFactorWithOverrideLocked;
- (int)_wideFallbackOpacityRampFrameCount;
- (float)_wideFallbackRecenteringStrength;
- (int)_wideFallbackShiftRampFrameCount;
- (int)_zoomInOpacityRampFrameCount;
- (int)_zoomOutOpacityRampFrameCount;
- (bool)centerRegistrationValid;
- (void)configurationWithID:(long long)arg1 updatedFormat:(id)arg2 didBecomeLiveForInput:(id)arg3;
- (void)dealloc;
- (id)delegate;
- (void)didReachEndOfDataForInput:(id)arg1;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2;
- (bool)displaysWidestCameraOnly;
- (id)focusingDescription;
- (id)initWithCameraInfoByPortType:(id)arg1 sensorBinningFactor:(struct { int x1; int x2; })arg2;
- (id)initWithStitchingDisabled;
- (id)nodeSubType;
- (id)nodeType;
- (struct { int x1; int x2; })outputDimensions;
- (id)overCaptureStatusString;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (bool)previewsWideBeforeSlaveStreamStarts;
- (double)primaryCameraAspectRatio;
- (id)primaryCameraShortDisplayName;
- (double)primaryCaptureRectCenterX;
- (double)primaryCaptureRectYInset;
- (void)rampToAdditionalZoomFactor:(double)arg1;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDisplaysWidestCameraOnly:(bool)arg1;
- (void)setOutputDimensions:(struct { int x1; int x2; })arg1;
- (void)setPreviewsWideBeforeSlaveStreamStarts:(bool)arg1;
- (void)setPrimaryCameraAspectRatio:(double)arg1;
- (void)setPrimaryCaptureRectAspectRatio:(double)arg1 center:(struct CGPoint { double x1; double x2; })arg2 fencePortSendRight:(id)arg3;
- (void)setPrimaryCaptureRectCenterX:(double)arg1;
- (void)setPrimaryCaptureRectYInset:(double)arg1;
- (void)setStoppingForModeSwitch:(bool)arg1;
- (bool)stoppingForModeSwitch;
- (bool)tooCloseFor1xStitching;
- (float)wideBaseZoomFactor;
- (id)wideFallbackDescription;
- (float)wideFocusDistance;

@end
