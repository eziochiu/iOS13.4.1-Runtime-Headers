/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

@interface BWStillImageStereoStitchingNode : BWNode {
    NSDictionary * _baseZoomFactorByPortType;
    FigCaptureStillImageSettings * _currentRequestedStillImageCaptureSettings;
    BWStillImageCaptureSettings * _currentResolvedStillImageCaptureSettings;
    BWNodeError * _narrowFieldOfViewError;
    BWNodeInput * _narrowFieldOfViewInput;
    BWNodeOutput * _narrowFieldOfViewOutput;
    struct opaqueCMSampleBuffer { } * _narrowFieldOfViewSbuf;
    BWStillImageNodeConfiguration * _nodeConfiguration;
    struct opaqueCMFormatDescription { } * _outputSbufFormatDescription;
    int  _overCaptureMode;
    float  _overCaptureMultiplier;
    BWNodeOutput * _overCaptureOutput;
    struct OpaqueVTPixelTransferSession { } * _pixelTransferSession;
    FigStillStereoStitchingProcessor * _processor;
    NSArray * _sensorConfigurations;
    FigStillImageSharedProcessingResources * _sharedResources;
    bool  _stereoStitchingEnabled;
    BWNodeError * _wideFieldOfViewError;
    BWNodeInput * _wideFieldOfViewInput;
    struct opaqueCMSampleBuffer { } * _wideFieldOfViewSbuf;
}

@property (nonatomic, readonly) BWNodeInput *narrowFieldOfViewInput;
@property (nonatomic, readonly) BWNodeOutput *narrowFieldOfViewOutput;
@property (nonatomic, readonly) BWNodeOutput *overCaptureOutput;
@property (nonatomic, readonly) BWNodeInput *wideFieldOfViewInput;

+ (void)initialize;

- (void)_addOverCaptureImageMetadataToSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 metadata:(id)arg2;
- (void)_clearCaptureRequestState;
- (void)_configureCurrentCaptureRequestStateWithRequestedStillImageCaptureSettings:(id)arg1 resolvedStillImageCaptureSettings:(id)arg2;
- (void)_emitNodeErrorForError:(int)arg1 fromNodeOutput:(id)arg2;
- (int)_generateFallbackOverCaptureImageWithWide:(struct opaqueCMSampleBuffer { }*)arg1 narrowSbuf:(struct opaqueCMSampleBuffer { }*)arg2 outputSbuf:(struct opaqueCMSampleBuffer { }*)arg3 primaryImageZoomCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 onlyCrop:(bool)arg5;
- (int)_generatePartialOverCaptureImageFromInputPixelBuffer:(struct __CVBuffer { }*)arg1 outputPixelBuffer:(struct __CVBuffer { }*)arg2 primaryImageZoomCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 validBufferRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (bool)_horizonLinePresentInSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 horizonLineAngleInDegreesOut:(float*)arg2 horizonLineVerticalCenterlineIntersectionOut:(float*)arg3;
- (int)_loadAndConfigureProcessor;
- (int)_processDualCameraStereoStitchingWithOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 primaryImageZoomCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 overCaptureImageTypeOut:(int*)arg3 overCaptureImageConfidenceScoreOut:(unsigned int*)arg4;
- (void)_processOverCaptureIfNecessary;
- (int)_processSingleCameraOverCaptureWithOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 primaryImageZoomCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 overCaptureImageTypeOut:(int*)arg3 overCaptureImageConfidenceScoreOut:(unsigned int*)arg4;
- (id)_processorOptions;
- (int)_scaleInputPixelBuffer:(struct __CVBuffer { }*)arg1 inputRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 outputPixelBuffer:(struct __CVBuffer { }*)arg3 outputDimensions:(struct { int x1; int x2; })arg4;
- (float)_zoomAdjustedHorizonLineVerticalCenterlineIntersection:(float)arg1 finalCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)configurationWithID:(long long)arg1 updatedFormat:(id)arg2 didBecomeLiveForInput:(id)arg3;
- (void)dealloc;
- (void)didReachEndOfDataForInput:(id)arg1;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2 forAttachedMediaKey:(id)arg3;
- (void)handleNodeError:(id)arg1 forInput:(id)arg2;
- (id)initWithNodeConfiguration:(id)arg1 sensorConfigurations:(id)arg2 overCapturePercentage:(float)arg3 overCaptureOutputDimensions:(struct { int x1; int x2; })arg4 stereoStitchingEnabled:(bool)arg5;
- (id)narrowFieldOfViewInput;
- (id)narrowFieldOfViewOutput;
- (id)nodeSubType;
- (id)nodeType;
- (id)overCaptureOutput;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (void)setSharedResources:(id)arg1;
- (id)sharedResources;
- (id)wideFieldOfViewInput;

@end
