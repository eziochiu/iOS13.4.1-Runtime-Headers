/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/ActivityRingsUI.framework/ActivityRingsUI
 */

@interface ARUISparksCelebration : ARUICelebration {
    float  _angularAlpha;
    float  _angularAlphaAnimationBeginTime;
    float  _angularAlphaAnimationEndTime;
    float  _angularAlphaFadeFraction;
    CAMediaTimingFunction * _angularAlphaTimingFunction;
    <MTLBuffer> * _angularIndexBuffer;
    unsigned long long  _angularParticleCount;
    float  _angularRotationDuration;
    ARUIAngularSparkEmitter * _angularSparkEmitter;
    <MTLBuffer> * _angularSparks;
    float  _angularTime;
    CAMediaTimingFunction * _angularTimingFunction;
    <MTLBuffer> * _angularVertexBuffer;
    unsigned long long  _burstParticleCount;
    id /* block */  _completion;
    float  _completionTime;
    CAMediaTimingFunction * _kineticEasingFunction;
    float  _kineticEasingTarget;
    <MTLBuffer> * _kineticIndexBuffer;
    unsigned long long  _kineticParticleCount;
    NSArray * _kineticSparkEmitters;
    <MTLBuffer> * _kineticSparks;
    <MTLBuffer> * _kineticVertexBuffer;
    unsigned long long  _numAngularIndicies;
    unsigned long long  _numKineticIndicies;
    unsigned long long  _numberOfEmitters;
    unsigned long long  _tangentalParticleCount;
    <MTLBuffer> * _uniformsBuffer;
}

@property (nonatomic, readonly) <MTLBuffer> *angularIndexBuffer;
@property (nonatomic, readonly) unsigned long long angularParticleCount;
@property (nonatomic, readonly) <MTLBuffer> *angularSparks;
@property (nonatomic, readonly) float angularTime;
@property (nonatomic, readonly) <MTLBuffer> *angularVertexBuffer;
@property (nonatomic, readonly) <MTLBuffer> *kineticIndexBuffer;
@property (nonatomic, readonly) unsigned long long kineticParticleCount;
@property (nonatomic, readonly) <MTLBuffer> *kineticSparks;
@property (nonatomic, readonly) <MTLBuffer> *kineticVertexBuffer;
@property (nonatomic, readonly) unsigned long long numAngularIndicies;
@property (nonatomic, readonly) unsigned long long numKineticIndicies;
@property (nonatomic, readonly) <MTLBuffer> *uniformsBuffer;

- (void).cxx_destruct;
- (void)_applyAngularSparkUpdate:(id)arg1;
- (void)_applyKineticSparkUpdate:(id)arg1;
- (void)_generateAngularSparks;
- (void)_setupKineticSparkEmitters;
- (void*)angularAlphaBytes;
- (id)angularIndexBuffer;
- (unsigned long long)angularParticleCount;
- (id)angularSparks;
- (float)angularTime;
- (void*)angularTimeBytes;
- (id)angularVertexBuffer;
- (void)endWithCompletion:(id /* block */)arg1;
- (id)init;
- (id)kineticIndexBuffer;
- (unsigned long long)kineticParticleCount;
- (id)kineticSparks;
- (id)kineticVertexBuffer;
- (unsigned long long)numAngularIndicies;
- (unsigned long long)numKineticIndicies;
- (void)screenBlendedColorFromColor:(void *)arg1 numberOfIterations:(void *)arg2; // needs 2 arg types, found 1: unsigned long long
- (void)setTopColor;
- (void)storeCelebration:(id)arg1 withRing:(id)arg2;
- (unsigned long long)type;
- (id)uniformsBuffer;
- (unsigned long long)uniformsBufferOffsetForType:(unsigned long long)arg1;
- (void)update:(double)arg1;

@end
