/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/SpringBoard.framework/SpringBoard
 */

@interface SBAppSwitcherReusableSnapshotView : SBSwitcherWallpaperPageContentView <SBAppSwitcherPageContentView, SBAppSwitcherSnapshotImageCacheObserver, SBReusableView> {
    bool  _active;
    SBAppLayout * _appLayout;
    UIViewController * _containerViewController;
    NSMutableArray * _deferredSnapshotCrossfadeQueue;
    <SBAppSwitcherReusableSnapshotViewDelegate> * _delegate;
    SBSwitcherSnapshotImageView * _firstImageView;
    SBOrientationTransformWrapperView * _firstOrientationWrapper;
    SBAppSwitcherSnapshotLockoutViewControllerProvider * _lockoutVCProvider;
    NSMutableDictionary * _lockoutViewControllerByRole;
    CAShapeLayer * _medusaDividerLayer;
    SBMedusaSettings * _medusaSettings;
    SBSwitcherSnapshotImageView * _secondImageView;
    SBOrientationTransformWrapperView * _secondOrientationWrapper;
    SBAppSwitcherSettings * _settings;
    bool  _shouldUseBrightMaterial;
    bool  _showingIconOverlayView;
    SBAppSwitcherSnapshotImageCache * _snapshotCache;
    NSMutableDictionary * _snapshotViewStateByRole;
    UIView * _solidColorBackstopView;
    bool  _visible;
}

@property (getter=isActive, nonatomic) bool active;
@property (nonatomic, retain) SBAppLayout *appLayout;
@property (nonatomic, readonly) bool contentRequiresGroupOpacity;
@property (nonatomic) double cornerRadius;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long orientation;
@property (nonatomic) bool shouldUseBrightMaterial;
@property (readonly) Class superclass;
@property (getter=isVisible, nonatomic) bool visible;

- (void).cxx_destruct;
- (void)_addAppLockoutOverlayIfNecessaryForRole:(long long)arg1;
- (id)_applicationForRole:(long long)arg1;
- (id)_cacheEntryForRole:(long long)arg1;
- (void)_configureSnapshotImageView:(id)arg1 cacheEntry:(id)arg2;
- (long long)_contentOrientationForSnapshotOrientation:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForBackstopLayer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameInLayoutSpaceForRole:(long long)arg1 inAppLayout:(id)arg2 inOrientation:(long long)arg3;
- (void)_handleInstalledAppsChanged:(id)arg1;
- (id)_imageViewForRole:(long long)arg1;
- (bool)_isAnimatingTransitionForRole:(long long)arg1;
- (id)_orientationWrapperForRole:(long long)arg1;
- (void)_performDeferredSnapshotUpdatesIfNecessaryForRole:(long long)arg1;
- (void)_removeAppLockoutOverlayForRole:(long long)arg1;
- (void)_requestFreshImages;
- (id)_sceneHandleForRole:(long long)arg1;
- (void)_setAnimatingTransition:(bool)arg1 forRole:(long long)arg2;
- (void)_setCacheEntry:(id)arg1 forRole:(long long)arg2;
- (void)_setSceneHandle:(id)arg1 forRole:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_snapshotImageFrameForCacheEntry:(id)arg1;
- (void)_updateContentOrientationForRole:(long long)arg1;
- (void)_updateCornerRadiusIfNecessaryForLockoutView:(id)arg1 matchingSnapshotImage:(id)arg2;
- (void)_updateCornerRadiusIfNecessaryForSnapshotImageView:(id)arg1 cacheEntry:(id)arg2;
- (void)_updateDivider;
- (void)_updateToNewSnapshotImageUsingCacheEntry:(id)arg1;
- (void)_updateTranslucency;
- (id)appLayout;
- (bool)contentRequiresGroupOpacity;
- (id)description;
- (void)didUpdateCacheEntry:(id)arg1;
- (id)initWithDelegate:(id)arg1 snapshotCache:(id)arg2 lockoutVCProvider:(id)arg3 containerViewController:(id)arg4;
- (void)invalidate;
- (bool)isActive;
- (bool)isVisible;
- (void)layoutSubviews;
- (void)prepareForReuse;
- (void)setActive:(bool)arg1;
- (void)setAppLayout:(id)arg1;
- (void)setCornerRadius:(double)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setShouldUseBrightMaterial:(bool)arg1;
- (void)setShowingIconOverlayView:(bool)arg1;
- (void)setVisible:(bool)arg1;
- (bool)shouldUseBrightMaterial;

@end
