/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/SpringBoard.framework/SpringBoard
 */

@interface SBVolumeControl : NSObject <PTSettingsKeyObserver, SBAVSystemControllerCacheObserver, SBVolumeHUDViewControllerDelegate> {
    NSMutableArray * _activeAudioRoutes;
    NSMutableSet * _alwaysHiddenCategories;
    int  _anyCallActive;
    SBAVSystemControllerCache * _avCache;
    NSObject<OS_dispatch_queue> * _avSystemControllerQueue;
    bool  _controlCenterIsPresented;
    bool  _debounce;
    float  _effectiveVolume;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _effectiveVolumeLock;
    bool  _euDevice;
    SBHUDController * _hudController;
    bool  _hudHandledLastVolumeChange;
    NSString * _lastDisplayedCategory;
    NSString * _lastEventCategory;
    bool  _lastVolumeChangedWasBlocked;
    unsigned long long  _mode;
    SBRingerControl * _ringerControl;
    bool  _userAcknowledgedEUVolumeLimit;
    bool  _volumeDownButtonIsDown;
    SBVolumeHUDSettings * _volumeHUDSettings;
    bool  _volumeUpButtonIsDown;
}

@property (nonatomic, readonly) NSArray *activeAudioRouteTypes;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSString *lastDisplayedCategory;
@property (readonly) Class superclass;

+ (bool)_isVolumeChangeAllowedForState:(id)arg1 error:(out id*)arg2;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (bool)_HUDIsDisplayableForCategory:(id)arg1;
- (bool)_HUDIsDisplayableForLastEventCategory;
- (bool)_HUDIsDisplayableInCurrentSpringBoardContext;
- (long long)_audioRouteTypeForActiveAudioRoute:(id)arg1 withAttributes:(id)arg2;
- (long long)_audioRouteTypeForOutputDevice:(id)arg1;
- (long long)_audioRouteTypeForTelephonyDeviceType:(long long)arg1;
- (float)_calcButtonRepeatDelay;
- (id)_configureVolumeHUDViewControllerWithVolume:(float)arg1;
- (void)_controlCenterDidDismiss:(id)arg1;
- (void)_controlCenterWillPresent:(id)arg1;
- (void)_dispatchAVSystemControllerAsync:(id /* block */)arg1;
- (void)_dispatchAVSystemControllerSync:(id /* block */)arg1;
- (float)_effectiveVolume;
- (void)_effectiveVolumeChanged:(id)arg1;
- (float)_getMediaVolumeForIAP;
- (bool)_isCategoryAlwaysHidden:(id)arg1;
- (bool)_isHUDDisplayable;
- (bool)_isVolumeHUDVisible;
- (bool)_isVolumeHUDVisibleOrFading;
- (bool)_outputDevicesRepresentWirelessSplitterGroup:(id)arg1;
- (void)_presentVolumeHUDIfDisplayableOrRefreshIfPresented:(id)arg1;
- (void)_presentVolumeHUDWithVolume:(float)arg1;
- (void)_resetMediaServerConnection;
- (void)_sendEUVolumeLimitAcknowledgementIfNecessary;
- (void)_serverConnectionDied:(id)arg1;
- (void)_setMediaVolumeForIAP:(float)arg1;
- (bool)_shouldRouteChangeResultInPresentingVolumeHUDWhenTransitioningFrom:(id)arg1 toAudioRoutes:(id)arg2;
- (bool)_turnOnScreenIfNecessaryForEULimit:(bool)arg1;
- (void)_updateAudioRoutesIfNecessary:(bool)arg1 forRoute:(id)arg2 withAttributes:(id)arg3 andOutputDevices:(id)arg4;
- (void)_updateEUVolumeSettings;
- (void)_updateEffectiveVolume:(float)arg1;
- (void)_userAcknowledgedEUEnforcement:(float)arg1;
- (float)_volumeStepUp:(bool)arg1;
- (id)acquireVolumeHUDHiddenAssertionForReason:(id)arg1;
- (id)activeAudioRouteTypes;
- (void)addAlwaysHiddenCategory:(id)arg1;
- (id)avSystemControllerDispatchQueue;
- (void)cache:(id)arg1 didUpdateActiveAudioRoutingWithRoute:(id)arg2 routeAttributes:(id)arg3 activeOutputDevices:(id)arg4;
- (void)cache:(id)arg1 didUpdateVolumeLimitEnforced:(bool)arg2;
- (void)cancelVolumeEvent;
- (void)changeVolumeByDelta:(float)arg1;
- (void)clearAlwaysHiddenCategories;
- (void)decreaseVolume;
- (float)euVolumeLimit;
- (id)existingVolumeHUDViewController;
- (void)handleVolumeButtonWithType:(long long)arg1 down:(bool)arg2;
- (void)hideVolumeHUDIfVisible;
- (void)increaseVolume;
- (id)initWithHUDController:(id)arg1 ringerControl:(id)arg2;
- (bool)isEUDevice;
- (bool)isEUVolumeLimitEnabled;
- (bool)isEUVolumeLimitEnforced;
- (bool)isEUVolumeLimitSet;
- (id)lastDisplayedCategory;
- (id)presentedVolumeHUDViewController;
- (void)removeAlwaysHiddenCategory:(id)arg1;
- (void)setActiveCategoryVolume:(float)arg1;
- (void)setVolume:(float)arg1 forCategory:(id)arg2;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (void)toggleMute;
- (bool)userHasAcknowledgedEUVolumeLimit;
- (void)volumeHUDViewControllerRequestsDismissal:(id)arg1;
- (float)volumeStepDown;
- (float)volumeStepUp;
- (bool)wouldShowAtLeastAYellowWarningForVolume:(float)arg1;

@end
