/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/SpringBoard.framework/SpringBoard
 */

@interface SBPIPContainerViewController : UIViewController <PGPictureInPictureViewControllerContentContainer, SBPIPContentViewLayoutSettingsObserver, UIGestureRecognizerDelegate> {
    unsigned int  _addContentViewLayoutConstraints;
    bool  _animateSafeAreaInsetsChanges;
    UIView * _contentView;
    NSLayoutConstraint * _contentViewGestureCenterXLayoutConstraint;
    NSLayoutConstraint * _contentViewGestureCenterYLayoutConstraint;
    NSLayoutConstraint * _contentViewGestureHeightLayoutConstraint;
    NSLayoutConstraint * _contentViewGestureWidthLayoutConstraint;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentViewPadding;
    long long  _contentViewPosition;
    struct CGSize { 
        double width; 
        double height; 
    }  _contentViewSize;
    FBDisplayLayoutElement * _displayLayoutElement;
    double  _displayLayoutElementLevel;
    unsigned int  _handlePanRotationPinchGestureEndedState;
    double  _initialGestureScale;
    bool  _interfaceOrientationLockAcquired;
    long long  _layoutConstraintStyle;
    NSMutableArray * _layoutConstraints;
    NSHashTable * _observerHashTable;
    unsigned int  _panGestureHandled;
    struct CGPoint { 
        double x; 
        double y; 
    }  _panGestureVelocity;
    PGPictureInPictureViewController * _pictureInPictureViewController;
    unsigned int  _pinchGestureHandled;
    double  _pinchGestureScaleFactor;
    struct CGSize { 
        double width; 
        double height; 
    }  _preferredContentSize;
    double  _previousRotation;
    long long  _requiredInterfaceOrientation;
    unsigned int  _rotationGestureHandled;
    unsigned int  _stashContentView;
    unsigned int  _updateContentViewLayoutSettingsAndLayoutIfNeeded;
}

@property (nonatomic) bool animateSafeAreaInsetsChanges;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) double displayLayoutElementLevel;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) PGPictureInPictureViewController *pictureInPictureViewController;
@property (nonatomic, readonly) long long requiredInterfaceOrientation;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (double)SB_accessibilityContentViewScale;
- (void)SB_accessibilitySetContentViewScale:(double)arg1;
- (void)_acquireInterfaceOrientationLock;
- (void)_actuallyHandlePanRotationPinchGestureEndedState;
- (void)_actuallyUpdateContentViewLayoutSettingsAndLayoutIfNeeded;
- (void)_adjustContentViewAnchorPointForGestureRecognizer:(id)arg1;
- (struct CGSize { double x1; double x2; })_constrainContentViewSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })_contentViewCenter;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentViewFrameFromInterfaceOrientation:(long long)arg1 frameInFixedCoordinateSpace:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentViewFrameInDisplayReferenceSpace;
- (void)_handlePanGesture:(id)arg1;
- (void)_handlePanRotationPinchGestureBeganState;
- (void)_handlePanRotationPinchGestureEndedState;
- (void)_handlePinchGesture:(id)arg1;
- (void)_handleRotationGesture:(id)arg1;
- (void)_relinquishInterfaceOrientationLock;
- (void)_requireInterfaceOrientation:(long long)arg1;
- (bool)_stashContentViewWithContentViewCenter:(struct CGPoint { double x1; double x2; })arg1;
- (void)_updateContentViewLayoutConstraintsWithContentViewSize;
- (void)_updateContentViewLayoutConstraintsWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_updateContentViewLayoutSettingsAndLayoutIfNeeded;
- (void)_updateDisplayLayoutElementReferenceFrame;
- (void)acquireInterfaceOrientationLock;
- (void)addObserver:(id)arg1;
- (bool)animateSafeAreaInsetsChanges;
- (void)contentViewLayoutSettingsDidChange;
- (void)dealloc;
- (double)displayLayoutElementLevel;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)handleDoubleTapGesture;
- (bool)handleTapGesture;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithPictureInPictureViewController:(id)arg1;
- (void)loadView;
- (void)performRotateAnimationWithRotation:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)performStartAnimationWithAnimationHandler:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (void)performStopAnimationWithFinalInterfaceOrientation:(long long)arg1 finalLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 animationHandler:(id /* block */)arg3 completionHandler:(id /* block */)arg4;
- (id)pictureInPictureViewController;
- (void)preferredContentSizeDidChangeForPictureInPictureViewController;
- (void)prepareStartAnimationWithInitialInterfaceOrientation:(long long)arg1 initialLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 completionHandler:(id /* block */)arg3;
- (void)relinquishInterfaceOrientationLock;
- (void)removeObserver:(id)arg1;
- (long long)requiredInterfaceOrientation;
- (void)setAnimateSafeAreaInsetsChanges:(bool)arg1;
- (void)setContentViewPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 animationDuration:(double)arg2 animationOptions:(unsigned long long)arg3;
- (void)setDisplayLayoutElementLevel:(double)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewSafeAreaInsetsDidChange;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

@end
