/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/WorkflowKit.framework/WorkflowKit
 */

@interface RLMSchema : NSObject <NSCopying> {
    NSArray * _objectSchema;
    NSMutableDictionary * _objectSchemaByName;
    struct Schema { 
        struct ObjectSchema {} *__begin_; 
        struct ObjectSchema {} *__end_; 
        struct __compressed_pair<realm::ObjectSchema *, std::__1::allocator<realm::ObjectSchema> > { 
            struct ObjectSchema {} *__value_; 
        } __end_cap_; 
    }  _objectStoreSchema;
}

@property (nonatomic, copy) NSArray *objectSchema;
@property (nonatomic, retain) NSMutableDictionary *objectSchemaByName;

+ (Class)classForString:(id)arg1;
+ (id)dynamicSchemaFromObjectStoreSchema:(const struct Schema { struct ObjectSchema {} *x1; struct ObjectSchema {} *x2; struct __compressed_pair<realm::ObjectSchema *, std::__1::allocator<realm::ObjectSchema> > { struct ObjectSchema {} *x_3_1_1; } x3; }*)arg1;
+ (id)partialPrivateSharedSchema;
+ (id)partialSharedSchema;
+ (id)schemaWithObjectClasses:(id)arg1;
+ (id)sharedSchema;
+ (id)sharedSchemaForClass:(Class)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)init;
- (bool)isEqualToSchema:(id)arg1;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectSchema;
- (id)objectSchemaByName;
- (struct Schema { struct ObjectSchema {} *x1; struct ObjectSchema {} *x2; struct __compressed_pair<realm::ObjectSchema *, std::__1::allocator<realm::ObjectSchema> > { struct ObjectSchema {} *x_3_1_1; } x3; })objectStoreCopy;
- (id)schemaForClassName:(id)arg1;
- (void)setObjectSchema:(id)arg1;
- (void)setObjectSchemaByName:(id)arg1;

@end
