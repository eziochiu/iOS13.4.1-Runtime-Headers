/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/WorkflowKit.framework/WorkflowKit
 */

@interface WFOutOfProcessWorkflowController : NSObject <WFOutOfProcessWorkflowControllerHost> {
    NSString * _automationType;
    NSString * _debugIdentifier;
    <WFOutOfProcessWorkflowControllerDelegate> * _delegate;
    long long  _environment;
    NSExtension * _extension;
    NSObject<OS_dispatch_source> * _extensionMaxRunTimeTimer;
    NSUUID * _extensionRequestIdentifier;
    WFContentCollection * _input;
    NSObject<OS_dispatch_queue> * _internalSerialQueue;
    WFContentCollection * _output;
    long long  _state;
    double  _timeoutSeconds;
    NSData * _workflowData;
    WFWorkflowReference * _workflowReference;
}

@property (nonatomic, copy) NSString *automationType;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) NSString *debugIdentifier;
@property (nonatomic) <WFOutOfProcessWorkflowControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) long long environment;
@property (nonatomic, retain) NSExtension *extension;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *extensionMaxRunTimeTimer;
@property (nonatomic, retain) NSUUID *extensionRequestIdentifier;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) WFContentCollection *input;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *internalSerialQueue;
@property (nonatomic, readonly) WFContentCollection *output;
@property (getter=isRunning, nonatomic, readonly) bool running;
@property (nonatomic) long long state;
@property (readonly) Class superclass;
@property (nonatomic, readonly) double timeoutSeconds;
@property (nonatomic, readonly) NSData *workflowData;
@property (nonatomic, readonly) WFWorkflowReference *workflowReference;

- (void).cxx_destruct;
- (id)automationType;
- (void)cancelTimeoutTimer;
- (void)dealloc;
- (id)debugIdentifier;
- (id)delegate;
- (long long)environment;
- (id)extension;
- (id)extensionContext;
- (id)extensionInterface;
- (id)extensionMaxRunTimeTimer;
- (id)extensionRequestIdentifier;
- (void)handleExtensionMaxRunTimeExceeded;
- (void)handleXPCConnectionInterruption;
- (id)initWithWorkflow:(id)arg1 database:(id)arg2 environment:(long long)arg3;
- (id)initWithWorkflowData:(id)arg1 debugIdentifier:(id)arg2 environment:(long long)arg3;
- (id)initWithWorkflowData:(id)arg1 debugIdentifier:(id)arg2 environment:(long long)arg3 workflowReference:(id)arg4;
- (id)input;
- (id)internalSerialQueue;
- (bool)isRunning;
- (id)output;
- (void)reportFinishToDelegateWithError:(id)arg1 cancelled:(bool)arg2;
- (void)restartTimeoutTimer;
- (bool)runWithInput:(id)arg1 error:(out id*)arg2;
- (void)setAutomationType:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExtension:(id)arg1;
- (void)setExtensionMaxRunTimeTimer:(id)arg1;
- (void)setExtensionRequestIdentifier:(id)arg1;
- (void)setInput:(id)arg1;
- (void)setState:(long long)arg1;
- (long long)state;
- (void)stop;
- (void)stopExtension;
- (double)timeoutSeconds;
- (id)workflowData;
- (void)workflowDidFinishRunningWithError:(id)arg1 cancelled:(bool)arg2;
- (void)workflowDidStart;
- (id)workflowReference;

@end
