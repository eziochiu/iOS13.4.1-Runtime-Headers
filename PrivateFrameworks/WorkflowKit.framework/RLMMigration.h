/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/WorkflowKit.framework/WorkflowKit
 */

@interface RLMMigration : NSObject {
    struct unordered_map<NSString *, realm::IndexSet, std::__1::hash<NSString *>, std::__1::equal_to<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, realm::IndexSet> > > { 
        struct __hash_table<std::__1::__hash_value_type<NSString *, realm::IndexSet>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, realm::IndexSet>, std::__1::hash<NSString *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, realm::IndexSet>, std::__1::equal_to<NSString *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, realm::IndexSet> > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, realm::IndexSet>, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, realm::IndexSet>, std::__1::hash<NSString *>, true> > { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, realm::IndexSet>, std::__1::equal_to<NSString *>, true> > { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _deletedObjectIndices;
    RLMRealm * _oldRealm;
    RLMRealm * _realm;
    struct Schema { struct ObjectSchema {} *x1; struct ObjectSchema {} *x2; struct __compressed_pair<realm::ObjectSchema *, std::__1::allocator<realm::ObjectSchema> > { struct ObjectSchema {} *x_3_1_1; } x3; } * _schema;
}

@property (nonatomic, readonly) RLMSchema *newSchema;
@property (nonatomic, retain) RLMRealm *oldRealm;
@property (nonatomic, readonly) RLMSchema *oldSchema;
@property (nonatomic, retain) RLMRealm *realm;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)createObject:(id)arg1 withObject:(id)arg2;
- (id)createObject:(id)arg1 withValue:(id)arg2;
- (bool)deleteDataForClassName:(id)arg1;
- (void)deleteObject:(id)arg1;
- (void)deleteObjectsMarkedForDeletion;
- (void)enumerateObjects:(id)arg1 block:(id /* block */)arg2;
- (void)execute:(id /* block */)arg1;
- (id)initWithRealm:(id)arg1 oldRealm:(id)arg2 schema:(struct Schema { struct ObjectSchema {} *x1; struct ObjectSchema {} *x2; struct __compressed_pair<realm::ObjectSchema *, std::__1::allocator<realm::ObjectSchema> > { struct ObjectSchema {} *x_3_1_1; } x3; }*)arg3;
- (id)newSchema;
- (id)oldRealm;
- (id)oldSchema;
- (id)realm;
- (void)renamePropertyForClass:(id)arg1 oldName:(id)arg2 newName:(id)arg3;
- (void)setOldRealm:(id)arg1;
- (void)setRealm:(id)arg1;

@end
