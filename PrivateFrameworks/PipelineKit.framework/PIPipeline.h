/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/PipelineKit.framework/PipelineKit
 */

@interface PIPipeline : NSObject {
    NSObject<OS_dispatch_queue> * _asynchronousMethodsQueue;
    NSObject<OS_dispatch_queue> * _backgroundQueue;
    long long  _concurrencyLimit;
    NSObject<OS_dispatch_queue> * _defaultQueue;
    long long  _executingConcurrency;
    NSMutableArray * _executingOperations;
    PIStatisticsElapsedTime * _executionTime;
    NSMutableSet * _groups;
    NSString * _identifier;
    PIGroup * _limitedGroup;
    PIGroup * _mainGroup;
    PIPipeline * _mainPipeline;
    NSMutableArray * _operations;
    NSMapTable * _operationsByIdentifier;
    NSMapTable * _operationsByKey;
    NSMutableDictionary * _operationsByPriority;
    NSObject<OS_dispatch_group> * _operationsGroup;
    NSMapTable * _operationsRates;
    long long  _qualityOfService;
    NSObject<OS_dispatch_queue> * _schedulerQueue;
    unsigned long long  _schedulerType;
    PIGroup * _serialGroup;
    bool  _suspended;
    double  _timestampStart;
    NSObject<OS_dispatch_queue> * _userInitiatedQueue;
    NSObject<OS_dispatch_queue> * _userInteractiveQueue;
    NSObject<OS_dispatch_queue> * _userInterfaceQueue;
    NSObject<OS_dispatch_queue> * _utilityQueue;
}

@property long long concurrencyLimit;
@property (readonly) long long executingConcurrency;
@property (readonly, copy) NSArray *executingOperations;
@property (readonly) unsigned long long executingOperationsCount;
@property (readonly, copy) NSSet *groups;
@property (nonatomic, readonly, copy) NSString *identifier;
@property (readonly) bool isExecuting;
@property (nonatomic) PIPipeline *mainPipeline;
@property (readonly, copy) NSArray *operations;
@property (readonly) unsigned long long operationsCount;
@property long long qualityOfService;
@property unsigned long long schedulerType;
@property (getter=isSuspended) bool suspended;

+ (id)pipeline;
+ (id)pipelineWithConcurrencyLimit:(long long)arg1 qualityOfService:(long long)arg2;
+ (id)sharedPipeline;

- (void).cxx_destruct;
- (void)_addOperation:(id)arg1;
- (void)_executeOperation:(id)arg1;
- (void)_finishOperation:(id)arg1 result:(id)arg2;
- (id)_firstValidOperationInArray:(id)arg1;
- (id)_nextValidOperation;
- (void)_operation:(id)arg1 didChangePriority:(long long)arg2;
- (id)_queueForOperation:(id)arg1;
- (void)_rebuildOperationsByPriority;
- (void)_removeOperation:(id)arg1;
- (void)_scheduleOperations;
- (void)_updateInternalGroups;
- (void)addGroup:(id)arg1;
- (void)addOperation:(id)arg1;
- (id)addOperationWithExecutionBlock:(id /* block */)arg1;
- (void)cancelAllOperations:(id /* block */)arg1;
- (void)cancelOperations:(id)arg1 waitUntilFinishedBlock:(id /* block */)arg2;
- (long long)concurrencyLimit;
- (void)dealloc;
- (id)description;
- (long long)executingConcurrency;
- (id)executingOperations;
- (unsigned long long)executingOperationsCount;
- (double)executionTime;
- (id)groups;
- (id)identifier;
- (id)init;
- (bool)isExecuting;
- (bool)isSuspended;
- (id)limitedGroup;
- (id)mainGroup;
- (id)mainPipeline;
- (id)operationWithIdentifier:(id)arg1;
- (id)operations;
- (unsigned long long)operationsCount;
- (id)operationsWithKey:(id)arg1;
- (id)operationsWithPriority:(long long)arg1;
- (long long)qualityOfService;
- (void)removeGroup:(id)arg1;
- (void)reorderOperationsWithComparator:(id /* block */)arg1 completionBlock:(id /* block */)arg2;
- (void)scheduleOperations;
- (unsigned long long)schedulerType;
- (id)serialGroup;
- (void)setConcurrencyLimit:(long long)arg1;
- (void)setMainPipeline:(id)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)setSchedulerType:(unsigned long long)arg1;
- (void)setSuspended:(bool)arg1;
- (void)updateOperationsWithBlock:(id /* block */)arg1 completionBlock:(id /* block */)arg2;
- (id)waitUntilFinished:(bool)arg1;
- (void)waitUntilFinishedUsingBlock:(id /* block */)arg1;
- (double)wallTime;

@end
