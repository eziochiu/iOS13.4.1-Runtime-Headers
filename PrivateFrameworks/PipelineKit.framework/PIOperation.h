/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/PipelineKit.framework/PipelineKit
 */

@interface PIOperation : NSObject {
    id /* block */  _cancellationBlock;
    bool  _cancelled;
    id /* block */  _completionBlock;
    long long  _concurrencyLimit;
    id  _context;
    NSMutableArray * _dependencies;
    NSError * _error;
    id /* block */  _executionBlock;
    double  _executionRateLimit;
    unsigned long long  _executionTimeout;
    NSObject<OS_dispatch_source> * _executionTimeoutTimer;
    PIGroup * _group;
    NSString * _identifier;
    NSString * _information;
    id  _key;
    PIOperation * _mainOperation;
    bool  _needsToRetry;
    NSObject<OS_dispatch_group> * _operationGroup;
    long long  _priority;
    float  _progress;
    id /* block */  _progressBlock;
    long long  _qualityOfService;
    unsigned long long  _retryCount;
    unsigned long long  _state;
    NSMutableArray * _subOperations;
    PIPipeline * _subPipeline;
    double  _timestampCancelling;
    double  _timestampExecuting;
    double  _timestampFinish;
    double  _timestampReady;
    double  _timestampStart;
    unsigned long long  _waitingTimeout;
    NSObject<OS_dispatch_source> * _waitingTimeoutTimer;
    unsigned long long  _wallTimeout;
    NSObject<OS_dispatch_source> * _wallTimeoutTimer;
}

@property (nonatomic, copy) id /* block */ cancellationBlock;
@property (getter=isCancelled) bool cancelled;
@property (nonatomic, copy) id /* block */ completionBlock;
@property long long concurrencyLimit;
@property (nonatomic, retain) id context;
@property (readonly, copy) NSArray *dependencies;
@property (retain) NSError *error;
@property (nonatomic, copy) id /* block */ executionBlock;
@property double executionRateLimit;
@property unsigned long long executionTimeout;
@property (getter=isFinished, readonly) bool finished;
@property (nonatomic) PIGroup *group;
@property (nonatomic, readonly, copy) NSString *identifier;
@property (nonatomic, copy) NSString *information;
@property (nonatomic, copy) id key;
@property bool needsToRetry;
@property long long priority;
@property float progress;
@property (nonatomic, copy) id /* block */ progressBlock;
@property long long qualityOfService;
@property (readonly) unsigned long long retryCount;
@property unsigned long long state;
@property unsigned long long waitingTimeout;
@property unsigned long long wallTimeout;

+ (id)_stringForPriority:(long long)arg1;
+ (id)_stringForQualityOfService:(long long)arg1;
+ (id)_stringForState:(unsigned long long)arg1;
+ (id)operation;
+ (id)operationWithExecutionBlock:(id /* block */)arg1;

- (void).cxx_destruct;
- (void)_cancel;
- (void)_cleanup;
- (void)_didFinish;
- (void)_finishSynchronousOperation:(id)arg1;
- (void)_performOperationSynchronously;
- (void)_prepare;
- (void)_willExecute;
- (void)_willFinish;
- (void)_willRetry;
- (void)addDependencies:(id)arg1;
- (void)cancel:(id /* block */)arg1;
- (id /* block */)cancellationBlock;
- (double)cancellationTime;
- (id /* block */)completionBlock;
- (long long)concurrencyLimit;
- (id)context;
- (void)dealloc;
- (id)dependencies;
- (id)description;
- (id)error;
- (id)executingQueue;
- (id /* block */)executionBlock;
- (long long)executionQualityOfService;
- (double)executionRateLimit;
- (double)executionTime;
- (unsigned long long)executionTimeout;
- (id)group;
- (bool)hasSucceeded;
- (id)identifier;
- (id)information;
- (id)init;
- (bool)isActive;
- (bool)isCancelled;
- (bool)isFinished;
- (id)key;
- (id)mainOperation;
- (bool)needsToRetry;
- (id)performSubOperationSynchronously:(id)arg1 error:(id*)arg2;
- (void)performSubOperationsAsynchronously:(id)arg1 waitUntilFinishedUsingBlock:(id /* block */)arg2;
- (id)performSynchronously;
- (id)performSynchronously:(bool)arg1 error:(id*)arg2;
- (long long)priority;
- (float)progress;
- (id /* block */)progressBlock;
- (long long)qualityOfService;
- (void)removeDependencies:(id)arg1;
- (unsigned long long)retryCount;
- (void)setCancellationBlock:(id /* block */)arg1;
- (void)setCancelled:(bool)arg1;
- (void)setCompletionBlock:(id /* block */)arg1;
- (void)setConcurrencyLimit:(long long)arg1;
- (void)setContext:(id)arg1;
- (void)setError:(id)arg1;
- (void)setExecutionBlock:(id /* block */)arg1;
- (void)setExecutionRateLimit:(double)arg1;
- (void)setExecutionTimeout:(unsigned long long)arg1;
- (void)setGroup:(id)arg1;
- (void)setInformation:(id)arg1;
- (void)setKey:(id)arg1;
- (void)setNeedsToRetry:(bool)arg1;
- (void)setPriority:(long long)arg1;
- (void)setProgress:(float)arg1;
- (void)setProgressBlock:(id /* block */)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)setState:(unsigned long long)arg1;
- (void)setWaitingTimeout:(unsigned long long)arg1;
- (void)setWallTimeout:(unsigned long long)arg1;
- (bool)shouldContinue;
- (unsigned long long)state;
- (id)subOperations;
- (id)subPipeline;
- (void)updateProgress;
- (void)waitUntilFinishedUsingBlock:(id /* block */)arg1;
- (double)waitingTime;
- (unsigned long long)waitingTimeout;
- (double)wallTime;
- (unsigned long long)wallTimeout;

@end
