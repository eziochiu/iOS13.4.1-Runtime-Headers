/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/MediaControls.framework/MediaControls
 */

@interface MediaControlsVolumeViewController : UIViewController <CCUIContentModuleContentViewController, CCUIGroupRendering, MPVolumeDisplaying, MediaControlsVolumeControllerObserver, UIGestureRecognizerDelegate> {
    <MediaControlsVolumeViewControllerDelegate> * _delegate;
    bool  _isExpanded;
    NSString * _packageName;
    MediaControlsVolumeSliderView * _primarySlider;
    MediaControlsVolumeSliderView * _secondarySlider;
    MediaControlsVolumeController * _volumeController;
}

@property (nonatomic, readonly) UIViewPropertyAnimator *customAnimator;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MediaControlsVolumeViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isGroupRenderingRequired, nonatomic, readonly) bool groupRenderingRequired;
@property (readonly) unsigned long long hash;
@property (getter=isOnScreen, nonatomic, readonly) bool onScreen;
@property (getter=isOnScreenForVolumeDisplay, nonatomic, readonly) bool onScreenForVolumeDisplay;
@property (nonatomic, readonly) double preferredExpandedContentHeight;
@property (nonatomic, readonly) double preferredExpandedContentWidth;
@property (nonatomic, readonly) double preferredExpandedContinuousCornerRadius;
@property (nonatomic, readonly) bool providesOwnPlatter;
@property (nonatomic, readonly) CALayer *punchOutRootLayer;
@property (nonatomic, readonly) NSArray *punchOutRootLayers;
@property (nonatomic, readonly) bool shouldPerformHoverInteraction;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *volumeAudioCategory;
@property (nonatomic, retain) MediaControlsVolumeController *volumeController;
@property (nonatomic, readonly) UIWindowScene *windowSceneForVolumeDisplay;

- (void).cxx_destruct;
- (bool)_canShowWhileLocked;
- (void)_dismissMediaControlsVolumeViewController;
- (void)_performWithoutAnimationWhileHidden:(id /* block */)arg1;
- (void)_primarySliderValueDidChange:(id)arg1;
- (void)_secondarySliderValueDidChange:(id)arg1;
- (void)_updateGlyphPackageDescription;
- (void)_updateVisibility;
- (void)dealloc;
- (id)delegate;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)isGroupRenderingRequired;
- (bool)isOnScreen;
- (void)mediaControlsVolumeController:(id)arg1 didChangeUserInteractionEnabled:(bool)arg2 forRoute:(unsigned long long)arg3;
- (void)mediaControlsVolumeController:(id)arg1 didChangeVolumeAvailable:(bool)arg2 effectiveVolume:(float)arg3 forRoute:(unsigned long long)arg4;
- (void)mediaControlsVolumeController:(id)arg1 didUpdateSplitRoute:(bool)arg2;
- (double)preferredExpandedContentHeight;
- (double)preferredExpandedContentWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })primaryFrame;
- (bool)providesOwnPlatter;
- (id)punchOutRootLayers;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })secondaryFrame;
- (void)setDelegate:(id)arg1;
- (void)setVolumeController:(id)arg1;
- (bool)shouldExpandModuleOnTouch:(id)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (id)volumeAudioCategory;
- (id)volumeController;
- (void)willTransitionToExpandedContentMode:(bool)arg1;
- (id)windowSceneForVolumeDisplay;

@end
