/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/TextRecognition.framework/TextRecognition
 */

@interface CRImageReader : NSObject {
    NSArray * _beamSearches;
    unsigned short  _blank;
    CRPerformanceStatistics * _detectorStats;
    CRLanguageCorrection * _languageCorrection;
    CRTextDetectorModel * _ocrDetectorModel;
    CRTextRecognizerModel * _ocrRecognizerModel;
    NSArray * _outputObjectTypes;
    CRPerformanceStatistics * _postProcStats;
    CRPerformanceStatistics * _recognizerStats;
    CRRegex * _regExpressions;
    bool  _shouldCancel;
    CRPerformanceStatistics * _singleFeatureLMStats;
    CRPerformanceStatistics * _singleFeatureRecognizerStats;
    NSOrderedSet * _targetLanguages;
    NSDictionary * _userOptions;
}

@property (nonatomic, retain) NSArray *beamSearches;
@property (nonatomic) unsigned short blank;
@property (retain) CRPerformanceStatistics *detectorStats;
@property (nonatomic, retain) CRLanguageCorrection *languageCorrection;
@property (retain) CRTextDetectorModel *ocrDetectorModel;
@property (retain) CRTextRecognizerModel *ocrRecognizerModel;
@property (copy) NSArray *outputObjectTypes;
@property (retain) CRPerformanceStatistics *postProcStats;
@property (retain) CRPerformanceStatistics *recognizerStats;
@property (nonatomic, retain) CRRegex *regExpressions;
@property bool shouldCancel;
@property (retain) CRPerformanceStatistics *singleFeatureLMStats;
@property (retain) CRPerformanceStatistics *singleFeatureRecognizerStats;
@property (retain) NSOrderedSet *targetLanguages;
@property (nonatomic, retain) NSDictionary *userOptions;

+ (id)_lmQueues;
+ (void)calculateTargetOutputSize:(struct CGSize { double x1; double x2; }*)arg1 andAdjustedInputScale:(double*)arg2 andPaddedSize:(struct CGSize { double x1; double x2; }*)arg3 forImageSize:(struct CGSize { double x1; double x2; })arg4 withMaximumSize:(struct CGSize { double x1; double x2; })arg5;
+ (id)defaultOptions;
+ (id)descriptionForErrorCode:(int)arg1;
+ (id)errorWithErrorCode:(int)arg1;
+ (id)languageSetFromOptionsDictionary:(id)arg1;
+ (id)recognizerFromOptionsDictionary:(id)arg1;
+ (unsigned long long)revisionNumber;
+ (id)supportedLanguagesForOptions:(id)arg1 revision:(long long)arg2 error:(id*)arg3;
+ (id)textResultsForCGImage:(struct CGImage { }*)arg1 numberOfCandidates:(long long)arg2;
+ (id)textResultsForCGImage:(struct CGImage { }*)arg1 numberOfCandidates:(long long)arg2 title:(id*)arg3;
+ (id)textResultsForCGImage:(struct CGImage { }*)arg1 numberOfCandidates:(long long)arg2 title:(id*)arg3 error:(id*)arg4;

- (void).cxx_destruct;
- (long long)_fkcrIndexOfBestModelForAspectRatio:(float)arg1;
- (long long)_indexOfBestModelForAspectRatio:(float)arg1;
- (void)aggregateScoreAndGeoMap:(id)arg1 inputGeo:(id)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3 outputScoreMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg4 outputGeoMap:(struct vImage_Buffer {}*)arg5 outputOrigin:(struct CGPoint { double x1; double x2; })arg6 withScale:(struct CGSize { double x1; double x2; })arg7;
- (id)beamSearches;
- (unsigned short)blank;
- (void)cancel;
- (id)combinedLineFeature:(id)arg1 lineFeature:(id)arg2;
- (struct vector<double, std::__1::allocator<double> > { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_1_1; } x3; })converMLMultiArraytoArray:(id)arg1 targetSize:(struct CGSize { double x1; double x2; })arg2;
- (struct vector<float, std::__1::allocator<float> > { float *x1; float *x2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_1_1; } x3; })convertVImageGeoMapstoArray:(struct vImage_Buffer {}**)arg1;
- (struct vector<double, std::__1::allocator<double> > { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_1_1; } x3; })convertVImageScoreMaptoArray:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1;
- (id)correctLMDecodingWithRegex:(id)arg1 noLMDecoding:(id)arg2;
- (struct __CVBuffer { }*)createCroppedRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromPixelBuffer:(struct __CVBuffer { }*)arg2;
- (struct __CVBuffer { }*)createScaledBufferOfSize:(struct CGSize { double x1; double x2; })arg1 fromPixelBuffer:(struct __CVBuffer { }*)arg2;
- (struct __CVBuffer { }*)cvPixelBufferForImageAtPath:(id)arg1 withScale:(float)arg2;
- (id)detectCRTextFeaturesInImage:(id)arg1 logIntermediateDetectorResult:(id*)arg2 options:(id)arg3 error:(id*)arg4;
- (id)detectorStats;
- (void)enumerateInputsForFeatures:(id)arg1 widthIndex:(long long)arg2 inImage:(id)arg3 options:(id)arg4 usingBlock:(id /* block */)arg5;
- (void)extractGeomap:(id)arg1 toImages:(struct vImage_Buffer {}*)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3;
- (struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })extractImageMap:(id)arg1 targetSize:(struct CGSize { double x1; double x2; })arg2;
- (void)fkcrAssignSubFeatureBoundsFromSourceFeature:(id)arg1 toDestFeature:(id)arg2;
- (id)fkcrCorrectLMDecodingWithRegex:(id)arg1 noLMDecoding:(id)arg2;
- (id)fkcrDetectCITextFeaturesInImage:(id)arg1 logIntermediateDetectorResult:(id*)arg2 options:(id)arg3;
- (void)fkcrEnumerateInputsForFeatures:(id)arg1 widthIndex:(long long)arg2 inImage:(id)arg3 options:(id)arg4 usingBlock:(id /* block */)arg5;
- (id)fkcrFitQuadraticBezierCurve2D:(id)arg1 onImage:(id)arg2;
- (struct __CVBuffer { }*)fkcrGrayscalePixelBufferFromCGImage:(struct CGImage { }*)arg1 withScale:(float)arg2;
- (void)fkcrLMDecodeFeatures:(id)arg1 activationMaps:(id)arg2 image:(id)arg3 options:(id)arg4;
- (void)fkcrMaxDecodeFeatures:(id)arg1 activationMaps:(id)arg2 image:(id)arg3 options:(id)arg4;
- (void)fkcrRecognizeFeatures:(id)arg1 widthIndex:(long long)arg2 inImage:(id)arg3 options:(id)arg4;
- (id)fkcrTextDetectorResultsForImage:(id)arg1 options:(id)arg2;
- (id)fkcrTextRecognizerResultsForTextFeatures:(id)arg1 inImage:(id)arg2 options:(id)arg3 title:(id*)arg4;
- (id)fkcrTextRecognizerResultsForTextFeatures:(id)arg1 inImage:(id)arg2 options:(id)arg3 withProgressHandler:(id /* block */)arg4 title:(id*)arg5;
- (id)fkcrTextResultsInImage:(id)arg1 options:(id)arg2 title:(id*)arg3;
- (id)fkcrTextResultsInImage:(id)arg1 options:(id)arg2 withProgressHandler:(id /* block */)arg3 title:(id*)arg4;
- (id)futharkTextResultsInImage:(id)arg1 options:(id)arg2;
- (bool)futharkValidateProbability:(id)arg1 options:(id)arg2;
- (id)genPolyResults:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1 geoMap:(struct vImage_Buffer {}**)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3 scale:(struct CGSize { double x1; double x2; })arg4;
- (void)getWordBoundariesForWhiteSpaceRanges:(id)arg1 topPoints:(id*)arg2 bottomPoints:(id*)arg3 image:(id)arg4 scale:(float)arg5 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg6 rotatedRoi:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg7 radians:(float)arg8;
- (struct __CVBuffer { }*)grayscalePixelBufferFromCGImage:(struct CGImage { }*)arg1 withScale:(float)arg2;
- (bool)hasAppleNeuralEngine;
- (id)initWithOptions:(id)arg1;
- (id)languageCorrection;
- (id)lfpTextResultsInImage:(id)arg1 options:(id)arg2;
- (id)lfpTextResultsInImage:(id)arg1 options:(id)arg2 withProgressHandler:(id /* block */)arg3;
- (bool)lfpValidateProbability:(id)arg1 options:(id)arg2;
- (void)lmDecodeFeaturesWithInfo:(id)arg1 activationMaps:(id)arg2 image:(id)arg3 options:(id)arg4;
- (void)masksForScoreMap:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1 imageMask:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg2 binaryMask:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg3;
- (void)maxDecodeFeaturesWithInfo:(id)arg1 activationMaps:(id)arg2 image:(id)arg3 options:(id)arg4;
- (id)mleTextDetectorResultsForImage:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (id)mleTextRecognizerResultsForTextFeatures:(id)arg1 inImage:(id)arg2 options:(id)arg3 withProgressHandler:(id /* block */)arg4 title:(id*)arg5 error:(id*)arg6;
- (id)mleTextResultsInImage:(id)arg1 options:(id)arg2 withProgressHandler:(id /* block */)arg3 title:(id*)arg4 error:(id*)arg5;
- (bool)mleValidateProbability:(id)arg1 options:(id)arg2;
- (id)ocrDetectorModel;
- (id)ocrRecognizerModel;
- (id)outputObjectTypes;
- (struct __CVBuffer { }*)pixelBufferFromCGImage:(struct CGImage { }*)arg1 withScale:(float)arg2;
- (struct __CVBuffer { }*)pixelBufferFromCGImage:(struct CGImage { }*)arg1 withScale:(double)arg2 paddedToSize:(struct CGSize { double x1; double x2; })arg3;
- (id)postProcStats;
- (bool)purgeCaches:(id)arg1;
- (void)recognizeFeatures:(id)arg1 widthIndex:(long long)arg2 inImage:(id)arg3 options:(id)arg4 error:(id*)arg5;
- (id)recognizerStats;
- (id)regExpressions;
- (id)resultsForPixelBuffer:(struct __CVBuffer { }*)arg1 options:(id)arg2 error:(id*)arg3;
- (id)resultsForPixelBuffer:(struct __CVBuffer { }*)arg1 roi:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 options:(id)arg3 error:(id*)arg4;
- (id)resultsForPixelBuffer:(struct __CVBuffer { }*)arg1 roi:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 options:(id)arg3 error:(id*)arg4 withProgressHandler:(id /* block */)arg5;
- (void)rotatePolygon:(struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; }*)arg1 center:(struct CGPoint { double x1; double x2; })arg2 angle:(float)arg3 dest:(struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; }*)arg4;
- (void)scaleBufferNearestNeighbor:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg1 geoMap:(struct vImage_Buffer {}**)arg2 dest:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg3 destGeomap:(struct vImage_Buffer {}**)arg4 binaryMask:(struct vImage_Buffer { void *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; }*)arg5;
- (void)setBeamSearches:(id)arg1;
- (void)setBlank:(unsigned short)arg1;
- (void)setDetectorStats:(id)arg1;
- (void)setLanguageCorrection:(id)arg1;
- (void)setOcrDetectorModel:(id)arg1;
- (void)setOcrRecognizerModel:(id)arg1;
- (void)setOutputObjectTypes:(id)arg1;
- (void)setPostProcStats:(id)arg1;
- (void)setRecognizerStats:(id)arg1;
- (void)setRegExpressions:(id)arg1;
- (void)setShouldCancel:(bool)arg1;
- (void)setSingleFeatureLMStats:(id)arg1;
- (void)setSingleFeatureRecognizerStats:(id)arg1;
- (void)setTargetLanguages:(id)arg1;
- (void)setUserOptions:(id)arg1;
- (bool)shouldCancel;
- (id)signpostLog;
- (id)singleFeatureLMStats;
- (id)singleFeatureRecognizerStats;
- (struct CGSize { double x1; double x2; })smallestImageSizeForTextWithRelativeHeight:(double)arg1 originalImageSize:(struct CGSize { double x1; double x2; })arg2;
- (id)sortedRotateTextFeatures:(id)arg1 center:(struct CGPoint { double x1; double x2; })arg2 radians:(float)arg3;
- (id)targetLanguages;
- (id)textDetectorResultsForImage:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (id)textDetectorResultsForImageAtURL:(id)arg1 options:(id)arg2;
- (id)textFeaturesFromPolygons:(struct vector<CRTextDetectorPostProcess::CRTextDetectorQuadFeature, std::__1::allocator<CRTextDetectorPostProcess::CRTextDetectorQuadFeature> > { struct CRTextDetectorQuadFeature {} *x1; struct CRTextDetectorQuadFeature {} *x2; struct __compressed_pair<CRTextDetectorPostProcess::CRTextDetectorQuadFeature *, std::__1::allocator<CRTextDetectorPostProcess::CRTextDetectorQuadFeature> > { struct CRTextDetectorQuadFeature {} *x_3_1_1; } x3; }*)arg1 withScale:(const float*)arg2;
- (id)textRecognizerResultsForTextFeatures:(id)arg1 forImageAtURL:(id)arg2 options:(id)arg3;
- (id)textRecognizerResultsForTextFeatures:(id)arg1 inImage:(id)arg2 options:(id)arg3 error:(id*)arg4;
- (id)textResultsForImage:(id)arg1 options:(id)arg2;
- (id)textResultsForImage:(id)arg1 options:(id)arg2 title:(id*)arg3;
- (id)textResultsForImage:(id)arg1 options:(id)arg2 withProgressHandler:(id /* block */)arg3 title:(id*)arg4;
- (id)textResultsForImage:(id)arg1 roi:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 options:(id)arg3 error:(id*)arg4 title:(id*)arg5;
- (id)textResultsForImage:(id)arg1 roi:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 options:(id)arg3 error:(id*)arg4 withProgressHandler:(id /* block */)arg5 title:(id*)arg6;
- (id)textResultsForImageAtURL:(id)arg1 options:(id)arg2;
- (id)textResultsForImageAtURL:(id)arg1 options:(id)arg2 withProgressHandler:(id /* block */)arg3;
- (id)userOptions;

@end
