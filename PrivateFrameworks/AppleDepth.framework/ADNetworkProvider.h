/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/AppleDepth.framework/AppleDepth
 */

@interface ADNetworkProvider : NSObject {
    NSDictionary * _inputBufferMap;
    bool  _isOutputInversed;
    struct CGSize { 
        double width; 
        double height; 
    }  _landscapeInputSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _landscapeOutputSize;
    NSArray * _layoutNames;
    struct CGSize { 
        double width; 
        double height; 
    }  _portraitInputSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _portraitOutputSize;
    NSURL * _url;
}

@property bool isOutputInversed;
@property struct CGSize { double x1; double x2; } landscapeInputSize;
@property struct CGSize { double x1; double x2; } landscapeOutputSize;
@property (retain) NSArray *layoutNames;
@property struct CGSize { double x1; double x2; } portraitInputSize;
@property struct CGSize { double x1; double x2; } portraitOutputSize;
@property (retain) NSURL *url;

+ (id)getAlternativePathForNetwork:(id)arg1 andPriority:(long long)arg2;
+ (bool)getAndVerifyDimensionsFromConfig:(id)arg1 inDictionary:(id)arg2 forKey:(id)arg3 dimensions:(struct CGSize { double x1; double x2; }*)arg4 layout:(unsigned long long*)arg5;
+ (id)getConfigFolderForNetwork:(id)arg1;
+ (id)getDefaultPathForNetwork:(id)arg1 andPriority:(long long)arg2;
+ (id)getEspressoFileNameForNetwork:(id)arg1 andPriority:(long long)arg2;
+ (id)providerForNetwork:(id)arg1 prioritization:(long long)arg2;
+ (bool)updateLayoutSize:(struct CGSize { double x1; double x2; }*)arg1 withSize:(struct CGSize { double x1; double x2; })arg2;

- (void).cxx_destruct;
- (id)bufferNameForType:(id)arg1;
- (id)initWithNetwork:(id)arg1 prioritization:(long long)arg2;
- (bool)isOutputInversed;
- (struct CGSize { double x1; double x2; })landscapeInputSize;
- (struct CGSize { double x1; double x2; })landscapeOutputSize;
- (id)layoutNames;
- (struct CGSize { double x1; double x2; })portraitInputSize;
- (struct CGSize { double x1; double x2; })portraitOutputSize;
- (void)setIsOutputInversed:(bool)arg1;
- (void)setLandscapeInputSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLandscapeOutputSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLayoutNames:(id)arg1;
- (void)setPortraitInputSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPortraitOutputSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setUrl:(id)arg1;
- (id)url;

@end
