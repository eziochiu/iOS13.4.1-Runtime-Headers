/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI
 */

@interface CAMZoomControl : UIControl <CAMZoomButtonDelegate> {
    CAMZoomControlButtonMaskView * __buttonMaskView;
    CAMZoomButtonPlatter * __buttonPlatter;
    UIView * __dialClippingView;
    NSArray * __displayZoomFactors;
    bool  __eligibleForSwipeDownToDismiss;
    CAMFeedbackController * __feedbackController;
    double  __hideAnimationInProgressDuration;
    CAMZoomButton * __highlightedZoomButton;
    long long  __lastHapticZone;
    struct CGPoint { 
        double x; 
        double y; 
    }  __previousTouchLocation;
    double  __previousTouchTime;
    bool  __shouldShowZoomDial;
    NSArray * __significantHapticDisplayValueEpsilons;
    NSSet * __significantHapticDisplayValueSwitchOverIndexes;
    NSArray * __significantHapticDisplayValues;
    double  __snappedZoomFactor;
    NSDate * __startTimeForHideAnimationInProgress;
    struct CGPoint { 
        double x; 
        double y; 
    }  __startTouchLocation;
    double  __unsnappingProgress;
    CAMZoomButton * __zoomButton;
    long long  __zoomControlMode;
    CAMZoomDial * __zoomDial;
    bool  __zoomDialEnabled;
    NSTimer * __zoomDialVisibilityTimer;
    NSArray * __zoomFactors;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentInsets;
    NSString * _contentSizeCategory;
    <CAMZoomControlDelegate> * _delegate;
    struct { 
        bool respondsToDidChangeZoomFactor; 
        bool respondsToCanToggleBetweenZoomFactors; 
        bool respondsToToggleBetweenZoomFactors; 
        bool respondsToCanPlayHaptics; 
    }  _delegateFlags;
    long long  _layoutStyle;
    double  _leftMargin;
    double  _maxAvailableZoomFactor;
    double  _minAvailableZoomFactor;
    long long  _orientation;
    double  _zoomButtonMaxYWhenContracted;
    double  _zoomDialRadius;
    double  _zoomFactor;
}

@property (nonatomic, readonly) CAMZoomControlButtonMaskView *_buttonMaskView;
@property (nonatomic, readonly) CAMZoomButtonPlatter *_buttonPlatter;
@property (getter=_isButtonPlatterSupportedForConfiguration, nonatomic, readonly) bool _buttonPlatterSupportedForConfiguration;
@property (nonatomic, readonly) UIView *_dialClippingView;
@property (nonatomic, readonly) double _displayMaximumZoomFactor;
@property (nonatomic, readonly) double _displayMinimumZoomFactor;
@property (setter=_setDisplayZoomFactors:, nonatomic, retain) NSArray *_displayZoomFactors;
@property (nonatomic, readonly) double _displayZoomValue;
@property (getter=_isEligibleForSwipeDownToDismiss, setter=_setEligibleForSwipeDownToDismiss:, nonatomic) bool _eligibleForSwipeDownToDismiss;
@property (nonatomic, readonly) CAMFeedbackController *_feedbackController;
@property (setter=_setHideAnimationInProgressDuration:, nonatomic) double _hideAnimationInProgressDuration;
@property (setter=_setHighlightedZoomButton:, nonatomic, retain) CAMZoomButton *_highlightedZoomButton;
@property (nonatomic) long long _lastHapticZone;
@property (setter=_setPreviousTouchLocation:, nonatomic) struct CGPoint { double x1; double x2; } _previousTouchLocation;
@property (setter=_setPreviousTouchTime:, nonatomic) double _previousTouchTime;
@property (nonatomic, readonly) bool _shouldHideZoomButtonBackground;
@property (nonatomic, readonly) bool _shouldShowButtonPlatter;
@property (setter=_setShouldShowZoomDial:, nonatomic) bool _shouldShowZoomDial;
@property (nonatomic, readonly) bool _shouldSnapDialToSwitchOverZoomFactors;
@property (nonatomic, readonly) bool _shouldUpdateZoomDialContentSizeCategory;
@property (nonatomic, readonly) bool _shouldUseZoomDialMask;
@property (setter=_setSignificantHapticDisplayValueEpsilons:, nonatomic, retain) NSArray *_significantHapticDisplayValueEpsilons;
@property (setter=_setSignificantHapticDisplayValueSwitchOverIndexes:, nonatomic, retain) NSSet *_significantHapticDisplayValueSwitchOverIndexes;
@property (setter=_setSignificantHapticDisplayValues:, nonatomic, retain) NSArray *_significantHapticDisplayValues;
@property (setter=_setSnappedZoomFactor:, nonatomic) double _snappedZoomFactor;
@property (setter=_setStartTimeForHideAnimationInProgress:, nonatomic, retain) NSDate *_startTimeForHideAnimationInProgress;
@property (setter=_setStartTouchLocation:, nonatomic) struct CGPoint { double x1; double x2; } _startTouchLocation;
@property (nonatomic, readonly) NSArray *_switchOverZoomFactors;
@property (setter=_setUnsnappingProgress:, nonatomic) double _unsnappingProgress;
@property (nonatomic, readonly) CAMZoomButton *_zoomButton;
@property (setter=_setZoomControlMode:, nonatomic) long long _zoomControlMode;
@property (nonatomic, readonly) CAMZoomDial *_zoomDial;
@property (getter=_isZoomDialEnabled, setter=_setZoomDialEnabled:, nonatomic) bool _zoomDialEnabled;
@property (setter=_setZoomDialVisibilityTimer:, nonatomic, retain) NSTimer *_zoomDialVisibilityTimer;
@property (setter=_setZoomFactors:, nonatomic, retain) NSArray *_zoomFactors;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentInsets;
@property (nonatomic) NSString *contentSizeCategory;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CAMZoomControlDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long layoutStyle;
@property (nonatomic) double leftMargin;
@property (nonatomic) double maxAvailableZoomFactor;
@property (nonatomic, readonly) double maximumZoomFactor;
@property (nonatomic) double minAvailableZoomFactor;
@property (nonatomic, readonly) double minimumZoomFactor;
@property (nonatomic) long long orientation;
@property (readonly) Class superclass;
@property (nonatomic, readonly) long long zoomButtonContentType;
@property (nonatomic) double zoomButtonMaxYWhenContracted;
@property (nonatomic, readonly) long long zoomButtonSymbol;
@property (nonatomic, readonly) double zoomDialBorderWidth;
@property (nonatomic) double zoomDialContentMaskingHeight;
@property (nonatomic) double zoomDialRadius;
@property (nonatomic) double zoomFactor;

- (void).cxx_destruct;
- (double)_accelerationForMovementFromPointFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 elapsedTime:(double)arg3;
- (double)_additionalAccelerationForMovementFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 deltaX:(double)arg3;
- (id)_buttonMaskView;
- (id)_buttonPlatter;
- (void)_cancelDelayedZoomDialVisibilityChange;
- (void)_cleanupForCancelTracking;
- (void)_configureForControlMode:(long long)arg1 zoomFactor:(double)arg2 zoomFactors:(id)arg3 displayZoomFactors:(id)arg4 zoomButtonContentType:(long long)arg5 animated:(bool)arg6;
- (double)_dampingFactorForDistanceFromDialForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)_dampingFactorForMovementFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
- (double)_dampingFactorForPerpendicularityFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
- (id)_dialClippingView;
- (double)_displayMaximumZoomFactor;
- (double)_displayMinimumZoomFactor;
- (id)_displayZoomFactors;
- (double)_displayZoomValue;
- (double)_displayZoomValueForZoomFactor:(double)arg1;
- (double)_distanceFromDialClippingViewToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_feedbackController;
- (void)_handleButtonTapped:(id)arg1;
- (void)_handleButtonTappedForDualCameraMode;
- (void)_handleButtonTappedForSelection:(id)arg1;
- (void)_handleButtonTappedForSingleCameraZoomPlusToggle;
- (void)_handleButtonTappedForTripleCameraMode:(id)arg1;
- (void)_handleZoomDialVisibilityTimerFiredWithUserInfo:(id)arg1;
- (long long)_hapticZoneForDisplayValue:(double)arg1;
- (double)_hideAnimationInProgressDuration;
- (id)_highlightedZoomButton;
- (bool)_isButtonPlatterSupportedForConfiguration;
- (bool)_isEligibleForSwipeDownToDismiss;
- (bool)_isPointWithinButtonPlatter:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_isTouchWithinButtonPlatter:(id)arg1;
- (bool)_isWithinZoomButtonBoundsWithTouch:(id)arg1;
- (bool)_isZoomDialEnabled;
- (long long)_lastHapticZone;
- (double)_normalizeValue:(double)arg1 betweenMinimumValue:(double)arg2 maximumValue:(double)arg3;
- (struct CGPoint { double x1; double x2; })_previousTouchLocation;
- (double)_previousTouchTime;
- (void)_resetSnapping;
- (void)_setDisplayZoomFactors:(id)arg1;
- (void)_setEligibleForSwipeDownToDismiss:(bool)arg1;
- (void)_setHideAnimationInProgressDuration:(double)arg1;
- (void)_setHighlightedZoomButton:(id)arg1;
- (void)_setPreviousTouchLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setPreviousTouchTime:(double)arg1;
- (void)_setShouldShowZoomDial:(bool)arg1;
- (void)_setShouldShowZoomDial:(bool)arg1 animationDuration:(long long)arg2;
- (void)_setShouldShowZoomDial:(bool)arg1 animationDuration:(long long)arg2 afterDelay:(double)arg3;
- (void)_setSignificantHapticDisplayValueEpsilons:(id)arg1;
- (void)_setSignificantHapticDisplayValueSwitchOverIndexes:(id)arg1;
- (void)_setSignificantHapticDisplayValues:(id)arg1;
- (void)_setSnappedZoomFactor:(double)arg1;
- (void)_setStartTimeForHideAnimationInProgress:(id)arg1;
- (void)_setStartTouchLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setUnsnappingProgress:(double)arg1;
- (void)_setZoomControlMode:(long long)arg1;
- (void)_setZoomDialEnabled:(bool)arg1;
- (void)_setZoomDialEnabled:(bool)arg1 animationDuration:(long long)arg2;
- (void)_setZoomDialVisibilityTimer:(id)arg1;
- (void)_setZoomFactor:(double)arg1 interactionType:(long long)arg2 shouldNotifyDelegate:(bool)arg3;
- (void)_setZoomFactors:(id)arg1;
- (bool)_shouldHideZoomButtonBackground;
- (bool)_shouldInterceptTouchesForHidingZoomDial;
- (bool)_shouldShowButtonPlatter;
- (bool)_shouldShowZoomDial;
- (bool)_shouldSnapDialToSwitchOverZoomFactors;
- (bool)_shouldUpdateZoomDialContentSizeCategory;
- (bool)_shouldUseZoomDialMask;
- (id)_significantHapticDisplayValueEpsilons;
- (id)_significantHapticDisplayValueSwitchOverIndexes;
- (id)_significantHapticDisplayValues;
- (double)_snappedZoomFactor;
- (id)_startTimeForHideAnimationInProgress;
- (struct CGPoint { double x1; double x2; })_startTouchLocation;
- (id)_switchOverZoomFactors;
- (double)_unsnappingProgress;
- (void)_updateDisplayedValuesAnimated:(bool)arg1;
- (void)_updateHapticEpsilons;
- (void)_updateHaptics:(bool)arg1;
- (void)_updateMaskViewForZoomButtonHighlightingTransform;
- (void)_updateSignificantValuesForHaptics;
- (void)_updateSubviewsAlphasWithDuration:(double)arg1 forConfigurationChange:(bool)arg2;
- (void)_updateZoomButtonTappableEdgeInsets;
- (id)_zoomButton;
- (long long)_zoomControlMode;
- (id)_zoomDial;
- (id)_zoomDialVisibilityTimer;
- (double)_zoomFactorForDisplayZoomValue:(double)arg1;
- (id)_zoomFactors;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)cancelTrackingWithEvent:(id)arg1;
- (void)configureForDualDeviceWithZoomFactor:(double)arg1 minimumZoomFactor:(double)arg2 displayMinimumZoomFactor:(double)arg3 maximumZoomFactor:(double)arg4 displayMaximumZoomFactor:(double)arg5 dualCameraSwitchOverZoomFactor:(double)arg6 displayDualCameraSwitchOverZoomFactor:(double)arg7;
- (void)configureForSelectionOnlyWithDisplayZoomFactors:(id)arg1 selectedIndex:(unsigned long long)arg2 animated:(bool)arg3;
- (void)configureForSingleCameraPlusToggleWithZoomFactor:(double)arg1 minimumZoomFactor:(double)arg2 displayMinimumZoomFactor:(double)arg3 maximumZoomFactor:(double)arg4 displayMaximumZoomFactor:(double)arg5;
- (void)configureForToggleOnlyWithZoomFactor:(double)arg1 displayZoomFactor:(double)arg2;
- (void)configureForToggleOnlyWithZoomFactor:(double)arg1 minimumZoomFactor:(double)arg2 displayMinimumZoomFactor:(double)arg3 maximumZoomFactor:(double)arg4 displayMaximumZoomFactor:(double)arg5;
- (void)configureForTripleDeviceWithZoomFactor:(double)arg1 minimumZoomFactor:(double)arg2 displayMinimumZoomFactor:(double)arg3 maximumZoomFactor:(double)arg4 displayMaximumZoomFactor:(double)arg5 switchOverZoomFactor1:(double)arg6 displaySwitchOverZoomFactor1:(double)arg7 switchOverZoomFactor2:(double)arg8 displaySwitchOverZoomFactor2:(double)arg9;
- (void)configureForZoomSymbolToggle;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInsets;
- (id)contentSizeCategory;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)delegate;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithLayoutStyle:(long long)arg1;
- (long long)layoutStyle;
- (void)layoutSubviews;
- (double)leftMargin;
- (double)maxAvailableZoomFactor;
- (double)maximumZoomFactor;
- (double)minAvailableZoomFactor;
- (double)minimumZoomFactor;
- (long long)orientation;
- (void)setContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setContentSizeCategory:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLayoutStyle:(long long)arg1;
- (void)setLeftMargin:(double)arg1;
- (void)setLeftMargin:(double)arg1 animated:(bool)arg2;
- (void)setMaxAvailableZoomFactor:(double)arg1;
- (void)setMinAvailableZoomFactor:(double)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setOrientation:(long long)arg1 animated:(bool)arg2;
- (void)setShouldShowZoomDial:(bool)arg1 animationDuration:(long long)arg2;
- (void)setZoomButtonMaxYWhenContracted:(double)arg1;
- (void)setZoomButtonSymbol:(long long)arg1 animated:(bool)arg2;
- (void)setZoomDialContentMaskingHeight:(double)arg1;
- (void)setZoomDialRadius:(double)arg1;
- (void)setZoomFactor:(double)arg1;
- (void)set_lastHapticZone:(long long)arg1;
- (long long)zoomButtonContentType;
- (void)zoomButtonDidLayout;
- (double)zoomButtonMaxYWhenContracted;
- (long long)zoomButtonSymbol;
- (double)zoomDialBorderWidth;
- (double)zoomDialContentMaskingHeight;
- (double)zoomDialRadius;
- (double)zoomFactor;

@end
