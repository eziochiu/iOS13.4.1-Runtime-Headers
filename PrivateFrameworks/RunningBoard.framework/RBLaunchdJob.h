/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/RunningBoard.framework/RunningBoard
 */

@interface RBLaunchdJob : NSObject {
    NSArray * _arguments;
    bool  _buildDYLDClosure;
    bool  _disableASLR;
    NSDictionary * _environment;
    NSString * _executablePath;
    RBLaunchdJobLabel * _label;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    bool  _lock_invalid;
    bool  _lock_started;
    BSMachPortTaskNameRight * _lock_taskNameRight;
    NSArray * _machServices;
    NSString * _managedPersona;
    NSString * _posixSpawnType;
    bool  _runAtLoad;
    NSString * _standardErrorPath;
    NSString * _standardOutputPath;
    bool  _waitForDebugger;
}

@property (nonatomic, readonly, copy) NSArray *arguments;
@property (nonatomic, readonly) bool buildDYLDClosure;
@property (nonatomic, readonly) bool disableASLR;
@property (nonatomic, readonly, copy) NSDictionary *environment;
@property (nonatomic, readonly, copy) NSString *executablePath;
@property (nonatomic, readonly, copy) RBLaunchdJobLabel *label;
@property (nonatomic, readonly, retain) RBSProcessExitStatus *lastExitStatus;
@property (nonatomic, readonly, copy) NSArray *machServices;
@property (nonatomic, readonly, copy) NSString *managedPersona;
@property (nonatomic, readonly, copy) NSString *posixSpawnType;
@property (nonatomic, readonly, retain) <RBSProcessIdentifier> *processIdentifier;
@property (nonatomic, readonly) bool runAtLoad;
@property (nonatomic, readonly, copy) NSString *standardErrorPath;
@property (nonatomic, readonly, copy) NSString *standardOutputPath;
@property (nonatomic, readonly, retain) BSMachPortTaskNameRight *taskNameRight;
@property (nonatomic, readonly) bool waitForDebugger;

+ (bool)_startJobLabel:(id)arg1 error:(out id*)arg2;
+ (bool)_stopJobLabel:(id)arg1 error:(out id*)arg2;
+ (id)jobWithLabel:(id)arg1 launchdData:(struct _launch_data { }*)arg2 error:(out id*)arg3;
+ (id)lastExitStatusForLabel:(id)arg1 error:(out id*)arg2;
+ (id)newJobWithIdentity:(id)arg1 launchContext:(id)arg2 error:(out id*)arg3;
+ (int)pidForJobLabel:(id)arg1 error:(out id*)arg2;
+ (id)sharedPersonaManager;
+ (bool)startJobLabel:(id)arg1 error:(out id*)arg2;

- (void).cxx_destruct;
- (id)_initWithLabel:(id)arg1 executablePath:(id)arg2 arguments:(id)arg3 environment:(id)arg4 machServices:(id)arg5 standardOutputPath:(id)arg6 standardErrorPath:(id)arg7 posixSpawnType:(id)arg8 options:(unsigned long long)arg9 managedPersona:(id)arg10;
- (bool)_lock_acquireTaskNameRightForOperation:(id)arg1 error:(out id*)arg2;
- (id)arguments;
- (bool)buildDYLDClosure;
- (id)debugDescription;
- (id)description;
- (bool)disableASLR;
- (id)environment;
- (id)executablePath;
- (struct _launch_data { }*)generateData;
- (id)init;
- (void)invalidate;
- (bool)isRunningWithError:(out id*)arg1;
- (id)label;
- (id)lastExitStatus;
- (id)machServices;
- (id)managedPersona;
- (id)posixSpawnType;
- (id)processIdentifier;
- (bool)runAtLoad;
- (id)standardErrorPath;
- (id)standardOutputPath;
- (bool)startWithError:(out id*)arg1;
- (bool)stopWithError:(out id*)arg1;
- (id)taskNameRight;
- (bool)waitForDebugger;

@end
