/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/RunningBoard.framework/RunningBoard
 */

@interface RBConnectionClient : NSObject <BSDescriptionProviding, RBClientInheritanceManagerDelegate, RBEntitlementPossessing, RBStateCapturing> {
    NSMutableSet * _assertionIdentifiers;
    <RBAssertionManaging> * _assertionManager;
    NSObject<OS_xpc_object> * _connection;
    RBProcess * _containingProcess;
    NSMutableSet * _deathMonitors;
    <RBEntitlementManaging> * _entitlementManager;
    <RBEntitlementPossessing> * _entitlements;
    unsigned int  _euid;
    RBSAssertionIdentifier * _expirationBoostAssertionIdentifier;
    RBClientInheritanceManager * _inheritanceManager;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    NSString * _logProem;
    RBProcess * _process;
    RBSProcessHandle * _processHandle;
    RBSProcessIdentifier * _processIdentifier;
    RBSProcessIdentity * _processIdentity;
    <RBProcessManaging> * _processManager;
    <RBProcessMonitoring> * _processMonitor;
    <RBStateCaptureManaging> * _stateCaptureManager;
    RBProcessMonitorObserver * _stateObserver;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) RBProcess *process;
@property (nonatomic, readonly, copy) RBSProcessIdentifier *processIdentifier;
@property (nonatomic, readonly, copy) RBSProcessIdentity *processIdentity;
@property (nonatomic, readonly, copy) NSString *stateCaptureTitle;
@property (readonly) Class superclass;

+ (id)sharedLaunchWorkloop;
+ (id)sharedTerminationWorkloop;

- (void).cxx_destruct;
- (void)acquireAssertionForDescriptor:(id)arg1 withReply:(id)arg2;
- (id)assertionDescriptorsWithFlattenedAttributes:(bool)arg1 error:(out id*)arg2;
- (id)busyExtensionInstancesFromSet:(id)arg1 error:(out id*)arg2;
- (id)captureState;
- (void)captureStateForSubsystem:(id)arg1 withReply:(id)arg2;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (void)didInvalidateAssertions:(id)arg1;
- (void)didRemoveProcess:(id)arg1 withState:(id)arg2;
- (void)didUpdateProcessStates:(id)arg1;
- (void)executeLaunchRequest:(id)arg1 withReply:(id)arg2;
- (void)executeTerminateRequest:(id)arg1 withReply:(id)arg2;
- (void)handleMessage:(id)arg1;
- (id)handshakeWithRequest:(id)arg1;
- (bool)hasEntitlement:(id)arg1;
- (bool)hasEntitlementDomain:(unsigned long long)arg1;
- (id)hostProcessForInstance:(id)arg1 error:(out id*)arg2;
- (id)identifiersForStateCaptureSubsystemsWithError:(out id*)arg1;
- (id)infoPlistResultForInstance:(id)arg1 forKeys:(id)arg2 error:(out id*)arg3;
- (void)inheritanceManager:(id)arg1 didChangeInheritances:(id)arg2 completion:(id /* block */)arg3;
- (id)init;
- (id)initWithContext:(id)arg1 process:(id)arg2 connection:(id)arg3;
- (bool)intendToExit:(id)arg1 withStatus:(id)arg2 error:(out id*)arg3;
- (void)invalidate;
- (oneway void)invalidateAssertionWithIdentifier:(id)arg1;
- (bool)invalidateAssertionWithIdentifier:(id)arg1 error:(out id*)arg2;
- (id)lastExitContextForInstance:(id)arg1 error:(out id*)arg2;
- (id)limitationsForInstance:(id)arg1 error:(out id*)arg2;
- (id)lookupHandleForKey:(id)arg1 error:(out id*)arg2;
- (id)lookupHandleForPredicate:(id)arg1 error:(out id*)arg2;
- (id)process;
- (id)processIdentifier;
- (id)processIdentity;
- (void)requestPluginHoldForIdentity:(id)arg1 terminate:(bool)arg2 completion:(id /* block */)arg3;
- (id)stateCaptureTitle;
- (void)statesForPredicate:(id)arg1 withDescriptor:(id)arg2 withReply:(id)arg3;
- (id)subscribeToProcessDeath:(id)arg1 error:(out id*)arg2;
- (bool)subscribeToProcessStateChangesWithConfiguration:(id)arg1 error:(out id*)arg2;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (void)unsubscribeFromProcessStateChangesWithIdentifier:(unsigned long long)arg1;
- (void)willExpireAssertionsSoonForProcess:(id)arg1 expirationTime:(double)arg2;
- (void)willInvalidateAssertion:(id)arg1;

@end
