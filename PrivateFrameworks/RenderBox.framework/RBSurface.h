/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/RenderBox.framework/RenderBox
 */

@interface RBSurface : NSObject {
    struct { 
        float red; 
        float green; 
        float blue; 
        float alpha; 
    }  _clearColor;
    bool  _clearsBackground;
    int  _colorMode;
    struct objc_ptr<id<MTLDevice> > { 
        <MTLDevice> *_p; 
    }  _device;
    struct Bounds { 
        int x; 
        int y; 
        int w; 
        int h; 
    }  _dirty;
    struct objc_ptr<RBDisplayList *> { 
        RBDisplayList *_p; 
    }  _displayList;
    struct unique_ptr<RB::Drawable, std::__1::default_delete<RB::Drawable> > { 
        struct __compressed_pair<RB::Drawable *, std::__1::default_delete<RB::Drawable> > { 
            struct Drawable {} *__value_; 
        } __ptr_; 
    }  _drawable;
    void * _lastItem;
    bool  _opaque;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
    struct refcounted_ptr<RB::Texture> { 
        struct Texture {} *_p; 
    }  _texture;
}

@property (nonatomic) struct { float x1; float x2; float x3; float x4; } clearColor;
@property (nonatomic) bool clearsBackground;
@property (nonatomic) int colorMode;
@property (nonatomic, retain) RBDisplayList *displayList;
@property (getter=isOpaque, nonatomic) bool opaque;
@property (nonatomic) struct CGSize { double x1; double x2; } size;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)_updateWithDevice:(struct Device { int (**x1)(); unsigned int x2; struct objc_ptr<id<MTLDevice> > { id x_3_1_1; } x3; struct objc_ptr<id<MTLLibrary> > { id x_4_1_1; } x4; struct objc_ptr<id<MTLCommandQueue> > { id x_5_1_1; } x5; struct objc_ptr<id<MTLCaptureScope> > { id x_6_1_1; } x6; struct BufferRegion { struct Buffer {} *x_7_1_1; unsigned long long x_7_1_2; unsigned long long x_7_1_3; } x7; struct BufferRegion { struct Buffer {} *x_8_1_1; unsigned long long x_8_1_2; unsigned long long x_8_1_3; } x8; struct BufferRegion { struct Buffer {} *x_9_1_1; unsigned long long x_9_1_2; unsigned long long x_9_1_3; } x9; struct objc_ptr<id<MTLTexture> > { id x_10_1_1; } x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned long long x14; unsigned long long x15; struct Heap { unsigned long long x_16_1_1; struct Page {} *x_16_1_2; char *x_16_1_3; unsigned long long x_16_1_4; } x16; struct list<RB::refcounted_ptr<RB::Buffer>, std::__1::allocator<RB::refcounted_ptr<RB::Buffer> > > { struct __list_node_base<RB::refcounted_ptr<RB::Buffer>, void *> { struct __list_node_base<RB::refcounted_ptr<RB::Buffer>, void *> {} *x_1_2_1; struct __list_node_base<RB::refcounted_ptr<RB::Buffer>, void *> {} *x_1_2_2; } x_17_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<RB::refcounted_ptr<RB::Buffer>, void *> > > { unsigned long long x_2_2_1; } x_17_1_2; } x17; }*)arg1 frame:(struct RenderFrame { struct Device {} *x1; struct Drawable {} *x2; struct objc_ptr<id<MTLCommandBuffer> > { id x_3_1_1; } x3; struct unique_ptr<RB::RenderQueue, std::__1::default_delete<RB::RenderQueue> > { struct __compressed_pair<RB::RenderQueue *, std::__1::default_delete<RB::RenderQueue> > { struct RenderQueue {} *x_1_2_1; } x_4_1_1; } x4; unsigned int x5; unsigned int x6; unsigned int x7; struct vector<RB::refcounted_ptr<RB::Buffer>, std::__1::allocator<RB::refcounted_ptr<RB::Buffer> > > { struct refcounted_ptr<RB::Buffer> {} *x_8_1_1; struct refcounted_ptr<RB::Buffer> {} *x_8_1_2; struct __compressed_pair<RB::refcounted_ptr<RB::Buffer> *, std::__1::allocator<RB::refcounted_ptr<RB::Buffer> > > { struct refcounted_ptr<RB::Buffer> {} *x_3_2_1; } x_8_1_3; } x8; struct vector<RB::refcounted_ptr<RB::Texture>, std::__1::allocator<RB::refcounted_ptr<RB::Texture> > > { struct refcounted_ptr<RB::Texture> {} *x_9_1_1; struct refcounted_ptr<RB::Texture> {} *x_9_1_2; struct __compressed_pair<RB::refcounted_ptr<RB::Texture> *, std::__1::allocator<RB::refcounted_ptr<RB::Texture> > > { struct refcounted_ptr<RB::Texture> {} *x_3_2_1; } x_9_1_3; } x9; }*)arg2 synchronized:(bool)arg3;
- (struct { float x1; float x2; float x3; float x4; })clearColor;
- (bool)clearsBackground;
- (int)colorMode;
- (struct CGImage { }*)copyCGImageUsingDevice:(id)arg1;
- (id)displayList;
- (id)init;
- (void)invalidate;
- (void)invalidateInRect:(struct Rect { float x1; float x2; float x3; float x4; })arg1;
- (bool)isOpaque;
- (void)setClearColor:(struct { float x1; float x2; float x3; float x4; })arg1;
- (void)setClearsBackground:(bool)arg1;
- (void)setColorMode:(int)arg1;
- (void)setDisplayList:(id)arg1;
- (void)setDisplayList:(id)arg1 dirtyRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)setOpaque:(bool)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })size;
- (void)updateUsingDevice:(id)arg1;

@end
