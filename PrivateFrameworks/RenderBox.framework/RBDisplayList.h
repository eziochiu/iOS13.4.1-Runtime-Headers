/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/RenderBox.framework/RenderBox
 */

@interface RBDisplayList : NSObject {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentRect;
    struct cf_ptr<CGContext *> { 
        struct CGContext {} *_p; 
    }  _context;
    struct ContextDelegate { float x1; struct vector<RB::ContextDelegate::Layer, std::__1::allocator<RB::ContextDelegate::Layer> > { struct Layer {} *x_2_1_1; struct Layer {} *x_2_1_2; struct __compressed_pair<RB::ContextDelegate::Layer *, std::__1::allocator<RB::ContextDelegate::Layer> > { struct Layer {} *x_3_2_1; } x_2_1_3; } x2; struct objc_ptr<RBShape *> { id x_3_1_1; } x3; struct objc_ptr<RBFill *> { id x_4_1_1; } x4; id x5; struct CGAffineTransform { double x_6_1_1; double x_6_1_2; double x_6_1_3; double x_6_1_4; double x_6_1_5; double x_6_1_6; } x6; unsigned int x7; bool x8; } * _delegate;
    bool  _linearColors;
    struct DisplayList { 
        struct Heap { 
            unsigned long long _page_size; 
            struct Page {} *_pages; 
            char *_sbrk; 
            unsigned long long _avail; 
        } _heap; 
        struct Layer {} *_layer; 
        struct State {} *_state; 
        struct State {} *_free_state; 
        struct Clip {} *_all_clips; 
        struct Style {} *_all_styles; 
        bool _empty; 
    }  _list;
}

@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } CTM;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } boundingRect;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } clipBoundingBox;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentRect;
@property (getter=isEmpty, nonatomic, readonly) bool empty;
@property (nonatomic) bool linearColors;
@property (nonatomic, readonly) const struct DisplayList { struct Heap { unsigned long long x_1_1_1; struct Page {} *x_1_1_2; char *x_1_1_3; unsigned long long x_1_1_4; } x1; struct Layer {} *x2; struct State {} *x3; struct State {} *x4; struct Clip {} *x5; struct Style {} *x6; bool x7; }*rb_displayList;

+ (id)displayListForCGContext:(struct CGContext { }*)arg1 alpha:(float*)arg2 blendMode:(int*)arg3;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })CTM;
- (void)addBlurFilterWithRadius:(double)arg1;
- (void)addBlurFilterWithRadius:(double)arg1 opaque:(bool)arg2;
- (void)addBrightnessFilterWithAmount:(float)arg1;
- (void)addColorInvertFilter;
- (void)addColorMatrixFilterWithArray:(float)arg1;
- (void)addColorMonochromeFilterWithAmount:(float)arg1 color:(struct { float x1; float x2; float x3; float x4; })arg2 bias:(float)arg3;
- (void)addColorMultiplyFilterWithColor:(struct { float x1; float x2; float x3; float x4; })arg1;
- (void)addContrastFilterWithAmount:(float)arg1;
- (void)addGrayscaleFilterWithAmount:(float)arg1;
- (void)addHueRotationFilterWithAngle:(double)arg1;
- (void)addLuminanceToAlphaFilter;
- (void)addProjectionStyleWithArray:(float)arg1;
- (void)addSaturationFilterWithAmount:(float)arg1;
- (void)addShadowStyleWithRadius:(double)arg1 offset:(struct CGSize { double x1; double x2; })arg2 color:(struct { float x1; float x2; float x3; float x4; })arg3 mode:(int)arg4;
- (struct CGContext { }*)beginCGContextWithAlpha:(float)arg1;
- (void)beginLayer;
- (void)beginLayerWithFlags:(unsigned int)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRect;
- (void)clear;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clipBoundingBox;
- (void)clipLayerWithAlpha:(float)arg1 mode:(int)arg2;
- (void)clipShape:(id)arg1 mode:(int)arg2;
- (void)concat:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRect;
- (void)drawDisplayList:(id)arg1;
- (void)drawLayerWithAlpha:(float)arg1 blendMode:(int)arg2;
- (void)drawShape:(id)arg1 fill:(id)arg2 alpha:(float)arg3 blendMode:(int)arg4;
- (void)endCGContext;
- (id)init;
- (bool)isEmpty;
- (bool)linearColors;
- (const struct DisplayList { struct Heap { unsigned long long x_1_1_1; struct Page {} *x_1_1_2; char *x_1_1_3; unsigned long long x_1_1_4; } x1; struct Layer {} *x2; struct State {} *x3; struct State {} *x4; struct Clip {} *x5; struct Style {} *x6; bool x7; }*)rb_displayList;
- (void)restore;
- (void)rotateBy:(double)arg1;
- (void)save;
- (void)scaleByX:(double)arg1 Y:(double)arg2;
- (void)setCTM:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLinearColors:(bool)arg1;
- (void)translateByX:(double)arg1 Y:(double)arg2;

@end
