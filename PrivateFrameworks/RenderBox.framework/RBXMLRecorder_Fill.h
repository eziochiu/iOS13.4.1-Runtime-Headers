/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/RenderBox.framework/RenderBox
 */

@interface RBXMLRecorder_Fill : RBFill {
    struct vector<std::__1::pair<const char *, RB::refcounted_ptr<RB::XMLRecorder::AttrValue> >, std::__1::allocator<std::__1::pair<const char *, RB::refcounted_ptr<RB::XMLRecorder::AttrValue> > > > { 
        struct pair<const char *, RB::refcounted_ptr<RB::XMLRecorder::AttrValue> > {} *__begin_; 
        struct pair<const char *, RB::refcounted_ptr<RB::XMLRecorder::AttrValue> > {} *__end_; 
        struct __compressed_pair<std::__1::pair<const char *, RB::refcounted_ptr<RB::XMLRecorder::AttrValue> > *, std::__1::allocator<std::__1::pair<const char *, RB::refcounted_ptr<RB::XMLRecorder::AttrValue> > > > { 
            struct pair<const char *, RB::refcounted_ptr<RB::XMLRecorder::AttrValue> > {} *__value_; 
        } __end_cap_; 
    }  _attributes;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)encodeTo:(struct Tree { struct refcounted_ptr<RB::XMLRecorder::Element> { struct Element {} *x_1_1_1; } x1; struct stack<RB::XMLRecorder::Element *, std::__1::deque<RB::XMLRecorder::Element *, std::__1::allocator<RB::XMLRecorder::Element *> > > { struct deque<RB::XMLRecorder::Element *, std::__1::allocator<RB::XMLRecorder::Element *> > { struct __split_buffer<RB::XMLRecorder::Element **, std::__1::allocator<RB::XMLRecorder::Element **> > { struct Element {} ***x_1_3_1; struct Element {} ***x_1_3_2; struct Element {} ***x_1_3_3; struct __compressed_pair<RB::XMLRecorder::Element ***, std::__1::allocator<RB::XMLRecorder::Element **> > { struct Element {} ***x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned long long x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<RB::XMLRecorder::Element *> > { unsigned long long x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; }*)arg1;
- (void)set9PartRBImage:(struct { int x1; void *x2; })arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 destinationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 capInsets:(struct { double x1; double x2; double x3; double x4; })arg4 repeat:(bool)arg5 interpolation:(int)arg6 tintColor:(struct { float x1; float x2; float x3; float x4; })arg7 flags:(unsigned int)arg8;
- (void)setAxialGradientStartPoint:(struct CGPoint { double x1; double x2; })arg1 endPoint:(struct CGPoint { double x1; double x2; })arg2 stopCount:(long long)arg3 colors:(const struct { float x1; float x2; float x3; float x4; }*)arg4 locations:(const double*)arg5 flags:(unsigned int)arg6;
- (void)setColor:(struct { float x1; float x2; float x3; float x4; })arg1;
- (void)setConicGradientCenter:(struct CGPoint { double x1; double x2; })arg1 angle:(double)arg2 stopCount:(long long)arg3 colors:(const struct { float x1; float x2; float x3; float x4; }*)arg4 locations:(const double*)arg5 flags:(unsigned int)arg6;
- (void)setRBImage:(struct { int x1; void *x2; })arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 interpolation:(int)arg3 tintColor:(struct { float x1; float x2; float x3; float x4; })arg4 flags:(unsigned int)arg5;
- (void)setRadialGradientCenter:(struct CGPoint { double x1; double x2; })arg1 startRadius:(double)arg2 endRadius:(double)arg3 stopCount:(long long)arg4 colors:(const struct { float x1; float x2; float x3; float x4; }*)arg5 locations:(const double*)arg6 flags:(unsigned int)arg7;
- (void)setTiledRBImage:(struct { int x1; void *x2; })arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 sourceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 interpolation:(int)arg4 tintColor:(struct { float x1; float x2; float x3; float x4; })arg5 flags:(unsigned int)arg6;

@end
