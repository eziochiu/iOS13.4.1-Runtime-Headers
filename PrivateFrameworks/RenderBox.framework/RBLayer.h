/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/RenderBox.framework/RenderBox
 */

@interface RBLayer : CALayer {
    struct { 
        float red; 
        float green; 
        float blue; 
        float alpha; 
    }  _clearColor;
    bool  _clearsBackground;
    NSTimer * _collectionTimer;
    int  _colorMode;
    struct objc_ptr<RBDevice *> { 
        RBDevice *_p; 
    }  _device;
    bool  _disableAsync;
    struct unique_ptr<RB::Drawable, std::__1::default_delete<RB::Drawable> > { 
        struct __compressed_pair<RB::Drawable *, std::__1::default_delete<RB::Drawable> > { 
            struct Drawable {} *__value_; 
        } __ptr_; 
    }  _drawable;
    struct cf_ptr<_CAImageQueue *> { 
        struct _CAImageQueue {} *_p; 
    }  _imageQueue;
    bool  _pendingCollection;
    bool  _pendingFlush;
    bool  _rendersAsynchronously;
    struct objc_ptr<NSObject<OS_dispatch_semaphore> *> { 
        NSObject<OS_dispatch_semaphore> *_p; 
    }  _semaphore;
    struct vector<RB::refcounted_ptr<(anonymous namespace)::Surface>, std::__1::allocator<RB::refcounted_ptr<(anonymous namespace)::Surface> > >="__begin_"^{refcounted_ptr<(anonymous namespace)::Surface> {}  _surfaces;
}

@property (nonatomic) struct { float x1; float x2; float x3; float x4; } clearColor;
@property (nonatomic) bool clearsBackground;
@property (nonatomic) int colorMode;
@property (nonatomic, retain) RBDevice *device;
@property (getter=isDrawableAvailable, nonatomic, readonly) bool drawableAvailable;
@property (nonatomic) bool rendersAsynchronously;

+ (id)defaultValueForKey:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_scheduleCollection;
- (struct { float x1; float x2; float x3; float x4; })clearColor;
- (bool)clearsBackground;
- (int)colorMode;
- (void)dealloc;
- (id)device;
- (void)display;
- (void)drawInDisplayList:(id)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithLayer:(id)arg1;
- (bool)isDrawableAvailable;
- (void)rb_init;
- (bool)rendersAsynchronously;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setClearColor:(struct { float x1; float x2; float x3; float x4; })arg1;
- (void)setClearsBackground:(bool)arg1;
- (void)setColorMode:(int)arg1;
- (void)setDevice:(id)arg1;
- (void)setRendersAsynchronously:(bool)arg1;
- (void)waitUntilAsyncRenderingCompleted;

@end
