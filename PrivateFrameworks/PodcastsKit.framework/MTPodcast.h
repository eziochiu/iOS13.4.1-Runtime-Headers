/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/PodcastsKit.framework/PodcastsKit
 */

@interface MTPodcast : NSManagedObject

@property (nonatomic) double addedDate;
@property (getter=isAuthenticatedDark, nonatomic) bool authenticatedDark;
@property (nonatomic, retain) NSString *author;
@property (nonatomic, readonly) bool autoDownload;
@property (nonatomic) int autoDownloadType;
@property (getter=isPastAutodownloadDark, nonatomic, readonly) bool autodownloadDark;
@property (nonatomic, retain) NSString *category;
@property (getter=isDark, nonatomic, readonly) bool dark;
@property (nonatomic) long long darkCount;
@property (nonatomic) long long darkCountLocal;
@property (nonatomic) long long deletePlayedEpisodes;
@property (nonatomic) double downloadedDate;
@property (nonatomic) long long episodeLimit;
@property (nonatomic, retain) NSSet *episodes;
@property (nonatomic) double feedChangedDate;
@property (getter=isPastFeedDark, nonatomic, readonly) bool feedDark;
@property (nonatomic, retain) NSString *feedURL;
@property (nonatomic) long long flags;
@property (nonatomic) bool hasBeenSynced;
@property (nonatomic) bool hidden;
@property (nonatomic, retain) NSString *imageURL;
@property (nonatomic) bool importing;
@property (nonatomic) bool isExplicit;
@property (nonatomic, readonly) bool isExplicit;
@property (nonatomic, retain) NSString *itemDescription;
@property (nonatomic) long long keepEpisodes;
@property (nonatomic) double lastDatePlayed;
@property (nonatomic) double lastStoreEpisodesInfoCheckDate;
@property (nonatomic) double lastStorePodcastInfoCheckDate;
@property (nonatomic) double lastTouchDate;
@property (nonatomic) double modifiedDate;
@property (nonatomic) bool needsArtworkUpdate;
@property (nonatomic, retain) NSString *nextEpisodeUuid;
@property (nonatomic) bool notifications;
@property (nonatomic) bool orphanedFromCloud;
@property (nonatomic, readonly) bool playbackNewestToOldest;
@property (nonatomic) bool playbackNewestToOldest;
@property (nonatomic, retain) NSSet *playlistSettings;
@property (nonatomic, retain) NSSet *playlists;
@property (nonatomic) long long podcastPID;
@property (nonatomic, retain) NSString *provider;
@property (nonatomic) bool showPlacardForOrphanedFromCloud;
@property (nonatomic) bool showPlacardForRemovePlayedEpisodes;
@property (nonatomic) bool showPlacardForSavedEpisodes;
@property (nonatomic, retain) NSString *showTypeInFeed;
@property (nonatomic) long long showTypeSetting;
@property (nonatomic, readonly) bool sortAscending;
@property (nonatomic) bool sortAscending;
@property (nonatomic) long long sortOrder;
@property (nonatomic, retain) NSString *storeCleanURL;
@property (nonatomic) long long storeCollectionId;
@property (nonatomic, retain) NSString *storeShortURL;
@property (nonatomic) bool subscribed;
@property (nonatomic, retain) MTSyncInfo *syncInfo;
@property (nonatomic, retain) NSString *title;
@property (nonatomic) double updateAvg;
@property (nonatomic) long long updateInterval;
@property (nonatomic) double updateStdDev;
@property (nonatomic) double updatedDate;
@property (nonatomic, retain) NSString *updatedFeedURL;
@property (nonatomic, retain) NSString *uuid;
@property (nonatomic, retain) NSString *webpageURL;

+ (id)_defaultsForLoadingDefaultValues;
+ (id)allPossibleEpisodeListSortOrderProperties;
+ (int)autoDownloadDefaultValue;
+ (long long)deletePlayedEpisodesDefaultValue;
+ (long long)episodeLimitDefaultValue;
+ (id)insertNewPodcastInManagedObjectContext:(id)arg1 subscribed:(bool)arg2 feedUrl:(id)arg3 title:(id)arg4 author:(id)arg5 provider:(id)arg6 category:(id)arg7 imageUrl:(id)arg8 description:(id)arg9;
+ (id)insertNewPodcastInManagedObjectContext:(id)arg1 subscribed:(bool)arg2 feedUrl:(id)arg3 title:(id)arg4 author:(id)arg5 provider:(id)arg6 category:(id)arg7 imageUrl:(id)arg8 description:(id)arg9 adamId:(long long)arg10;
+ (bool)isRedirectURL:(id)arg1;
+ (id)latestEpisodeUuidForPodcastUuid:(id)arg1 ctx:(id)arg2;
+ (id)podcastUuidForEpisodeUuid:(id)arg1 ctx:(id)arg2;
+ (id)podcastUuidForFeedUrl:(id)arg1 ctx:(id)arg2;
+ (id)podcastUuidForFeedUrlString:(id)arg1 ctx:(id)arg2;
+ (id)predicateForAllPodcasts;
+ (id)predicateForAutoDownloadEnabled;
+ (id)predicateForAutoDownloadType:(int)arg1;
+ (id)predicateForHasBeenSynced:(bool)arg1;
+ (id)predicateForOrphanedFromCloud:(bool)arg1;
+ (id)predicateForPodcastStoreId:(long long)arg1;
+ (id)predicateForPodcastUUID:(id)arg1;
+ (id)predicateForPodcastUuids:(id)arg1;
+ (id)predicateForPodcastWithFeedUrl:(id)arg1;
+ (id)predicateForPodcastWithPodcastPID:(long long)arg1;
+ (id)predicateForPodcastWithTitle:(id)arg1;
+ (id)predicateForSubscribed:(bool)arg1;
+ (id)predicateForSubscribedAndNotHidden:(bool)arg1;
+ (id)predicateForSyncablePodcasts;
+ (id)predicateForUpdatablePodcasts;
+ (id)predicateForUpdateInterval:(long long)arg1;
+ (void)prepareForPlatform:(id)arg1;
+ (id)redirectURLForStoreCollectionId:(long long)arg1;
+ (void)setRemovePlayedEpisodesSetting:(long long)arg1 forPodcastUuid:(id)arg2;
+ (id)sortDescriptorsForAllPodcasts;
+ (id)sortDescriptorsForDateAdded;
+ (id)sortDescriptorsForLastDatePlayed;
+ (id)sortDescriptorsForManualOrder;
+ (id)sortDescriptorsForNewestOnTop;
+ (id)sortDescriptorsForNewestToOldest:(bool)arg1;
+ (id)sortDescriptorsForOldestOnTop;
+ (id)sortDescriptorsForRecentlyUpdated;
+ (id)sortDescriptorsForTitle;
+ (long long)storeCollectionIdForRedirectURL:(id)arg1;
+ (double)timeIntervalForUpdate:(long long)arg1;
+ (unsigned long long)totalUnplayedCount;
+ (long long)updateIntervalDefaultValue;
+ (long long)updateIntervalSettingForTimeInterval:(double)arg1;
+ (id)userDefaultPropertiesAffectingPredicates;

- (id)_episodeAfterEpisode:(id)arg1 usePlayOrder:(bool)arg2 restrictToUserEpisodes:(bool)arg3 excludePlayed:(bool)arg4;
- (id)_episodeAfterEpisode:(id)arg1 usePlayOrder:(bool)arg2 restrictToUserEpisodes:(bool)arg3 excludePlayed:(bool)arg4 excludeExplicit:(long long)arg5;
- (id)_episodeAfterEpisode:(id)arg1 usePlayOrder:(bool)arg2 restrictToUserEpisodes:(bool)arg3 excludePlayed:(bool)arg4 excludeExplicit:(long long)arg5 excludeStreaming:(long long)arg6;
- (id)_episodeBeforeEpisode:(id)arg1 usePlayOrder:(bool)arg2 restrictToUserEpisodes:(bool)arg3 excludePlayed:(bool)arg4;
- (id)_episodeNextToEpisode:(id)arg1 after:(bool)arg2 usePlayOrder:(bool)arg3 restrictToUserEpisodes:(bool)arg4 excludePlayed:(bool)arg5 excludeExplicit:(long long)arg6;
- (id)_episodeNextToEpisode:(id)arg1 after:(bool)arg2 usePlayOrder:(bool)arg3 restrictToUserEpisodes:(bool)arg4 excludePlayed:(bool)arg5 excludeExplicit:(long long)arg6 excludeStreaming:(long long)arg7;
- (id)_episodesNextToEpisode:(id)arg1 after:(bool)arg2 usePlayOrder:(bool)arg3 restrictToUserEpisodes:(bool)arg4 excludePlayed:(bool)arg5 excludeExplicit:(long long)arg6 excludeStreaming:(long long)arg7 limit:(long long)arg8;
- (id)_episodesNextToEpisode:(id)arg1 after:(bool)arg2 usePlayOrder:(bool)arg3 restrictToUserEpisodes:(bool)arg4 excludePlayed:(bool)arg5 excludeExplicit:(long long)arg6 limit:(long long)arg7;
- (id)_fetchRequestForDistinctSeasons;
- (id)_latestOrOldestEpisode:(bool)arg1 restrictToUserEpisodes:(bool)arg2 excludePlayed:(bool)arg3;
- (id)_latestOrOldestEpisode:(bool)arg1 restrictToUserEpisodes:(bool)arg2 excludePlayed:(bool)arg3 excludeExplicit:(long long)arg4;
- (id)_latestOrOldestEpisode:(bool)arg1 restrictToUserEpisodes:(bool)arg2 excludePlayed:(bool)arg3 excludeExplicit:(long long)arg4 episodeTypeFilter:(long long)arg5;
- (id)_latestOrOldestEpisode:(bool)arg1 restrictToUserEpisodes:(bool)arg2 excludePlayed:(bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5;
- (id)_latestOrOldestEpisode:(bool)arg1 restrictToUserEpisodes:(bool)arg2 excludePlayed:(bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5 excludingEpisodeUuid:(id)arg6;
- (id)_latestOrOldestEpisode:(bool)arg1 restrictToUserEpisodes:(bool)arg2 excludePlayed:(bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5 excludingEpisodeUuid:(id)arg6 episodeTypeFilter:(long long)arg7;
- (id)_latestOrOldestEpisode:(bool)arg1 restrictToUserEpisodes:(bool)arg2 excludePlayed:(bool)arg3 excludeExplicit:(long long)arg4 excludingEpisodeUuid:(id)arg5;
- (id)_latestOrOldestEpisode:(bool)arg1 restrictToUserEpisodes:(bool)arg2 excludePlayed:(bool)arg3 excludeExplicit:(long long)arg4 excludingEpisodeUuid:(id)arg5 episodeTypeFilter:(long long)arg6;
- (int)autoDownloadResolvedValue;
- (id)bestAvailableStoreCleanURL;
- (id)bestDescription;
- (id)bestFeedURLExcludingRedirectURL:(bool)arg1;
- (unsigned long long)countOfMyEpisodes;
- (id)countOfNewEpisodes;
- (id)countOfUnplayedEpisodes;
- (id)currentFeedURL;
- (bool)deletePlayedEpisodesResolvedValue;
- (id)displayURL;
- (id)episodeAfterEpisode:(id)arg1;
- (long long)episodeLimitResolvedValue;
- (id)episodeNewerThanEpisode:(id)arg1;
- (id)episodeNewerThanEpisode:(id)arg1 excludePlayed:(bool)arg2;
- (id)episodeOlderThanEpisode:(id)arg1;
- (id)episodeToResume;
- (id)episodesAfterEpisode:(id)arg1 restrictToUserEpisodes:(bool)arg2;
- (id)episodesInLatestSeason;
- (id)episodesInSeasonNumber:(long long)arg1;
- (id)episodesInSeasonNumber:(long long)arg1 oldestEpisodesFirst:(bool)arg2;
- (id)episodesInSeasonNumber:(long long)arg1 oldestEpisodesFirst:(bool)arg2 excludePlayed:(bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5 limit:(unsigned long long)arg6;
- (id)episodesInSeasonNumber:(long long)arg1 oldestEpisodesFirst:(bool)arg2 excludePlayed:(bool)arg3 excludeExplicit:(long long)arg4 limit:(unsigned long long)arg5;
- (id)firstUserEpisodeNotPlayed;
- (bool)hasAtLeastOneSeason;
- (bool)hasBeenSynced;
- (bool)hasMultipleSeasons;
- (bool)importing;
- (bool)isAuthenticatedDark;
- (bool)isDark;
- (bool)isExplicit;
- (bool)isPastAutodownloadDark;
- (bool)isPastFeedDark;
- (bool)isSerialShowTypeInFeed;
- (bool)isShareable;
- (long long)latestSeasonNumber;
- (void)markPlaylistsForUpdate;
- (id)mostRecentlyManuallyAddedEpisode;
- (id)mostRecentlyPlayedEpisode;
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1;
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1 restrictedToLibrary:(bool)arg2;
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1 restrictedToLibrary:(bool)arg2 excludeExplicit:(long long)arg3;
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1 restrictedToLibrary:(bool)arg2 excludeExplicit:(long long)arg3 excludeStreaming:(long long)arg4;
- (id)mostRecentlyPlayedEpisodeExcludingExplicit:(long long)arg1;
- (id)mostRecentlyPlayedEpisodeExcludingExplicit:(long long)arg1 excludingStreaming:(long long)arg2;
- (id)mostRecentlyPlayedEpisodeRestrictedToLibrary:(bool)arg1;
- (long long)mt_syncID;
- (bool)needsArtworkUpdate;
- (id)newestEpisode;
- (id)newestEpisodeExcludingUuid:(id)arg1 excludeExplicit:(long long)arg2;
- (id)newestEpisodeExcludingUuid:(id)arg1 excludeExplicit:(long long)arg2 excludeStreaming:(long long)arg3;
- (id)newestEpisodeNotPlayedExcludingExplicit:(long long)arg1;
- (id)newestEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;
- (id)newestEpisodeUuid;
- (id)newestFullEpisode;
- (id)newestUserEpisodeExcludingExplicit:(long long)arg1;
- (id)newestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1;
- (id)newestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;
- (id)oldestEpisode;
- (id)oldestEpisodeExcludingExplicit:(long long)arg1;
- (id)oldestEpisodeExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;
- (id)oldestEpisodeInLatestSeasonOrShow;
- (id)oldestEpisodeInLatestSeasonOrShowExcludingPlayed:(bool)arg1 excludeExplicit:(long long)arg2;
- (id)oldestEpisodeInLatestSeasonOrShowExcludingPlayed:(bool)arg1 excludeExplicit:(long long)arg2 excludeStreaming:(long long)arg3;
- (id)oldestEpisodeNotPlayed;
- (id)oldestEpisodeNotPlayedExcludingExplicit:(long long)arg1;
- (id)oldestEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludingStreaming:(long long)arg2;
- (id)oldestFullEpisode;
- (id)oldestUserEpisode;
- (id)oldestUserEpisodeExcludingExplicit:(long long)arg1;
- (id)oldestUserEpisodeExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;
- (id)oldestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1;
- (id)oldestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;
- (bool)playbackNewestToOldest;
- (id)redirectURL;
- (void)resetGoDark;
- (id)seasonNumbers;
- (void)setAuthenticatedDark:(bool)arg1;
- (void)setAuthor:(id)arg1;
- (void)setDeletePlayedEpisodes:(long long)arg1;
- (void)setFeedChangedDate:(double)arg1;
- (void)setFlags:(long long)arg1;
- (void)setHasBeenSynced:(bool)arg1;
- (void)setImageURL:(id)arg1;
- (void)setImporting:(bool)arg1;
- (void)setIsExplicit:(bool)arg1;
- (void)setItemDescription:(id)arg1;
- (void)setLastDatePlayed:(double)arg1;
- (void)setModifiedDate:(double)arg1;
- (void)setNeedsArtworkUpdate:(bool)arg1;
- (void)setOrphanedFromCloud:(bool)arg1;
- (void)setPlaybackNewestToOldest:(bool)arg1;
- (void)setPodcastPID:(long long)arg1;
- (void)setShowTypeInFeed:(id)arg1;
- (void)setShowTypeSetting:(long long)arg1;
- (void)setSortAscending:(bool)arg1;
- (void)setSubscribed:(bool)arg1;
- (void)setTitle:(id)arg1;
- (void)setUpdateAvg:(double)arg1;
- (void)setUpdateStdDev:(double)arg1;
- (void)setUpdatedFeedURL:(id)arg1;
- (void)setWebpageURL:(id)arg1;
- (id)shareURL;
- (long long)showTypeInFeedResolvedValue;
- (long long)showTypeResolvedValue;
- (bool)sortAscending;
- (bool)sortAscending;
- (id)sortDescriptorsForPlayOrder;
- (id)sortDescriptorsForSortOrder;
- (id)twitterShareURL;
- (bool)updateCursorPosition:(bool)arg1;
- (void)updateEpisodesMetadataIdentifiers;
- (void)updateLastTouchDate;
- (id)userEpisodeAfterEpisode:(id)arg1;
- (id)userEpisodeNewerThanEpisode:(id)arg1 excludePlayed:(bool)arg2 excludeExplicit:(long long)arg3;
- (id)userEpisodeNewerThanEpisode:(id)arg1 excludePlayed:(bool)arg2 excludeExplicit:(long long)arg3 excludeStreaming:(long long)arg4;
- (id)userEpisodesAfterEpisode:(id)arg1;

@end
