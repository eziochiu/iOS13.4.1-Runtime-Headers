/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech
 */

@interface CSXPCClient : NSObject <CSAudioAlertProviding, CSAudioMeterProviding, CSAudioMetricProviding, CSAudioSessionInfoProviding, CSAudioSessionProviding, CSAudioStreamProviding, CSAudioTimeConversionProviding, CSBargeInModeProviding, CSFallbackAudioSessionReleaseProviding, CSSmartSiriVolumeProviding, CSTriggerInfoProviding> {
    NSString * _UUID;
    NSMutableSet * _activationAssertions;
    <CSAudioAlertProvidingDelegate> * _audioAlertProvidingDelegate;
    NSHashTable * _audioSessionInfoObservers;
    <CSAudioSessionProvidingDelegate> * _audioSessionProvidingDelegate;
    CSAudioStream * _audioStream;
    <CSAudioStreamProvidingDelegate> * _audioStreamProvidingDelegate;
    <CSXPCClientDelegate> * _delegate;
    unsigned long long  _xpcClientType;
    NSObject<OS_xpc_object> * _xpcConnection;
}

@property (nonatomic, readonly) NSString *UUID;
@property (nonatomic, retain) NSMutableSet *activationAssertions;
@property (nonatomic) <CSAudioAlertProvidingDelegate> *audioAlertProvidingDelegate;
@property (nonatomic, retain) NSHashTable *audioSessionInfoObservers;
@property (nonatomic) <CSAudioSessionProvidingDelegate> *audioSessionProvidingDelegate;
@property (nonatomic, retain) CSAudioStream *audioStream;
@property (nonatomic) <CSAudioStreamProvidingDelegate> *audioStreamProvidingDelegate;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CSXPCClientDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (nonatomic) unsigned long long xpcClientType;
@property (nonatomic, retain) NSObject<OS_xpc_object> *xpcConnection;

- (void).cxx_destruct;
- (id)UUID;
- (id)_decodeError:(id)arg1;
- (void)_handleAlertProvidingDelegateDidFinishAlertPlayback:(id)arg1;
- (void)_handleAlertProvidingDelegateMessageBody:(id)arg1;
- (void)_handleListenerDisconnectedError:(id)arg1;
- (void)_handleListenerError:(id)arg1;
- (void)_handleListenerEvent:(id)arg1;
- (void)_handleListenerMessage:(id)arg1;
- (void)_handleSessionInfoProvidingDelegateInterruptionNotification:(id)arg1;
- (void)_handleSessionInfoProvidingDelegateMediaServicesWereLostNotification:(id)arg1;
- (void)_handleSessionInfoProvidingDelegateMediaServicesWereResetNotification:(id)arg1;
- (void)_handleSessionInfoProvidingDelegateMessageBody:(id)arg1;
- (void)_handleSessionInfoProvidingDelegateRouteChangeNotification:(id)arg1;
- (void)_handleSessionProvidingDelegateBeginInterruption:(id)arg1;
- (void)_handleSessionProvidingDelegateBeginInterruptionWithContext:(id)arg1;
- (void)_handleSessionProvidingDelegateDidChangeContext:(id)arg1;
- (void)_handleSessionProvidingDelegateDidSetAudioSession:(id)arg1;
- (void)_handleSessionProvidingDelegateEndInterruption:(id)arg1;
- (void)_handleSessionProvidingDelegateMessageBody:(id)arg1;
- (void)_handleSessionProvidingDelegateStreamHandleIdInvalidation:(id)arg1;
- (void)_handleSessionProvidingDelegateWillSetAudioSession:(id)arg1;
- (void)_handleStreamProvidingDelegateChunkAvailable:(id)arg1;
- (void)_handleStreamProvidingDelegateChunkForTVAvailable:(id)arg1;
- (void)_handleStreamProvidingDelegateDidStopUnexpectly:(id)arg1;
- (void)_handleStreamProvidingDelegateHardwareConfigChange:(id)arg1;
- (void)_handleStreamProvidingDelegateMessageBody:(id)arg1;
- (void)_sendMessage:(id)arg1 connection:(id)arg2 completion:(id /* block */)arg3;
- (bool)_sendMessageAndReplySync:(id)arg1 connection:(id)arg2 error:(id*)arg3;
- (bool)activateAudioSessionWithReason:(unsigned long long)arg1 error:(id*)arg2;
- (id)activationAssertions;
- (unsigned long long)alertStartTime;
- (id)audioAlertProvidingDelegate;
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;
- (id)audioChunkToEndFrom:(unsigned long long)arg1;
- (id)audioMetric;
- (unsigned int)audioSessionID;
- (id)audioSessionInfoObservers;
- (id)audioSessionProvidingDelegate;
- (id)audioStream;
- (id)audioStreamProvidingDelegate;
- (void)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 completion:(id /* block */)arg3;
- (id)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id*)arg3;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (void)cancelAudioStreamHold:(id)arg1;
- (void)configureAlertBehavior:(id)arg1;
- (void)connect;
- (bool)deactivateAudioSession:(unsigned long long)arg1 error:(id*)arg2;
- (void)dealloc;
- (id)delegate;
- (void)disconnect;
- (bool)duckOthersOption;
- (void)enableBargeInMode:(bool)arg1 completion:(id /* block */)arg2;
- (void)enableMiniDucking:(bool)arg1;
- (void)enableVoiceTrigger:(bool)arg1 withAssertion:(id)arg2;
- (bool)fallbackDeactivateAudioSession:(unsigned long long)arg1 error:(id*)arg2;
- (float)getEstimatedTTSVolume;
- (id)holdAudioStreamWithDescription:(id)arg1 timeout:(double)arg2;
- (unsigned long long)hostTimeFromSampleCount:(unsigned long long)arg1;
- (id)initWithType:(unsigned long long)arg1;
- (bool)isNarrowBand;
- (bool)isRecording;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (void)pingpong:(id /* block */)arg1;
- (bool)playAlertSoundForType:(long long)arg1;
- (bool)playRecordStartingAlertAndResetEndpointer;
- (id)playbackRoute;
- (bool)prepareAudioProviderWithContext:(id)arg1 clientType:(unsigned long long)arg2 error:(id*)arg3;
- (void)prepareAudioStream:(id)arg1 request:(id)arg2 completion:(id /* block */)arg3;
- (bool)prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id*)arg3;
- (bool)prewarmAudioSessionWithError:(id*)arg1;
- (id)recordDeviceInfo;
- (id)recordRoute;
- (id)recordSettings;
- (void)registerObserver:(id)arg1;
- (unsigned long long)sampleCountFromHostTime:(unsigned long long)arg1;
- (void)saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;
- (void)saveRecordingBufferToEndFrom:(unsigned long long)arg1 toURL:(id)arg2;
- (void)sendXPCClientType;
- (void)setActivationAssertions:(id)arg1;
- (bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;
- (void)setAudioAlertDelegate:(id)arg1;
- (void)setAudioAlertProvidingDelegate:(id)arg1;
- (void)setAudioSessionDelegate:(id)arg1;
- (void)setAudioSessionInfoObservers:(id)arg1;
- (void)setAudioSessionProvidingDelegate:(id)arg1;
- (void)setAudioStream:(id)arg1;
- (void)setAudioStreamProvidingDelegate:(id)arg1;
- (bool)setCurrentContext:(id)arg1 error:(id*)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDuckOthersOption:(bool)arg1;
- (void)setMeteringEnabled:(bool)arg1;
- (void)setXpcClientType:(unsigned long long)arg1;
- (void)setXpcConnection:(id)arg1;
- (void)startAudioStream:(id)arg1 option:(id)arg2 completion:(id /* block */)arg3;
- (void)stopAudioStream:(id)arg1 option:(id)arg2 completion:(id /* block */)arg3;
- (void)triggerInfoForContext:(id)arg1 completion:(id /* block */)arg2;
- (void)unregisterObserver:(id)arg1;
- (void)updateAlarmState:(long long)arg1;
- (void)updateAlarmVolume:(float)arg1;
- (void)updateMeters;
- (void)updateMusicVolume:(float)arg1;
- (void)updateTimerState:(long long)arg1;
- (unsigned long long)xpcClientType;
- (id)xpcConnection;

@end
