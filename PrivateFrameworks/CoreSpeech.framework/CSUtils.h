/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech
 */

@interface CSUtils : NSObject

+ (void)URLsInDirectory:(id)arg1 matchingPattern:(id)arg2 completion:(id /* block */)arg3;
+ (id)_contentsOfDirectoryAtURL:(id)arg1 matchingPattern:(id)arg2 includingPropertiesForKeys:(id)arg3 error:(id*)arg4;
+ (void)_sortedURLsInDirectory:(id)arg1 matchingPattern:(id)arg2 completion:(id /* block */)arg3;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })aiffFileASBD;
+ (id)alertMuteBehaviorDict;
+ (id)alertMuteSettings;
+ (void)apply12dBGain:(id)arg1;
+ (id)assetHashInResourcePath:(id)arg1;
+ (bool)checkIfMigrationNecessaryForCompatibilityVersion:(unsigned long long)arg1 forLanguageCode:(id)arg2;
+ (void)cleanupOrphanedVoiceIdGradingFiles;
+ (void)clearLogFilesInDirectory:(id)arg1 matchingPattern:(id)arg2 exceedNumber:(unsigned long long)arg3;
+ (id)convertToFloatLPCMBufFromShortLPCMBuf:(id)arg1;
+ (id)convertToShortLPCMBufFromFloatLPCMBuf:(id)arg1;
+ (void)createDirectoryIfDoesNotExist:(id)arg1;
+ (bool)deleteExistingSATModelForLanguageCode:(id)arg1;
+ (id)deviceBuildVersion;
+ (unsigned long long)deviceCategoryForDeviceProductType:(id)arg1;
+ (id)deviceCategoryStringRepresentationForCategoryType:(unsigned long long)arg1;
+ (id)deviceProductType;
+ (id)deviceProductVersion;
+ (id)deviceUserAssignedName;
+ (void)dumpFilesInDirectory:(id)arg1;
+ (id)getBaseProfileOnlyEnrollmentUtterancesFromDirectory:(id)arg1;
+ (id)getContentsOfDirectory:(id)arg1;
+ (id)getCurrentVoiceProfileIdentityForProfileId:(id)arg1 forLanguageCode:(id)arg2;
+ (unsigned long long)getCurrentVoiceProfileProductCategoryForLanguageCode:(id)arg1;
+ (unsigned long long)getCurrentVoiceProfileVersionForProfileId:(id)arg1 forLanguageCode:(id)arg2;
+ (void)getEnrollmentUtterancesCountFromDirectory:(id)arg1 withCountBlock:(id /* block */)arg2;
+ (id)getEnrollmentUtterancesForModelType:(unsigned long long)arg1 forLanguageCode:(id)arg2;
+ (id)getEnrollmentUtterancesFromDirectory:(id)arg1;
+ (id)getExplicitEnrollmentUtterancesForType:(unsigned long long)arg1 forLanguageCode:(id)arg2 forProfileID:(id)arg3;
+ (id)getExplicitEnrollmentUtterancesFromDirectory:(id)arg1;
+ (id)getExplicitOnlyEnrollmentUtterancesFromDirectory:(id)arg1;
+ (id)getFixedHighPrioritySerialQueueWithLabel:(id)arg1;
+ (id)getFixedPrioritySerialQueueWithLabel:(id)arg1 fixedPriority:(int)arg2;
+ (void)getHomeUserIdForVoiceProfile:(id)arg1 withCompletion:(id /* block */)arg2;
+ (double)getHostClockFrequency;
+ (id)getImplicitEnrollmentUtterancesFromDirectory:(id)arg1;
+ (id)getImplicitEnrollmentUtterancesPriorTo:(id)arg1 forType:(unsigned long long)arg2 forLanguageCode:(id)arg3 forProfileID:(id)arg4;
+ (id)getImplicitUtteranceCacheDirectory;
+ (unsigned int)getNumElementInBitset:(unsigned long long)arg1;
+ (long long)getNumberOfAudioFilesInDirectory:(id)arg1;
+ (id)getProfileVersionFilePathForProfileId:(id)arg1 forLanguageCode:(id)arg2;
+ (id)getSiriLanguageWithFallback:(id)arg1;
+ (id)getSortedImplicitEnrollmentUtterancesForType:(unsigned long long)arg1 forLanguageCode:(id)arg2 forProfileID:(id)arg3;
+ (id)getVoiceProfileIdentityFromVersionFilePath:(id)arg1;
+ (unsigned long long)getVoiceProfileProductCategoryFromVersionFilePath:(id)arg1;
+ (unsigned long long)getVoiceProfileVersionFromVersionFilePath:(id)arg1;
+ (id)getVoiceProfilesMarkedForUpload;
+ (bool)hasRemoteBuiltInMic;
+ (bool)hasRemoteCoreSpeech;
+ (id)hearstVoiceTriggerRecordContext:(id)arg1;
+ (unsigned long long)hostTimeFromSampleCount:(unsigned long long)arg1 anchorHostTime:(unsigned long long)arg2 anchorSampleCount:(unsigned long long)arg3;
+ (float)hostTimeToSeconds:(unsigned long long)arg1;
+ (double)hostTimeToTimeInterval:(unsigned long long)arg1;
+ (bool)isCurrentDeviceCompatibleWithNewerVoiceProfileAt:(id)arg1;
+ (bool)isCurrentDeviceCompatibleWithVoiceProfileAt:(id)arg1;
+ (bool)isIOSDeviceSupportingBargeIn;
+ (bool)isRecordContextAutoPrompt:(id)arg1;
+ (bool)isRecordContextHearstDoubleTap:(id)arg1;
+ (bool)isRecordContextHearstVoiceTrigger:(id)arg1;
+ (bool)isRecordContextHomeButtonPress:(id)arg1;
+ (bool)isRecordContextJarvisButtonPress:(id)arg1;
+ (bool)isRecordContextJarvisVoiceTrigger:(id)arg1;
+ (bool)isRecordContextRaiseToSpeak:(id)arg1;
+ (bool)isRecordContextSpeakerIdTrainingTrigger:(id)arg1;
+ (bool)isRecordContextVoiceTrigger:(id)arg1;
+ (bool)isSpidSupportedInCurrentLanguage;
+ (void)iterateBitset:(unsigned long long)arg1 block:(id /* block */)arg2;
+ (id)jarvisVoiceTriggerRecordContext:(id)arg1;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmInt16ASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmInt16NarrowBandASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmInterleavedASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmInterleavedASBDWithSampleRate:(float)arg1 numberOfChannels:(unsigned int)arg2;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmInterleavedWithRemoteVADASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmNarrowBandASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmNonInterleavedASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmNonInterleavedASBDWithSampleRate:(float)arg1 numberOfChannels:(unsigned int)arg2;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmNonInterleavedWithRemoteVADASBD;
+ (id)lpcmRecordSettings;
+ (unsigned long long)macHostTimeFromBridgeHostTime:(unsigned long long)arg1;
+ (id)mapRawScores:(id)arg1 toScoresOfType:(unsigned long long)arg2 withRawScoreOffset:(float)arg3 withRawScoreScale:(float)arg4 withLogitCeil:(float)arg5 withLogitFloor:(float)arg6 withSATThreshold:(float)arg7;
+ (void)markUploadForVoiceProfile:(id)arg1;
+ (void)markVoiceProfileUploaded:(id)arg1;
+ (bool)migrateVoiceProfileToVersion:(unsigned long long)arg1 forLanguageCode:(id)arg2;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })opusASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })opusNarrowBandASBD;
+ (id)opusRecordSettings;
+ (bool)readAudioChunksFrom:(id)arg1 block:(id /* block */)arg2;
+ (id)recordContextString:(id)arg1;
+ (id)removeItemAtPath:(id)arg1;
+ (void)removeLogFilesInDirectory:(id)arg1 matchingPattern:(id)arg2 beforeDays:(float)arg3;
+ (id)rootQueueWithFixedPriority:(int)arg1;
+ (unsigned long long)sampleCountFromHostTime:(unsigned long long)arg1 anchorHostTime:(unsigned long long)arg2 anchorSampleCount:(unsigned long long)arg3;
+ (id)satConfigFileNameForCSSpIdType:(unsigned long long)arg1 forModelType:(unsigned long long)arg2;
+ (unsigned long long)secondsToHostTime:(float)arg1;
+ (bool)shouldDeinterleaveAudioOnCS;
+ (bool)shouldDelayPhaticForMyriadDecision;
+ (bool)shouldDownloadVTAssetsOnDaemon;
+ (bool)shouldRunVTOnCS;
+ (bool)spIdAudioLogsCountLimitReached;
+ (id)spIdAudioLogsDir;
+ (id)spIdAudioLogsGradingDir;
+ (id)spIdComposeProfileVersionsFor:(id)arg1;
+ (id)spIdMapIdentifiersToSiriDebugID:(id)arg1;
+ (id)spIdMapScoresToSharedSiriID:(id)arg1;
+ (id)spIdSATAudioDirForLocale:(id)arg1 profileId:(id)arg2 spidType:(unsigned long long)arg3;
+ (id)spIdSATAudioDirForLocale:(id)arg1 spidType:(unsigned long long)arg2;
+ (id)spIdSATDirForLocale:(id)arg1;
+ (id)spIdSATDirForLocale:(id)arg1 profileId:(id)arg2;
+ (id)spIdSATDirForLocale:(id)arg1 profileId:(id)arg2 spidType:(unsigned long long)arg3;
+ (id)spIdSATImplicitAudioCacheDirForLocale:(id)arg1 profileId:(id)arg2;
+ (id)spIdSATModelDirForLocale:(id)arg1 profileId:(id)arg2 spidType:(unsigned long long)arg3 modelType:(unsigned long long)arg4;
+ (id)spIdSATModelDirForLocale:(id)arg1 spidType:(unsigned long long)arg2 modelType:(unsigned long long)arg3;
+ (id)spIdSiriDebugGradingDataRootDirectory;
+ (id)spIdSiriDebugTrainedUsersFilePathForLocale:(id)arg1;
+ (id)spIdSiriDebugVTDataDirectory;
+ (id)spIdSiriDebugVoiceProfileCacheDirectoryForProfile:(id)arg1 locale:(id)arg2;
+ (id)spIdSiriDebugVoiceProfileRootDirectoryForProfile:(id)arg1 locale:(id)arg2;
+ (id)spIdSiriDebugVoiceProfileStoreRootDirectory;
+ (id)spIdSiriDebugVoiceProfileStoreRootDirectoryForLocale:(id)arg1;
+ (id)spIdTrainedUsersFilePathForLocale:(id)arg1;
+ (unsigned long long)spIdTypeForString:(id)arg1;
+ (id)spIdVoiceProfileImportRootDir;
+ (id)speexRecordSettings;
+ (id)spidAudioTrainUtterancesDir;
+ (void)streamAudioFromFileUrl:(id)arg1 audioStreamBasicDescriptor:(struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })arg2 samplesPerStreamChunk:(unsigned long long)arg3 audioDataAvailableHandler:(id /* block */)arg4;
+ (id)stringForCSSATRunMode:(unsigned long long)arg1;
+ (id)stringForCSSpIdModelType:(unsigned long long)arg1;
+ (id)stringForCSSpIdType:(unsigned long long)arg1;
+ (id)stringForInvocationStyle:(unsigned long long)arg1;
+ (bool)supportBeepCanceller;
+ (bool)supportBluetoothDeviceVoiceTrigger;
+ (bool)supportCSTwoShotDecision;
+ (bool)supportCircularBuffer;
+ (bool)supportCompactPlus;
+ (bool)supportContinuousVoiceTrigger;
+ (bool)supportHearstVoiceTrigger;
+ (bool)supportHybridEndpointer;
+ (bool)supportJarvisVoiceTrigger;
+ (bool)supportKeywordDetector;
+ (bool)supportLanguageDetector;
+ (bool)supportOpportunisticZLL;
+ (bool)supportPhatic;
+ (bool)supportPremiumAssets;
+ (bool)supportPremiumModel;
+ (bool)supportPremiumWatchAssets;
+ (bool)supportRaiseToSpeak;
+ (bool)supportSAT;
+ (bool)supportSelfTriggerSuppression;
+ (bool)supportSessionActivateDelay;
+ (bool)supportSmartVolume;
+ (bool)supportTTS;
+ (bool)supportTdsrOnCS;
+ (bool)supportZeroFilter;
+ (double)systemUpTime;
+ (id)timeStampWithSaltGrain;
+ (void)updateVoiceProfileVersionFileForProfileId:(id)arg1 forLanguageCode:(id)arg2;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })utteranceFileASBD;
+ (id)voiceTriggerRecordContext;

@end
