/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/SoftwareUpdateCoreSupport.framework/SoftwareUpdateCoreSupport
 */

@interface SUCoreEventReporter : NSObject {
    int  _activeSendTaskCount;
    NSMutableArray * _awaitingRetry;
    bool  _dropEventsOnSendFailure;
    NSMutableDictionary * _eventExtensions;
    NSURLSessionConfiguration * _inProcessConfig;
    NSOperationQueue * _inProcessOperationQueue;
    NSURLSession * _inProcessSession;
    SUCoreEvent * _lastErrorEvent;
    id /* block */  _onceIdleCompletion;
    SUCoreEventReporterDelegate * _reporterDelegate;
    bool  _splunkAccessCreated;
    NSObject<OS_dispatch_queue> * _splunkStateQueue;
    NSURL * _splunkURL;
    NSString * _storeToPath;
}

@property (nonatomic) int activeSendTaskCount;
@property (nonatomic, retain) NSMutableArray *awaitingRetry;
@property (nonatomic) bool dropEventsOnSendFailure;
@property (nonatomic, retain) NSMutableDictionary *eventExtensions;
@property (nonatomic, retain) NSURLSessionConfiguration *inProcessConfig;
@property (nonatomic, retain) NSOperationQueue *inProcessOperationQueue;
@property (nonatomic, retain) NSURLSession *inProcessSession;
@property (nonatomic, retain) SUCoreEvent *lastErrorEvent;
@property (nonatomic, copy) id /* block */ onceIdleCompletion;
@property (nonatomic, retain) SUCoreEventReporterDelegate *reporterDelegate;
@property (nonatomic) bool splunkAccessCreated;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *splunkStateQueue;
@property (nonatomic, retain) NSURL *splunkURL;
@property (nonatomic, retain) NSString *storeToPath;

+ (id)_errorDomainAbbreviation:(id)arg1;
+ (id)_sharedReporter:(id)arg1;
+ (void)augmentEvent:(id)arg1 withError:(id)arg2;
+ (id)buildSplunkServerURLFromBase:(id)arg1;
+ (id)initSharedReporterStoringToPath:(id)arg1;
+ (id)sharedReporter;

- (void).cxx_destruct;
- (void)_adoptLastErrorEvent:(id)arg1;
- (void)_awaitRetryingFileUUID:(id)arg1;
- (id)_buildContextFromNVRAMBootArgs;
- (void)_buildEventExtensions;
- (void)_checkWhetherIdle:(id)arg1;
- (id)_copyEscapeStringsForEventData:(id)arg1;
- (void)_decrementActiveSendCount;
- (id)_getJSONDataFromPayload:(id)arg1 withFileUUID:(id)arg2 forEventUUID:(id)arg3;
- (id)_getSplunkRequestForURL:(id)arg1;
- (id)_getSplunkServerURL:(id)arg1;
- (void)_incrementActiveSendCount:(id)arg1;
- (id)_newExistingFileUUIDs;
- (id)_newScrubbedEvents:(id)arg1;
- (void)_removeFileUUID:(id)arg1 loggingError:(bool)arg2 forReason:(id)arg3;
- (void)_sendAllAwaitingRetry;
- (void)_sendCoreEvent:(id)arg1;
- (void)_sendCoreEvents:(id)arg1 secondEvent:(id)arg2;
- (bool)_sendFirstAwaitingRetry;
- (void)_sendInterruptedFromStorage;
- (void)_sendSplunkEvents:(id)arg1 forEventUUID:(id)arg2 toServerURL:(id)arg3;
- (void)_splunkAccessSetup;
- (id)_storeJSONData:(id)arg1 withFileUUID:(id)arg2 forEventUUID:(id)arg3;
- (void)_uploadFromFile:(id)arg1 withFileUUID:(id)arg2 forEventUUID:(id)arg3 toServerURL:(id)arg4;
- (int)activeSendTaskCount;
- (id)awaitingRetry;
- (bool)dropEventsOnSendFailure;
- (void)dropOnSendFailure:(bool)arg1;
- (id)eventExtensions;
- (void)flushEvent;
- (void)handleSendFinishedInvalidFileUUID:(id)arg1 withError:(id)arg2;
- (void)handleSendFinishedWithFileUUID:(id)arg1 sendSucceeded:(bool)arg2 withStatusCode:(long long)arg3 withError:(id)arg4;
- (id)inProcessConfig;
- (id)inProcessOperationQueue;
- (id)inProcessSession;
- (void)indicateOnceIdle:(id /* block */)arg1;
- (id)initStoringToPath:(id)arg1;
- (id)lastErrorEvent;
- (id /* block */)onceIdleCompletion;
- (id)reporterDelegate;
- (bool)sendEvent:(id)arg1;
- (bool)sendEvent:(id)arg1 toServerURL:(id)arg2;
- (id)sendEventReturningAugmented:(id)arg1 toServerURL:(id)arg2;
- (void)setActiveSendTaskCount:(int)arg1;
- (void)setAwaitingRetry:(id)arg1;
- (void)setDropEventsOnSendFailure:(bool)arg1;
- (void)setEventExtensions:(id)arg1;
- (void)setInProcessConfig:(id)arg1;
- (void)setInProcessOperationQueue:(id)arg1;
- (void)setInProcessSession:(id)arg1;
- (void)setLastErrorEvent:(id)arg1;
- (void)setOnceIdleCompletion:(id /* block */)arg1;
- (void)setReporterDelegate:(id)arg1;
- (void)setSplunkAccessCreated:(bool)arg1;
- (void)setSplunkURL:(id)arg1;
- (void)setStoreToPath:(id)arg1;
- (bool)splunkAccessCreated;
- (id)splunkStateQueue;
- (id)splunkURL;
- (id)storeToPath;

@end
