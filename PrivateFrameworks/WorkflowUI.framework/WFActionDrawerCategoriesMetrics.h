/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/WorkflowUI.framework/WorkflowUI
 */

@interface WFActionDrawerCategoriesMetrics : NSObject {
    NSArray * _categories;
    <WFActionDrawerCategoriesMetricsProviderCellDimension> * _cellDimensions;
    struct CGSize { 
        double width; 
        double height; 
    }  _containerSize;
    double  _heightForDisplay;
    struct CGSize { 
        double width; 
        double height; 
    }  _maximumSizeCellThatFits;
    NSArray * _sizesForCells;
    UITraitCollection * _traitCollection;
    bool  _valid;
    bool  _verticalPresentation;
}

@property (nonatomic, copy) NSArray *categories;
@property (nonatomic, retain) <WFActionDrawerCategoriesMetricsProviderCellDimension> *cellDimensions;
@property (nonatomic) struct CGSize { double x1; double x2; } containerSize;
@property (nonatomic, readonly) double heightForDisplay;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } maximumSizeCellThatFits;
@property (nonatomic, readonly) NSArray *sizesForCells;
@property (nonatomic) UITraitCollection *traitCollection;
@property (nonatomic, readonly) bool valid;
@property (nonatomic) bool verticalPresentation;

- (void).cxx_destruct;
- (bool)canFitVertically;
- (id)categories;
- (id)cellDimensions;
- (struct CGSize { double x1; double x2; })cellImageSize;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cellPadding;
- (void)computeHeightForDisplay;
- (void)computeMaximumSizeCellThatFits;
- (struct CGSize { double x1; double x2; })computeSizeForCell:(id)arg1;
- (void)computeSizesForCells;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })containerEdgeInsets;
- (struct CGSize { double x1; double x2; })containerSize;
- (double)heightForDisplay;
- (id)initWithCategories:(id)arg1;
- (bool)isAccessibilityContentSize;
- (void)loadCellDimensions;
- (struct CGSize { double x1; double x2; })maximumSizeCellThatFits;
- (unsigned long long)numberOfCellsPerRow;
- (unsigned long long)numberOfRowsRequired;
- (void)recompute;
- (void)recomputeIfNeeded;
- (void)setCategories:(id)arg1;
- (void)setCellDimensions:(id)arg1;
- (void)setContainerSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTraitCollection:(id)arg1;
- (void)setVerticalPresentation:(bool)arg1;
- (bool)shouldStackVertically;
- (struct CGSize { double x1; double x2; })sizeForCellAtIndex:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })sizeForLabel:(id)arg1 inSize:(struct CGSize { double x1; double x2; })arg2;
- (id)sizesForCells;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })textPadding;
- (id)traitCollection;
- (bool)valid;
- (bool)verticalPresentation;

@end
