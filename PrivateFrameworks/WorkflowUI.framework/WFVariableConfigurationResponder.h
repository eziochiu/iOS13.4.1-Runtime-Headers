/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/WorkflowUI.framework/WorkflowUI
 */

@interface WFVariableConfigurationResponder : UIResponder <UIKeyInput, WFVariableConfigurationAccessoryViewDelegate, WFVariableConfigurationViewControllerDelegate, WFVariableDelegate> {
    WFVariableConfigurationAccessoryView * _accessoryView;
    WFVariableConfigurationView * _configurationView;
    <WFVariableConfigurationResponderDelegate> * _delegate;
    unsigned long long  _exitAccessory;
    UIView * _nextResponder;
    bool  _showsAccessoryActions;
    WFVariable * _variable;
}

@property (nonatomic, readonly) WFVariableConfigurationAccessoryView *accessoryView;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic, readonly) WFVariableConfigurationView *configurationView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <WFVariableConfigurationResponderDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool enablesReturnKeyAutomatically;
@property (nonatomic) unsigned long long exitAccessory;
@property (nonatomic, readonly) bool hasText;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long keyboardType;
@property (nonatomic) UIView *nextResponder;
@property (nonatomic, copy) UITextInputPasswordRules *passwordRules;
@property (nonatomic) unsigned long long resultType;
@property (nonatomic) long long returnKeyType;
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry;
@property (nonatomic) bool showsAccessoryActions;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long spellCheckingType;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *textContentType;
@property (nonatomic, readonly) WFVariable *variable;

+ (bool)shouldShowConfigurationOnInsertionOfVariable:(id)arg1;

- (void).cxx_destruct;
- (id)accessoryView;
- (void)accessoryViewDidDelete:(id)arg1;
- (void)accessoryViewDidDismiss:(id)arg1;
- (void)accessoryViewDidRename:(id)arg1;
- (void)accessoryViewDidReturnToKeyboard:(id)arg1;
- (void)accessoryViewDidRevealAction:(id)arg1;
- (bool)becomeFirstResponder;
- (bool)canBecomeFirstResponder;
- (id)configurationView;
- (void)configurationViewController:(id)arg1 didUpdateVariable:(id)arg2;
- (void)configurationViewController:(id)arg1 presentPromptWithTitle:(id)arg2 message:(id)arg3 fieldConfigurationHandler:(id /* block */)arg4 commitHandler:(id /* block */)arg5;
- (void)dealloc;
- (id)delegate;
- (void)deleteBackward;
- (unsigned long long)exitAccessory;
- (bool)hasText;
- (id)initWithVariable:(id)arg1;
- (id)inputAccessoryView;
- (id)inputView;
- (void)insertText:(id)arg1;
- (id)nextResponder;
- (bool)resignFirstResponder;
- (unsigned long long)resultType;
- (void)setDelegate:(id)arg1;
- (void)setExitAccessory:(unsigned long long)arg1;
- (void)setNextResponder:(id)arg1;
- (void)setResultType:(unsigned long long)arg1;
- (void)setShowsAccessoryActions:(bool)arg1;
- (bool)showsAccessoryActions;
- (void)updateAccessoryView;
- (id)variable;
- (void)variableDidChange:(id)arg1;

@end
