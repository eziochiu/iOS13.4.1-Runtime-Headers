/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore
 */

@interface PXVideoSession : PXObservable <AVPlayerItemOutputPullDelegate, ISChangeObserver, ISWrappedAVPlayerDelegate, PXChangeObserver> {
    bool  _allowsExternalPlayback;
    NSObject<OS_dispatch_queue> * _audioSessionQueue;
    ISWrappedAVAudioSession * _audioSessionQueue_audioSession;
    PXVideoContentProvider * _contentProvider;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _currentTime;
    <PXVideoSessionDelegate> * _delegate;
    NSError * _error;
    bool  _isUpdatingAudioSession;
    NSMutableArray * _mainQueue_videoViewQueue;
    PXNumberAnimator * _mainQueue_volumeAnimator;
    NSTimer * _playerTimeAdvancementTimer;
    id  _playerTimeObservationToken;
    NSObject<OS_dispatch_queue> * _stateQueue;
    NSString * _stateQueue_AudioSessionCategory;
    unsigned long long  _stateQueue_AudioSessionCategoryOptions;
    long long  _stateQueue_audioStatus;
    bool  _stateQueue_buffering;
    struct __CVBuffer { } * _stateQueue_currentPixelBuffer;
    AVPlayerItem * _stateQueue_currentPlayerItem;
    long long  _stateQueue_desiredPlayState;
    PXDisplayLink * _stateQueue_displayLink;
    NSCountedSet * _stateQueue_enteredControlContexts;
    bool  _stateQueue_isAtBeginning;
    bool  _stateQueue_isAtEnd;
    bool  _stateQueue_isLoopingEnabled;
    bool  _stateQueue_isPlayable;
    bool  _stateQueue_isPlayerTimeAdvancing;
    bool  _stateQueue_isStalled;
    bool  _stateQueue_isUpdatingAudioSession;
    NSMutableSet * _stateQueue_pixelBufferOutputTokens;
    NSMutableSet * _stateQueue_pixelBufferPausedOutputTokens;
    long long  _stateQueue_playState;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _stateQueue_playbackTimeRange;
    id  _stateQueue_playbackTimeRangeEndBoundaryObserver;
    AVPlayerItem * _stateQueue_playerItem;
    bool  _stateQueue_readyForSeeking;
    bool  _stateQueue_seekToBeginningAtEnd;
    bool  _stateQueue_shouldFadeVolumeChange;
    NSMutableDictionary * _stateQueue_statesByControlContext;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _stateQueue_videoDuration;
    AVPlayerItemVideoOutput * _stateQueue_videoOutput;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _stateQueue_videoRotationTransform;
    float  _stateQueue_volume;
    long long  _tokenCounter;
    NSObject<OS_dispatch_queue> * _updateQueue;
    void * _updateQueueIdentifier;
    bool  _updateQueue_didFinishInitializingAudioSession;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _updateQueue_lastPlayerTime;
    NSDate * _updateQueue_playRequestDate;
    struct { 
        unsigned long long needsUpdate; 
        unsigned long long updated; 
        bool isPerformingUpdate; 
    }  _updateQueue_updateFlags;
    ISWrappedAVPlayer * _videoPlayer;
    NSObject<OS_dispatch_queue> * _videoWorkQueue;
}

@property (nonatomic, readonly) bool allowsExternalPlayback;
@property (nonatomic, readonly, copy) NSString *audioSessionCategory;
@property (nonatomic, readonly) unsigned long long audioSessionCategoryOptions;
@property (nonatomic) long long audioStatus;
@property (getter=isBuffering, nonatomic) bool buffering;
@property (nonatomic, readonly) PXVideoContentProvider *contentProvider;
@property (nonatomic) struct __CVBuffer { }*currentPixelBuffer;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } currentTime;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) NSString *debugDetailedDescription;
@property (nonatomic) <PXVideoSessionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) long long desiredPlayState;
@property (nonatomic, retain) PXDisplayLink *displayLink;
@property (nonatomic, readonly) NSError *error;
@property (readonly) unsigned long long hash;
@property (setter=setAtBeginning:, nonatomic) bool isAtBeginning;
@property (setter=setAtEnd:, nonatomic) bool isAtEnd;
@property (nonatomic, readonly) bool isPlayable;
@property (nonatomic, readonly) bool isReadyForSeeking;
@property (setter=setStalled:, nonatomic) bool isStalled;
@property (setter=setUpdatingAudioSession:, nonatomic) bool isUpdatingAudioSession;
@property (getter=isLoopingEnabled, nonatomic, readonly) bool loopingEnabled;
@property (nonatomic, readonly) long long playState;
@property (nonatomic, readonly) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } playbackTimeRange;
@property (nonatomic, retain) AVPlayerItem *playerItem;
@property (nonatomic, readonly) bool preventsSleepDuringVideoPlayback;
@property (nonatomic, readonly) bool seekToBeginningAtEnd;
@property (readonly) Class superclass;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } videoDuration;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } videoRotationTransform;
@property (nonatomic, readonly) float volume;

- (void).cxx_destruct;
- (void)_addOutput:(id)arg1 toPlayerItem:(id)arg2;
- (void)_assertOnUpdateQueue;
- (void)_audioSessionQueue_initializeAudioSession;
- (void)_audioSessionQueue_updateAudioSessionWithCategory:(id)arg1 options:(unsigned long long)arg2;
- (void)_avPlayerTimeDidChange:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_didFinishInitializingAudioSession;
- (void)_handleAssetTracksDidLoadForAsset:(id)arg1;
- (void)_handleAudioSessionOutputVolumeDidChangeFromVolume:(float)arg1 toVolume:(float)arg2;
- (void)_handleDidReachPlaybackTimeRangeEnd;
- (void)_handleDisplayLink:(id)arg1;
- (void)_handlePlayabilityDidLoadForAsset:(id)arg1;
- (void)_handlePlayerTimeAdvancementTimer:(id)arg1;
- (void)_handlePreferredTransformDidLoad;
- (bool)_isAVPlayerPlayStateOutOfSync;
- (bool)_isOnUpdateQueue;
- (void)_loadAssetTracksIfNeeded;
- (void)_logPlaybackState;
- (void)_mainQueue_actuallyPrewarmVideoView;
- (id)_newVideoView;
- (void)_performBlockOnUpdateQueue:(id /* block */)arg1;
- (void)_performChanges:(id /* block */)arg1;
- (id)_playbackStateDescription;
- (void)_removeAllVideoOutputs;
- (void)_seekToPlaybackTimeRangeStartIfNeeded;
- (void)_setPlayabilityFromAsset:(id)arg1;
- (id)_stateQueue_newStateFromCurrent;
- (void)_updateAVPlayerPlayState;
- (void)_updateAtBeginningOrEnd;
- (void)_updateAtBeginningOrEndWithPlayerItemDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 success:(bool)arg2 error:(id)arg3;
- (void)_updateAudioStatus;
- (void)_updateBuffering;
- (void)_updateCurrentPixelBuffer;
- (void)_updateDisplayLinkState;
- (void)_updateDuration;
- (void)_updateFromCurrentControlState;
- (void)_updatePlayState;
- (void)_updatePlayability;
- (void)_updatePlayerItem;
- (void)_updatePlayerItemInPlayer;
- (void)_updatePlayerVolume;
- (void)_updateReadyForSeeking;
- (void)_updateRotationTransform;
- (void)_updateStalled;
- (void)_updateVideoOutput;
- (void)_updateVolumeAnimator;
- (void)_videoWorkQueue_updateCurrentPixelBufferWithVideoOutput:(id)arg1 outputTime:(double)arg2;
- (bool)allowsExternalPlayback;
- (id)audioSessionCategory;
- (unsigned long long)audioSessionCategoryOptions;
- (long long)audioStatus;
- (void)avPlayer:(id)arg1 itemDidPlayToEnd:(id)arg2;
- (void)avPlayerDidDeallocate;
- (void)cancelLoading;
- (void)cancelPixelBufferOutputWithRequestIdentifier:(id)arg1;
- (id)contentProvider;
- (struct __CVBuffer { }*)currentPixelBuffer;
- (id)currentPlayerItem;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })currentTime;
- (void)dealloc;
- (id)debugDetailedDescription;
- (id)delegate;
- (id)dequeueVideoView;
- (long long)desiredPlayState;
- (void)didPerformChanges;
- (id)displayLink;
- (void)enterContext:(long long)arg1;
- (id)error;
- (struct CGImage { }*)generateSnapshotImage;
- (id)init;
- (id)initWithContentProvider:(id)arg1;
- (bool)isAtBeginning;
- (bool)isAtEnd;
- (bool)isBuffering;
- (bool)isLoopingEnabled;
- (bool)isPlayable;
- (bool)isPlayerTimeAdvancing;
- (bool)isReadyForSeeking;
- (bool)isStalled;
- (bool)isUpdatingAudioSession;
- (void)leaveContext:(long long)arg1;
- (void)loadIfNeededWithPriority:(long long)arg1;
- (id)mutableChangeObject;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (void)outputMediaDataWillChange:(id)arg1;
- (void)performChanges:(id /* block */)arg1;
- (void)performChanges:(id /* block */)arg1 withPlaybackContext:(long long)arg2;
- (void)performFinalCleanup;
- (unsigned long long)pixelBufferOutputTokenCount;
- (long long)playState;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })playbackTimeRange;
- (id)playbackTimeRangeEndBoundaryObserver;
- (id)playerItem;
- (bool)preventsSleepDuringVideoPlayback;
- (void)prewarmVideoView;
- (void)recycleVideoView:(id)arg1;
- (void)requestPixelBufferOutputWithRequestIdentifier:(id)arg1;
- (bool)seekToBeginningAtEnd;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 completionHandler:(id /* block */)arg2;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 completionHandler:(id /* block */)arg4;
- (void)setAllowsExternalPlayback:(bool)arg1;
- (void)setAtBeginning:(bool)arg1;
- (void)setAtEnd:(bool)arg1;
- (void)setAudioSessionCategory:(id)arg1 options:(unsigned long long)arg2;
- (void)setAudioStatus:(long long)arg1;
- (void)setBuffering:(bool)arg1;
- (void)setCurrentPixelBuffer:(struct __CVBuffer { }*)arg1;
- (void)setCurrentPlayerItem:(id)arg1;
- (void)setCurrentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setDesiredPlayState:(long long)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setIsReadyForSeeking:(bool)arg1;
- (void)setLoopingEnabled:(bool)arg1;
- (void)setPlayState:(long long)arg1;
- (void)setPlayable:(bool)arg1;
- (void)setPlaybackTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)setPlaybackTimeRangeEndBoundaryObserver:(id)arg1;
- (void)setPlayerItem:(id)arg1;
- (void)setPlayerTimeAdvancing:(bool)arg1;
- (void)setPreventsSleepDuringVideoPlayback:(bool)arg1;
- (void)setSeekToBeginningAtEnd:(bool)arg1;
- (void)setStalled:(bool)arg1;
- (void)setUpdatingAudioSession:(bool)arg1;
- (void)setVideoDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setVideoOutput:(id)arg1;
- (void)setVideoRotationTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setVolume:(float)arg1 withFade:(bool)arg2;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })videoDuration;
- (id)videoOutput;
- (id)videoPlayer;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })videoRotationTransform;
- (float)volume;

@end
