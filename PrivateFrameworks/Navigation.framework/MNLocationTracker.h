/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation
 */

@interface MNLocationTracker : NSObject <MNNavigationSessionObserver, MNSessionUpdateManagerDelegate> {
    GEOApplicationAuditToken * _auditToken;
    MNLocation * _lastMatchedLocation;
    bool  _localizeRoadNames;
    MNNavigationSession * _navigationSession;
    MNObserverHashTable * _safeDelegate;
    int  _state;
}

@property (getter=_auditToken, setter=_setAuditToken:, nonatomic, retain) GEOApplicationAuditToken *auditToken;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasArrived;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isRerouting;
@property (nonatomic, readonly) MNLocation *lastMatchedLocation;
@property (nonatomic, readonly) MNNavigationSession *navigationSession;
@property (nonatomic, readonly) MNObserverHashTable *safeDelegate;
@property (nonatomic, readonly) bool shouldProjectAlongRoute;
@property (setter=_setState:, nonatomic) int state;
@property (readonly) Class superclass;
@property (nonatomic, readonly) int transportType;

- (void).cxx_destruct;
- (id)_auditToken;
- (void)_defaultsDidChange;
- (id)_matchedLocationForLocation:(id)arg1;
- (void)_roadFeaturesForFeature:(struct { struct { id x_1_1_1; char *x_1_1_2; unsigned long long x_1_1_3; unsigned long long x_1_1_4; unsigned long long x_1_1_5; unsigned long long x_1_1_6; unsigned int x_1_1_7; unsigned long long x_1_1_8; bool x_1_1_9; unsigned long long x_1_1_10; float x_1_1_11; unsigned long long x_1_1_12; id x_1_1_13; int x_1_1_14; } x1; unsigned long long x2; unsigned long long x3; int x4; int x5; int x6; unsigned long long x7; unsigned long long x8; union { struct { struct { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_9_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_9_1_2; } x9; struct { /* ? */ } *x10; struct { unsigned short x_11_1_1[2]; unsigned short x_11_1_2[2]; } x11; unsigned char x12; bool x13; unsigned char x14; bool x15; bool x16; unsigned char x17; bool x18; unsigned short x19; struct _NSRange { unsigned long long x_20_1_1; unsigned long long x_20_1_2; } x20; bool x21; unsigned int x22; }*)arg1 outRoadName:(id*)arg2 outShieldText:(id*)arg3 outShieldType:(long long*)arg4;
- (void)_setAuditToken:(id)arg1;
- (void)_setIsNavigatingInLowGuidance:(bool)arg1;
- (void)_setState:(int)arg1;
- (void)_switchedToStepAtIndex:(unsigned long long)arg1;
- (void)_updateMatchedLocation:(id)arg1;
- (void)_updateShouldLocalizeRoadNames;
- (void)dealloc;
- (void)forceOnRoute:(id)arg1 atLocation:(id)arg2;
- (bool)hasArrived;
- (id)init;
- (id)initWithNavigationSession:(id)arg1;
- (bool)isRerouting;
- (id)lastMatchedLocation;
- (id)matchedLocationForLocation:(id)arg1;
- (id)navigationSession;
- (void)pause;
- (bool)paused;
- (void)reroute:(id)arg1 reason:(unsigned long long)arg2;
- (void)resetForTracePlayerAtLocation:(id)arg1;
- (void)resume;
- (id)routeInfoForUpdateManager:(id)arg1;
- (id)safeDelegate;
- (void)setDelegate:(id)arg1;
- (bool)shouldAllowPause;
- (bool)shouldProjectAlongRoute;
- (void)startTracking;
- (int)state;
- (void)stopTracking;
- (void)traceForcedActiveTransportTypeChange:(int)arg1;
- (void)traceForcedRerouteWithResponse:(id)arg1 request:(id)arg2;
- (void)traceJumpedInTime;
- (void)tracePaused;
- (int)transportType;
- (void)updateDestination:(id)arg1 finishedHandler:(id /* block */)arg2;
- (void)updateLocation:(id)arg1;
- (void)updateManager:(id)arg1 didReceiveETAError:(id)arg2;
- (void)updateManager:(id)arg1 didReceiveETAResponse:(id)arg2 toRequest:(id)arg3;
- (void)updateManager:(id)arg1 didReceiveTransitError:(id)arg2;
- (void)updateManager:(id)arg1 didReceiveTransitUpdateResponse:(id)arg2;
- (void)updateManager:(id)arg1 didReceiveTransitUpdates:(id)arg2;
- (void)updateManager:(id)arg1 didUpdateETAForRouteInfo:(id)arg2;
- (void)updateManager:(id)arg1 willSendETARequest:(id)arg2;
- (void)updateManager:(id)arg1 willSendTransitUpdateRequestForRouteIDs:(id)arg2;
- (void)updateManager:(id)arg1 willSendTransitUpdateRequests:(id)arg2;
- (void)updateVehicleHeading:(double)arg1 timestamp:(id)arg2;
- (void)updateVehicleSpeed:(double)arg1 timestamp:(id)arg2;
- (id)userLocationForUpdateManager:(id)arg1;
- (bool)wantsETAUpdates;

@end
