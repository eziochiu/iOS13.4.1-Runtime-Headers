/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit
 */

@interface AVTStickerProp : NSObject <NSCopying> {
    NSArray * _adjustments;
    SCNNode * _node;
    bool  _orientToCamera;
    NSArray * _palettesDescriptions;
    struct SCNVector3 { 
        float x; 
        float y; 
        float z; 
    }  _position;
    bool  _renderLast;
    struct SCNVector3 { 
        float x; 
        float y; 
        float z; 
    }  _rotation;
    struct SCNVector3 { 
        float x; 
        float y; 
        float z; 
    }  _scale;
    NSArray * _shaderModifiers;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
}

@property (nonatomic, readonly) NSArray *adjustments;
@property (nonatomic, retain) SCNNode *node;
@property (nonatomic, readonly) bool orientToCamera;
@property (nonatomic, readonly) NSArray *palettesDescriptions;
@property (nonatomic, readonly) struct SCNVector3 { float x1; float x2; float x3; } position;
@property (nonatomic, readonly) bool renderLast;
@property (nonatomic, readonly) struct SCNVector3 { float x1; float x2; float x3; } rotation;
@property (nonatomic, readonly) struct SCNVector3 { float x1; float x2; float x3; } scale;
@property (nonatomic, copy) NSArray *shaderModifiers;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } size;

+ (id)adjustmentFromDictionary:(id)arg1 presetCategory:(id)arg2;
+ (void)applyPalettesForAvatar:(id)arg1 toNode:(id)arg2 palettesDescriptions:(id)arg3;
+ (id)cacheKeyForSize:(struct CGSize { double x1; double x2; })arg1 position:(struct SCNVector3 { float x1; float x2; float x3; })arg2 rotation:(struct SCNVector3 { float x1; float x2; float x3; })arg3 scale:(struct SCNVector3 { float x1; float x2; float x3; })arg4 palettesDescriptions:(id)arg5 filePath:(id)arg6;
+ (bool)getOrientToCameraInDictionary:(id)arg1;
+ (struct SCNVector3 { float x1; float x2; float x3; })getPositionInDictionary:(id)arg1;
+ (bool)getRenderLastInDictionary:(id)arg1;
+ (struct SCNVector3 { float x1; float x2; float x3; })getRotationInDictionary:(id)arg1;
+ (struct SCNVector3 { float x1; float x2; float x3; })getScaleInDictionary:(id)arg1;
+ (struct CGSize { double x1; double x2; })getSizeInDictionary:(id)arg1;
+ (id)propFromDictionary:(id)arg1 assetsPath:(id)arg2;
+ (id)stickerPropCache;

- (void).cxx_destruct;
- (id)adjustments;
- (void)applyCamera:(id)arg1 toNode:(id)arg2 distToHead:(double)arg3;
- (void)buildNodeForAvatar:(id)arg1 withCamera:(id)arg2 forExport:(bool)arg3 completionHandler:(id /* block */)arg4;
- (id)cloneWithShaderModifiers:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(struct SCNVector3 { float x1; float x2; float x3; })arg2 position:(struct SCNVector3 { float x1; float x2; float x3; })arg3 renderLast:(bool)arg4 orientToCamera:(bool)arg5 rotation:(struct SCNVector3 { float x1; float x2; float x3; })arg6 palettesDescriptions:(id)arg7 shaderModifiers:(id)arg8 adjustments:(id)arg9;
- (id)node;
- (id)nodeName;
- (bool)orientToCamera;
- (id)palettesDescriptions;
- (struct SCNVector3 { float x1; float x2; float x3; })position;
- (bool)renderLast;
- (struct SCNVector3 { float x1; float x2; float x3; })rotation;
- (struct SCNVector3 { float x1; float x2; float x3; })scale;
- (void)setNode:(id)arg1;
- (void)setShaderModifiers:(id)arg1;
- (id)shaderModifiers;
- (struct CGSize { double x1; double x2; })size;
- (void)stickerGenerationDidEnd;
- (void)stickerGenerationWillBegin;
- (void)updateNode:(id)arg1 withContentAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;

@end
