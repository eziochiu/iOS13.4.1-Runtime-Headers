/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface UIDictationController : NSObject <UIAdaptivePresentationControllerDelegate, UIDictationConnectionDelegate, UIDictationConnectionTokenFilterProtocol, VTUIDictationDataSharingOptInPresentationDelegate, _UIDictationPrivacySheetControllerDelegate, _UITouchPhaseChangeDelegate> {
    NSString * _activationIdentifier;
    bool  _connectionWasAlreadyAliveForStatisticsLogging;
    UIKeyboardInputMode * _currentInputModeForDictation;
    AFAnalyticsTurnBasedInstrumentationContext * _currentInstrumentationContext;
    NSString * _currentKeyboardPrimaryLanguage;
    bool  _deferredCancellationRequested;
    NSString * _detectedLanguage;
    UIAlertController * _dictationAvailableSoonAlertController;
    UIDictationConnection * _dictationConnection;
    NSArray * _dictationLanguages;
    UIWindow * _dictationPresenterWindow;
    _UIDictationPrivacySheetController * _dictationPrivacySheetController;
    unsigned long long  _dictationSourceType;
    bool  _didToggleSoftwareKeyboardVisibleForDictation;
    bool  _didUseOfflineDictation;
    bool  _discardNextHypothesis;
    NSString * _fallbackDictationLanguage;
    id /* block */  _finalResultsOperation;
    bool  _hasDictated;
    bool  _hasPostedInstrumentationDictationContext;
    bool  _hasPreheated;
    bool  _ignoreFinalizePhrases;
    unsigned short  _initialCharacterAfterSelectionForAsyncDelegate;
    NSString * _initialDictationLanguage;
    unsigned short  _initialPreviousCharacterForAsyncDelegate;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _insertionRange;
    NSString * _interactionIdentifier;
    bool  _isOfflineMetricsSessionActive;
    UIKeyboardInputMode * _keyboardInputModeToReturn;
    NSString * _language;
    double  _lastAnimationUpdateTimeStamp;
    id  _lastCorrectionIdentifier;
    NSString * _lastHypothesis;
    NSString * _lastMessageKeyboardLanguage;
    long long  _lastOfflineDictationMetricEvent;
    NSString * _lastRecognitionText;
    bool  _localSpeechRecognitionForced;
    bool  _logAppEnterBackground;
    NSString * _modelInfo;
    _UIDictationTelephonyMonitor * _monitor;
    NSMutableArray * _pendingEdits;
    bool  _performingStreamingEditingOperation;
    NSString * _postfixTextForStart;
    UIDictationConnectionPreferences * _preferences;
    NSString * _prefixTextForStart;
    NSString * _previousHypothesis;
    id /* block */  _privacySheetDismissalHandler;
    unsigned long long  _reasonType;
    bool  _recievingResults;
    NSTimer * _recordingLimitTimer;
    NSDictionary * _selectedAttributesForDictation;
    bool  _selectionEndWasInitiallyAtParagraphBoundaryForAsyncDelegate;
    bool  _selectionStartWasInitiallyAtParagraphBoundaryForAsyncDelegate;
    NSString * _selectionTextForStart;
    NSString * _smartLanguageSelectionOverrideLanguage;
    unsigned long long  _stateHandler;
    bool  _streamingAnimationActive;
    CADisplayLink * _streamingAnimationDisplayLink;
    UIDictationStreamingOperations * _streamingOperations;
    NSString * _targetHypothesis;
    long long  _updatingDocument;
    bool  _wantsAvailabilityMonitoringWhenAppActive;
    bool  cancelledByWaitingForLocalResults;
}

@property (nonatomic, copy) NSString *activationIdentifier;
@property (nonatomic, retain) UIKeyboardInputMode *currentInputModeForDictation;
@property (nonatomic, retain) AFAnalyticsTurnBasedInstrumentationContext *currentInstrumentationContext;
@property (nonatomic, copy) NSString *currentKeyboardPrimaryLanguage;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSString *detectedLanguage;
@property (nonatomic, retain) NSArray *dictationLanguages;
@property (nonatomic, retain) UIWindow *dictationPresenterWindow;
@property (nonatomic, retain) _UIDictationPrivacySheetController *dictationPrivacySheetController;
@property (nonatomic, readonly, retain) NSNumber *dictationRequestOrigin;
@property (nonatomic) unsigned long long dictationSourceType;
@property (nonatomic) bool didToggleSoftwareKeyboardVisibleForDictation;
@property (nonatomic) bool discardNextHypothesis;
@property (nonatomic, copy) NSString *fallbackDictationLanguage;
@property (nonatomic) bool hasPostedInstrumentationDictationContext;
@property (nonatomic) bool hasPreheated;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool ignoreFinalizePhrases;
@property (nonatomic) unsigned short initialCharacterAfterSelectionForAsyncDelegate;
@property (nonatomic, copy) NSString *initialDictationLanguage;
@property (nonatomic) unsigned short initialPreviousCharacterForAsyncDelegate;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } insertionRange;
@property (nonatomic, copy) NSString *interactionIdentifier;
@property (nonatomic, retain) UIKeyboardInputMode *keyboardInputModeToReturn;
@property (nonatomic, copy) id lastCorrectionIdentifier;
@property (nonatomic, copy) NSString *lastHypothesis;
@property (nonatomic, copy) NSString *lastMessageKeyboardLanguage;
@property (nonatomic, copy) NSString *lastRecognitionText;
@property (nonatomic) bool localSpeechRecognitionForced;
@property (nonatomic) bool logAppEnterBackground;
@property (nonatomic, copy) NSString *modelInfo;
@property (nonatomic, retain) NSMutableArray *pendingEdits;
@property (nonatomic) bool performingStreamingEditingOperation;
@property (nonatomic, copy) NSString *previousHypothesis;
@property (nonatomic) unsigned long long reasonType;
@property (nonatomic) bool selectionEndWasInitiallyAtParagraphBoundaryForAsyncDelegate;
@property (nonatomic) bool selectionStartWasInitiallyAtParagraphBoundaryForAsyncDelegate;
@property (copy) NSString *smartLanguageSelectionOverrideLanguage;
@property (nonatomic) unsigned long long stateHandler;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *targetHypothesis;
@property (nonatomic) bool wantsAvailabilityMonitoringWhenAppActive;

+ (id)UIDictationInstrumentaionLocalIdentifierWithLocalString:(id)arg1;
+ (id)UIDictationLanguageSourceType:(unsigned long long)arg1;
+ (int)UIDictationStartStopReasonToInstrumentationDictationEndPointType:(unsigned long long)arg1;
+ (int)UIDictationStartStopReasonToInstrumentationInvocationSourceType:(unsigned long long)arg1;
+ (id)UIDictationStartStopReasonTypeDescription:(unsigned long long)arg1;
+ (bool)_applicationIsActive;
+ (id)_dictationLog;
+ (id)activeConnection;
+ (id)activeInstance;
+ (id)activeSLSDictationLanguages;
+ (void)applicationDidBecomeActive;
+ (void)applicationDidEnterBackgroundNotification;
+ (void)applicationWillResignActive;
+ (id)arrayWithTextEntriesRemoved:(id)arg1;
+ (id)bestInterpretationForDictationResult:(id)arg1;
+ (bool)checkTraitsSupportDictation:(id)arg1;
+ (bool)dictationInfoIsOnScreen;
+ (bool)dictationIsFunctional;
+ (id)dictionaryWithTextEntriesRemoved:(id)arg1;
+ (void)didBeginEditingInTextView:(id)arg1;
+ (void)didOneFingerTapInTextView:(id)arg1;
+ (bool)fetchCurrentInputModeSupportsDictation;
+ (id)interpretation:(id)arg1 forPhraseIndex:(unsigned long long)arg2 isShiftLocked:(bool)arg3 autocapitalizationType:(long long)arg4 useServerCapitalization:(bool)arg5;
+ (bool)isDictationSearchBarButtonVisible;
+ (bool)isRunning;
+ (bool)isTextViewOnStarkScreen:(id)arg1;
+ (void)keyboardDidUpdateOnScreenStatus;
+ (void)keyboardWillChangeFromDelegate:(id)arg1 toDelegate:(id)arg2;
+ (void)logCorrectionStatisticsForDelegate:(id)arg1;
+ (void)logDictationString:(id)arg1;
+ (void)performOperations:(id /* block */)arg1 keyboardShifted:(bool)arg2;
+ (void)poppedLastStreamingOperation;
+ (bool)remoteCanDictateCurrentInputMode;
+ (id)removeTextIfNeeded:(id)arg1;
+ (id)removeTextIfNeeded:(id)arg1 metadata:(id)arg2;
+ (id)serializedDictationPhrases:(id)arg1;
+ (id)serializedInterpretationFromTokens:(id)arg1 transform:(struct __CFString { }*)arg2;
+ (id)serializedInterpretationFromTokens:(id)arg1 transform:(struct __CFString { }*)arg2 autocapitalization:(long long)arg3 capitalization:(unsigned long long)arg4;
+ (id)serializedInterpretationFromTokens:(id)arg1 transform:(struct __CFString { }*)arg2 capitalization:(unsigned long long)arg3;
+ (double)serverManualEndpointingThreshold;
+ (id)sharedInstance;
+ (bool)shouldDeleteBackwardInInputDelegate:(id)arg1;
+ (bool)shouldHideCursorForTextView:(id)arg1;
+ (bool)shouldHideSelectionUIForTextView:(id)arg1;
+ (bool)shouldInsertText:(id)arg1 inInputDelegate:(id)arg2;
+ (bool)shouldRemoveTextEntries;
+ (bool)shouldRemoveTextEntries:(id)arg1;
+ (void)siriPreferencesChanged;
+ (id)slsDictationLanguages;
+ (bool)starkScreenExists;
+ (id)streamingHypothesisForPhrases:(id)arg1;
+ (id)stringForState:(int)arg1;
+ (id)stringForViewMode:(int)arg1;
+ (bool)takesPressesBegan:(id)arg1 forTextView:(id)arg2;
+ (bool)takesPressesChanged:(id)arg1 forTextView:(id)arg2;
+ (bool)takesPressesEnded:(id)arg1 forTextView:(id)arg2;
+ (id)textRelatedMetadataKeys;
+ (void)updateLandingView;
+ (bool)usingServerManualEndpointingThreshold;
+ (bool)usingTypeAndTalk;
+ (int)viewMode;
+ (id)whitelistedDictationDictionariesFromMetadataDictionaries:(id)arg1;
+ (id)whitelistedDictationDictionaryFromMetadata:(id)arg1;
+ (id)whitelistedDictationMetadataKeys;

- (bool)_allowsMicsInSearchFieldForLanguageIdentifiers:(id)arg1;
- (id)_assistantCompatibleLanguageCodeForInputMode:(id)arg1;
- (void)_beginEnableDictationPrompt;
- (void)_beginOfflineMetricsSession;
- (void)_clearExistingText;
- (void)_completeStartDictationWithContinuation:(id /* block */)arg1;
- (id)_containingSearchBarForView:(id)arg1;
- (void)_createDictationPresenterWindowIfNecessary;
- (id)_currentLanguageForOfflineDictationMetrics;
- (void)_deleteBackwardIntoText;
- (void)_displayLinkFired:(id)arg1;
- (void)_displaySecureContentsAsPlainText:(bool)arg1 afterDelay:(double)arg2;
- (void)_endEnableDictationPromptAnimated:(bool)arg1;
- (void)_endOfflineMetricsSession;
- (id)_getBestHypothesisRangeGivenHintRange:(id)arg1 inputDelegate:(id)arg2 hypothesisRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 documentTextInRange:(id*)arg4;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_getRangeOfString:(id)arg1 inDocumentText:(id)arg2;
- (void)_handleDataSharingSheetDecision;
- (void)_handlePrivacySheetDismissal;
- (id)_hypothesisRangeFromSelectionRange:(id)arg1 inputDelegate:(id)arg2;
- (void)_markOfflineDictationInputMetricEvent;
- (void)_presentAlertForDictationInputModeOfType:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)_presentDataSharingOptInAlertWithCompletion:(id /* block */)arg1;
- (void)_presentOptInAlertWithCompletion:(id /* block */)arg1;
- (void)_presentPrivacySheetForType:(long long)arg1 completion:(id /* block */)arg2;
- (id)_rangeByExtendingRange:(id)arg1 backward:(long long)arg2 forward:(long long)arg3 inputDelegate:(id)arg4;
- (void)_restartDictation;
- (void)_runFinalizeOperation;
- (void)_runFinalizeOperation:(bool)arg1;
- (void)_setFinalResultHandler:(id /* block */)arg1;
- (void)_setupHypothesisAsFinalResults;
- (bool)_shouldDeleteBackwardInInputDelegate:(id)arg1;
- (bool)_shouldInsertText:(id)arg1 inInputDelegate:(id)arg2;
- (void)_startDictation;
- (void)_startStreamingAnimations;
- (void)_stopStreamingAnimation;
- (bool)_systemLanguageSupportsDictation;
- (void)_touchPhaseChangedForTouch:(id)arg1;
- (void)_updateFromSelectedTextRange:(id)arg1 withNewHypothesis:(id)arg2;
- (id)activationIdentifier;
- (float)audioLevel;
- (void)cancelDictation;
- (void)cancelDictationForTextStoreChangesInResponder:(id)arg1;
- (void)cancelRecordingLimitTimer;
- (void)clearTextFieldPlaceholder;
- (void)completeStartConnection;
- (void)completeStartConnectionForFileAtURL:(id)arg1 forInputModeIdentifier:(id)arg2;
- (id)connectionForStatisticsLogging;
- (id)currentInputModeForDictation;
- (id)currentInstrumentationContext;
- (id)currentKeyboardPrimaryLanguage;
- (bool)currentViewModeSupportsDictationMics;
- (bool)dataSharingDecided;
- (void)dealloc;
- (id)detectedLanguage;
- (id /* block */)dictationBlockForToken:(id)arg1;
- (id)dictationConnection;
- (void)dictationConnection:(id)arg1 didBeginLocalRecognitionWithModelInfo:(id)arg2;
- (void)dictationConnection:(id)arg1 didDetectLanguage:(id)arg2;
- (void)dictationConnection:(id)arg1 didFailRecognitionWithError:(id)arg2;
- (void)dictationConnection:(id)arg1 didFailRecordingWithError:(id)arg2;
- (void)dictationConnection:(id)arg1 didFilterTokensWithFilterState:(id)arg2 forFinalize:(bool)arg3;
- (void)dictationConnection:(id)arg1 didReceiveSearchResults:(id)arg2 recognizedText:(id)arg3 stable:(bool)arg4 final:(bool)arg5;
- (void)dictationConnection:(id)arg1 didStartRecordingWithOptions:(id)arg2;
- (void)dictationConnection:(id)arg1 filterState:(id)arg2 processFilteredToken:(id)arg3 forFinalize:(bool)arg4;
- (bool)dictationConnection:(id)arg1 filterState:(id)arg2 shouldCheckpointAtToken:(id)arg3;
- (void)dictationConnection:(id)arg1 finalizePhrases:(id)arg2 languageModel:(id)arg3 correctionIdentifier:(id)arg4 secureInput:(bool)arg5;
- (void)dictationConnection:(id)arg1 receivedInterpretation:(id)arg2 languageModel:(id)arg3 secureInput:(bool)arg4;
- (void)dictationConnection:(id)arg1 updateOptions:(id)arg2;
- (id)dictationConnection:(id)arg1 willFilterTokensWithLanguageModel:(id)arg2 forFinalize:(bool)arg3;
- (void)dictationConnectionDidCancel:(id)arg1;
- (void)dictationConnectionDidCancelIncompatibleLocalRecognizer:(id)arg1;
- (void)dictationConnectionDidCancelRecording:(id)arg1;
- (void)dictationConnectionDidEndRecording:(id)arg1;
- (void)dictationConnectionDidFinish:(id)arg1;
- (void)dictationConnectionDidStartRecording:(id)arg1;
- (void)dictationConnectionWillStartRecording:(id)arg1;
- (void)dictationConnnectionDidChangeAvailability:(id)arg1;
- (bool)dictationEnabled;
- (bool)dictationIsModifyingText;
- (id)dictationLanguages;
- (id)dictationPresenterWindow;
- (id)dictationPrivacySheetController;
- (void)dictationPrivacySheetControllerDidFinish:(id)arg1;
- (id)dictationRequestOrigin;
- (bool)dictationSearchFieldUIEnabled;
- (bool)dictationSearchFieldUISupportsTraitCollection:(id)arg1;
- (unsigned long long)dictationSourceType;
- (id)dictationUIState;
- (void)didShowAlternatives:(id)arg1 correctionIdentifier:(id)arg2 interactionIdentifier:(id)arg3;
- (bool)didToggleSoftwareKeyboardVisibleForDictation;
- (bool)disabledDueToTelephonyActivity;
- (bool)discardNextHypothesis;
- (void)dismissDictationView:(id)arg1;
- (void)dismissSoftwareKeyboardIfNeeded;
- (void)endSessionIfNecessaryForTransitionFromState:(int)arg1 toState:(int)arg2;
- (void)endSmartLanguageSelectionOverride;
- (void)errorAnimationDidFinish;
- (id)fallbackDictationLanguage;
- (id)fieldIdentifierInputDelegate:(id)arg1;
- (void)finishDictationRecognitionWithPhrases:(id)arg1 languageModel:(id)arg2 correctionIdentifier:(id)arg3 secureInput:(bool)arg4;
- (bool)hasPostedInstrumentationDictationContext;
- (bool)hasPreheated;
- (bool)ignoreFinalizePhrases;
- (id)init;
- (unsigned short)initialCharacterAfterSelectionForAsyncDelegate;
- (id)initialDictationLanguage;
- (unsigned short)initialPreviousCharacterForAsyncDelegate;
- (void)insertSerializedDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })insertionRange;
- (void)instrumentationDictationContextEmitInstrumentation;
- (void)instrumentationDictationTranscriptionMetadataEmitInstrumentationWithDictationResult:(id)arg1;
- (id)interactionIdentifier;
- (bool)isFallingBackToMonolingualDictation;
- (bool)isIgnoringDocumentChanges;
- (bool)isRecievingResults;
- (void)keyboardDismissed:(id)arg1;
- (id)keyboardInputModeToReturn;
- (id)language;
- (id)languageCodeForAssistantLanguageCode:(id)arg1;
- (id)lastCorrectionIdentifier;
- (id)lastHypothesis;
- (id)lastMessageKeyboardLanguage;
- (id)lastRecognitionText;
- (bool)localSpeechRecognitionForced;
- (void)logAlternativeSelected:(id)arg1 correctionIdentifier:(id)arg2 interactionIdentifier:(id)arg3;
- (bool)logAppEnterBackground;
- (void)logDidAcceptDictationResult:(id)arg1 reasonType:(unsigned long long)arg2;
- (void)logDidAcceptReplacement:(id)arg1 replacementLanguageCode:(id)arg2 originalText:(id)arg3 correctionIdentifier:(id)arg4 interactionIdentifier:(id)arg5;
- (void)markKeyboardDeleteMetricEvent;
- (void)markKeyboardDidReset;
- (void)markKeyboardInputMetricEvent;
- (id)modelInfo;
- (void)optInButtonPressedForPresenter:(id)arg1;
- (void)optOutButtonPressedForPresenter:(id)arg1;
- (void)overrideSmartLanguageSelection:(id)arg1;
- (id)pendingEdits;
- (void)performIgnoringDocumentChanges:(id /* block */)arg1;
- (bool)performingStreamingEditingOperation;
- (id)postfixTextForInputDelegate:(id)arg1;
- (id)prefixTextForInputDelegate:(id)arg1;
- (void)preheatIfNecessary;
- (void)presentAlertOfType:(long long)arg1 withCompletion:(id /* block */)arg2;
- (void)presentationControllerDidDismiss:(id)arg1;
- (id)previousHypothesis;
- (unsigned long long)reasonType;
- (void)releaseConnection;
- (void)releaseConnectionAfterDictationRequest;
- (void)releaseConnectionAfterStatisticsLogging;
- (void)restartDictationForTypeAndTalk;
- (struct __CFString { }*)resultTransformForLanguageModel:(id)arg1;
- (id)resultWithTrailingSpace:(id)arg1;
- (id)selectedTextForInputDelegate:(id)arg1;
- (bool)selectionEndWasInitiallyAtParagraphBoundaryForAsyncDelegate;
- (bool)selectionStartWasInitiallyAtParagraphBoundaryForAsyncDelegate;
- (void)setActivationIdentifier:(id)arg1;
- (void)setCurrentInputModeForDictation:(id)arg1;
- (void)setCurrentInstrumentationContext:(id)arg1;
- (void)setCurrentKeyboardPrimaryLanguage:(id)arg1;
- (void)setDetectedLanguage:(id)arg1;
- (void)setDictationInfoOnScreenNotifyKey:(bool)arg1;
- (void)setDictationInputMode:(id)arg1;
- (void)setDictationLanguages:(id)arg1;
- (void)setDictationPresenterWindow:(id)arg1;
- (void)setDictationPrivacySheetController:(id)arg1;
- (void)setDictationSourceType:(unsigned long long)arg1;
- (void)setDidToggleSoftwareKeyboardVisibleForDictation:(bool)arg1;
- (void)setDiscardNextHypothesis:(bool)arg1;
- (void)setFallbackDictationLanguage:(id)arg1;
- (void)setHasPostedInstrumentationDictationContext:(bool)arg1;
- (void)setHasPreheated:(bool)arg1;
- (void)setIgnoreFinalizePhrases:(bool)arg1;
- (void)setInitialCharacterAfterSelectionForAsyncDelegate:(unsigned short)arg1;
- (void)setInitialDictationLanguage:(id)arg1;
- (void)setInitialPreviousCharacterForAsyncDelegate:(unsigned short)arg1;
- (void)setInsertionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setInteractionIdentifier:(id)arg1;
- (void)setKeyboardInputModeToReturn:(id)arg1;
- (void)setLanguage:(id)arg1;
- (void)setLastCorrectionIdentifier:(id)arg1;
- (void)setLastHypothesis:(id)arg1;
- (void)setLastMessageKeyboardLanguage:(id)arg1;
- (void)setLastRecognitionText:(id)arg1;
- (void)setLocalSpeechRecognitionForced:(bool)arg1;
- (void)setLogAppEnterBackground:(bool)arg1;
- (void)setModelInfo:(id)arg1;
- (void)setPendingEdits:(id)arg1;
- (void)setPerformingStreamingEditingOperation:(bool)arg1;
- (void)setPreviousHypothesis:(id)arg1;
- (void)setReasonType:(unsigned long long)arg1;
- (void)setSelectionEndWasInitiallyAtParagraphBoundaryForAsyncDelegate:(bool)arg1;
- (void)setSelectionStartWasInitiallyAtParagraphBoundaryForAsyncDelegate:(bool)arg1;
- (void)setSmartLanguageSelectionOverrideLanguage:(id)arg1;
- (void)setState:(int)arg1;
- (void)setStateHandler:(unsigned long long)arg1;
- (void)setTargetHypothesis:(id)arg1;
- (void)setWantsAvailabilityMonitoringWhenAppActive:(bool)arg1;
- (void)setupForDictationStart;
- (void)setupForStreamingDictationStart;
- (void)setupToInsertResultForNewHypothesis:(id)arg1;
- (bool)shouldOverrideManualEndpointing;
- (bool)shouldPresentOptInAlert;
- (bool)shouldUseDictationSearchFieldBehavior;
- (void)showSoftwareKeyboardIfNeeded;
- (bool)smartLanguageSelectionOverridden;
- (id)smartLanguageSelectionOverrideLanguage;
- (void)startConnection;
- (void)startDictation;
- (void)startDictationForFileAtURL:(id)arg1 forInputModeIdentifier:(id)arg2;
- (void)startHelpMessageDisplay;
- (void)startRecordingLimitTimer;
- (int)state;
- (unsigned long long)stateHandler;
- (void)stopAndCancelDictationWithReasonType:(unsigned long long)arg1;
- (void)stopDictation;
- (void)stopDictation:(bool)arg1;
- (void)stopDictationByTimer;
- (void)stopDictationIgnoreFinalizePhrases;
- (void)stopHelpMessageDisplay;
- (id)streamingOperations;
- (bool)supportsDictationLanguage:(id)arg1 error:(id*)arg2;
- (bool)supportsInputMode:(id)arg1 error:(id*)arg2;
- (void)switchToDictationInputMode;
- (void)switchToDictationInputModeWithTouch:(id)arg1;
- (void)switchToDictationInputModeWithTouch:(id)arg1 withKeyboardInputMode:(id)arg2;
- (void)switchToDictationLanguage:(id)arg1;
- (id)targetHypothesis;
- (bool)wantsAvailabilityMonitoringWhenAppActive;

@end
