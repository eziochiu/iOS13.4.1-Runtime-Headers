/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
 */

@interface UIWindowScene : UIScene <DebugHierarchyObject_Fallback, _UIContextBinderContextCreationPolicyHolding, _UIFallbackEnvironment, _UISceneUIWindowHosting> {
    bool  __isKeyWindowScene;
    long long  _avkitRequestedOverscanCompensation;
    _UIContextBinder * _contextBinder;
    <UICoordinateSpace> * _coordinateSpace;
    bool  _didMakeKeyAndVisible;
    <_UIDisplayInfoProviding> * _displayEdgeInfoProvider;
    bool  _isPerformingSystemSnapshot;
    NSPointerArray * _keyWindowHistory;
    <_UISceneMetricsCalculating> * _metricsCalculator;
    UIScreen * _screen;
    long long  _screenRequestedOverscanCompensation;
    bool  _shouldDisableTouchCancellationOnRotation;
    UITraitCollection * _traitCollection;
    bool  _windowWasInitializedWithDefaultStoryboard;
}

@property (nonatomic, readonly) UIAlertControllerStackManager *_alertControllerStackManager;
@property (getter=_avkitRequestedOverscanCompensation, setter=_setAVKitRequestedOverscanCompensation:, nonatomic) long long _avkitRequestedOverscanCompensation;
@property (setter=_setBackgroundStyle:, nonatomic) long long _backgroundStyle;
@property (getter=_bannerManager, nonatomic, readonly) _UIBannerManager *_bannerManager;
@property (nonatomic, readonly) bool _canReceiveDeviceOrientationEvents;
@property (nonatomic, readonly) _UIContextBinder *_contextBinder;
@property (nonatomic, readonly) <UICoordinateSpace> *_coordinateSpace;
@property (nonatomic, readonly) _UICanvasDefinition *_definition;
@property (getter=_displayConfigurationRequest, setter=_setDisplayConfigurationRequest:, nonatomic, retain) FBSDisplayConfigurationRequest *_displayConfigurationRequest;
@property (nonatomic, readonly) <_UIDisplayInfoProviding> *_displayInfoProvider;
@property (nonatomic, readonly) long long _interfaceOrientation;
@property (nonatomic) bool _isKeyWindowScene;
@property (nonatomic, readonly) bool _isPerformingSystemSnapshot;
@property (nonatomic, readonly) UIWindow *_keyWindow;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _peripheryInsets;
@property (nonatomic, readonly) UIScreen *_screen;
@property (getter=_screenRequestedDisplayNativePixelSize, setter=_setScreenRequestedDisplayNativePixelSize:, nonatomic) struct CGSize { double x1; double x2; } _screenRequestedDisplayNativePixelSize;
@property (getter=_screenRequestedOverscanCompensation, setter=_setScreenRequestedOverscanCompensation:, nonatomic) long long _screenRequestedOverscanCompensation;
@property (nonatomic, readonly) _UISystemAppearanceManager *_systemAppearanceManager;
@property (nonatomic, readonly) UITraitCollection *_traitCollection;
@property (nonatomic, readonly) <UICoordinateSpace> *coordinateSpace;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) UIInputResponderController *inputResponderController;
@property (nonatomic, readonly) long long interfaceOrientation;
@property (getter=_keepContextAssociationInBackground, setter=_setKeepContextAssociationInBackground:, nonatomic) bool keepContextAssociationInBackground;
@property (getter=isKeyCanvas, nonatomic, readonly) bool keyCanvas;
@property (getter=_scene, nonatomic, readonly) FBSScene *scene;
@property (nonatomic, readonly) UIScreen *screen;
@property (nonatomic, readonly) UIScreenshotService *screenshotService;
@property (nonatomic, readonly) UISceneSizeRestrictions *sizeRestrictions;
@property (nonatomic, readonly) long long state;
@property (nonatomic, readonly) UIStatusBarManager *statusBarManager;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UITraitCollection *traitCollection;
@property (nonatomic, readonly) NSArray *windows;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (id)_canvasForScene:(id)arg1;
+ (id)_findNewKeyWindowSceneOnScreen:(id)arg1;
+ (bool)_hostsWindows;
+ (id)_keyWindowScene;
+ (id)_keyboardWindowSceneForScreen:(id)arg1 create:(bool)arg2;
+ (id)_placeholderWindowSceneForScreen:(id)arg1 create:(bool)arg2;
+ (void)_registerComponentClass:(Class)arg1 withKey:(id)arg2 predicate:(id)arg3;
+ (void)_setShouldRestoreKeyWindowSceneOnActivation:(bool)arg1;
+ (bool)_shouldRestoreKeyWindowSceneOnActivation;
+ (id)_unassociatedWindowSceneForScreen:(id)arg1 create:(bool)arg2;
+ (void)_updateVisibleSceneAndWindowOrderWithTest:(id /* block */)arg1;
+ (void)initialize;

- (void).cxx_destruct;
- (id)_alertControllerStackManager;
- (id)_allWindows;
- (id)_allWindowsIncludingInternalWindows:(bool)arg1 onlyVisibleWindows:(bool)arg2;
- (void)_applySnapshotSettings:(id)arg1 forActions:(id /* block */)arg2;
- (void)_attachWindow:(id)arg1;
- (long long)_avkitRequestedOverscanCompensation;
- (long long)_backgroundStyle;
- (id)_bannerManager;
- (bool)_canReceiveDeviceOrientationEvents;
- (id)_componentForKey:(id)arg1;
- (void)_computeMetrics:(bool)arg1;
- (void)_computeMetricsForWindows:(id)arg1 animated:(bool)arg2;
- (id)_contextBinder;
- (id)_coordinateSpace;
- (unsigned long long)_currentlySupportedInterfaceOrientations;
- (id)_definition;
- (void)_detachWindow:(id)arg1;
- (id)_disableTouchCancellationOnRotation;
- (id)_displayConfigurationRequest;
- (id)_displayInfoProvider;
- (void)_enumerateWindowsIncludingInternalWindows:(bool)arg1 onlyVisibleWindows:(bool)arg2 asCopy:(bool)arg3 stopped:(bool*)arg4 withBlock:(id /* block */)arg5;
- (id)_fallbackTraitCollection;
- (id)_fbsSceneLayerForWindow:(id)arg1;
- (id)_inheritingWindowsIncludingInvisible:(bool)arg1;
- (long long)_interfaceOrientation;
- (void)_invalidate;
- (void)_invalidateScreen;
- (bool)_isKeyWindowScene;
- (bool)_isPerformingSystemSnapshot;
- (bool)_keepContextAssociationInBackground;
- (id)_keyWindow;
- (void)_loadWindowWithStoryboardIfNeeded:(id)arg1;
- (void)_makeKeyAndVisibleIfNeeded;
- (bool)_needsMakeKeyAndVisible;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_peripheryInsets;
- (bool)_permitContextCreationForBindingDescription:(struct { id x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; })arg1;
- (void)_prepareForResume;
- (void)_prepareForSuspend;
- (void)_readySceneForConnection;
- (void)_recycleAttachmentForWindow:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_referenceBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_referenceBoundsForOrientation:(long long)arg1;
- (void)_registerComponent:(id)arg1 forKey:(id)arg2;
- (void)_registerSceneActionsHandler:(id)arg1 forKey:(id)arg2;
- (void)_registerSettingsDiffActions:(id)arg1 forKey:(id)arg2;
- (long long)_resolvedOverscanCompensation;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_safeAreaInsetsForInterfaceOrientation:(long long)arg1;
- (id)_scene;
- (id)_screen;
- (struct CGSize { double x1; double x2; })_screenRequestedDisplayNativePixelSize;
- (long long)_screenRequestedOverscanCompensation;
- (id)_screenshotServiceIfPresent;
- (void)_setAVKitRequestedOverscanCompensation:(long long)arg1;
- (void)_setAVKitRequestedRefreshRate:(double)arg1 HDRMode:(long long)arg2 overscanCompensation:(long long)arg3;
- (void)_setBackgroundStyle:(long long)arg1;
- (void)_setDisplayConfigurationRequest:(id)arg1;
- (void)_setKeepContextAssociationInBackground:(bool)arg1;
- (void)_setScreenRequestedDisplayNativePixelSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setScreenRequestedOverscanCompensation:(long long)arg1;
- (void)_setShouldDisableTouchCancellationOnRotation:(bool)arg1;
- (void)_setSystemVolumeHUDEnabled:(bool)arg1;
- (void)_setSystemVolumeHUDEnabled:(bool)arg1 forAudioCategory:(id)arg2;
- (void)_showProgressWhenFetchingUserActivityForTypes:(id)arg1;
- (id)_systemAppearanceManager;
- (double)_systemMinimumMargin;
- (id)_topVisibleWindowPassingTest:(id /* block */)arg1;
- (id)_traitCollection;
- (void)_unregisterComponentForKey:(id)arg1;
- (void)_unregisterSceneActionsHandler:(id)arg1;
- (void)_unregisterSettingsDiffActionsForKey:(id)arg1;
- (void)_updateClientSettingsToInterfaceOrientation:(long long)arg1 withAnimationDuration:(double)arg2;
- (void)_updateTraitCollection;
- (void)_updateVisibleWindowOrderWithTest:(id /* block */)arg1;
- (id)_visibleWindows;
- (void)_windowDidBecomeKey:(id)arg1;
- (bool)_windowIsFront:(id)arg1;
- (id)_windowSceneDelegate;
- (void)_windowUpdatedProperties:(id)arg1;
- (void)_windowUpdatedVisibility:(id)arg1;
- (bool)_windowsIgnoreSceneClientOrientation;
- (id)description;

// Image: /Developer/Library/PrivateFrameworks/DTDDISupport.framework/libViewDebuggerSupport.dylib

+ (id)fallback_debugHierarchyAdditionalGroupingIDs;
+ (id)fallback_debugHierarchyObjectsInGroupWithID:(id)arg1 onObject:(id)arg2 outOptions:(id*)arg3;
+ (id)fallback_debugHierarchyPropertyDescriptions;
+ (id)fallback_debugHierarchyValueForPropertyWithName:(id)arg1 onObject:(id)arg2 outOptions:(id*)arg3 outError:(id*)arg4;

// Image: /Developer/usr/lib/libMainThreadChecker.dylib

- (id)canvasToolbar;
- (id)coordinateSpace;
- (id)initWithSession:(id)arg1 connectionOptions:(id)arg2;
- (id)inputResponderController;
- (long long)interfaceOrientation;
- (bool)isKeyCanvas;
- (id)screen;
- (id)screenshotService;
- (void)set_isKeyWindowScene:(bool)arg1;
- (id)sizeRestrictions;
- (long long)state;
- (id)statusBarManager;
- (id)traitCollection;
- (id)windows;

// Image: /System/Library/Frameworks/AVKit.framework/AVKit

+ (bool)avkit_supportsInteractiveCounterRotationDismissals;

- (void)_avkit_setPreferredRefreshRate:(double)arg1 HDRMode:(long long)arg2 overscanCompensation:(long long)arg3;
- (id)avkit_asWindowScene;
- (void)avkit_disableTouchCancellation:(bool)arg1 forRotationActions:(id /* block */)arg2;
- (bool)avkit_screenHasWindowsExcludingWindow:(id)arg1;
- (long long)avkit_screenType;

// Image: /System/Library/Frameworks/SafariServices.framework/SafariServices

- (void)_sf_openTelURL:(id)arg1 completionHandler:(id /* block */)arg2;

@end
