/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHRecognizer : NSObject <CHRecognizing> {
    NSCharacterSet * _activeCharacterSet;
    CHRecognitionInsight * _activeRecognitionInsight;
    CHDrawing * _cachedDrawing;
    struct map<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { 
        struct __tree<std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, true> > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _cachedResults;
    struct map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > { 
        struct __tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _characterIDMap;
    void * _characterLanguageModel;
    void * _cjkDynamicLexicon;
    void * _cjkStaticLexicon;
    CHRecognizerConfiguration * _configuration;
    struct _LXLexicon { } * _customLexicon;
    CHCutpointModel * _cutpointModel;
    struct CHNeuralNetwork { int (*x1)(); bool x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; id x11; id x12; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_13_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_13_1_2; } x13; } * _engine;
    struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; } * _formatGrammarFST;
    struct CHNeuralNetwork { int (*x1)(); bool x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; id x11; id x12; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_13_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_13_1_2; } x13; } * _freeformEngine;
    void ** _icuTransliterator;
    void * _languageModel;
    unsigned long long  _lastCharacterSegmentCount;
    NSMutableIndexSet * _lastCharacterSegmentIndexes;
    NSURL * _learningDictionaryURL;
    void * _lmVocabulary;
    unsigned long long  _maxRecognitionResultCount;
    struct __Mecabra { } * _mecabra;
    struct CGSize { 
        double width; 
        double height; 
    }  _minimumDrawingSize;
    CHRecognitionInsightRequest * _nextRecognitionInsightRequest;
    struct _CFBurstTrie { } * _ovsTrie;
    CHPatternNetwork * _patternFST;
    struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; } * _radicalClusterFST;
    NSObject<OS_dispatch_queue> * _recognitionQueue;
    int  _recognitionType;
    bool  _saveDrawingUntilNextCandidateAccepted;
    CHDrawing * _savedDrawing;
    NSString * _savedTop1CandidateString;
    CHSpellChecker * _spellChecker;
    struct _LXLexicon { } * _staticLexicon;
    CHStrokeTransitionModel * _strokeTransitionModel;
    NSMutableDictionary * _textReplacementLowercasedKeyMapping;
    NSDictionary * _textReplacements;
    struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; } * _transliterationVariantMap;
    NSArray * _whitelistMecabraRareCharacters;
}

@property (nonatomic, retain) NSCharacterSet *activeCharacterSet;
@property (nonatomic, copy) CHDrawing *cachedDrawing;
@property (nonatomic) /* Warning: unhandled struct encoding: '{map<std::__1::set<long' */ struct  cachedResults; /* unknown property attribute:  true> >=Q}}} */
@property (nonatomic) /* Warning: unhandled struct encoding: '{map<unsigned int' */ struct  characterIDMap; /* unknown property attribute:  true> >=Q}}} */
@property (nonatomic) void*characterLanguageModel;
@property (nonatomic) void*cjkDynamicLexicon;
@property (nonatomic) void*cjkStaticLexicon;
@property (setter=_setConfiguration:, nonatomic, retain) CHRecognizerConfiguration *configuration;
@property (nonatomic) int contentType;
@property (nonatomic) struct _LXLexicon { }*customLexicon;
@property (nonatomic, retain) CHCutpointModel *cutpointModel;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct CHNeuralNetwork { int (*x1)(); bool x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; id x11; id x12; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_13_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_13_1_2; } x13; }*engine;
@property (nonatomic) /* Warning: unhandled struct encoding: '{Network={basic_string<char' */ struct *formatGrammarFST; /* unknown property attribute:  std::__1::less<NetworkEdgeIdentifier> >=Q}}}^IQ} */
@property (nonatomic) struct CHNeuralNetwork { int (*x1)(); bool x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; id x11; id x12; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_13_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_13_1_2; } x13; }*freeformEngine;
@property (readonly) unsigned long long hash;
@property (nonatomic) void**icuTransliterator;
@property (nonatomic) void*languageModel;
@property (nonatomic) unsigned long long lastCharacterSegmentCount;
@property (nonatomic, retain) NSMutableIndexSet *lastCharacterSegmentIndexes;
@property (nonatomic, retain) NSURL *learningDictionaryURL;
@property (nonatomic) void*lmVocabulary;
@property (nonatomic, copy) NSLocale *locale;
@property (nonatomic) unsigned long long maxRecognitionResultCount;
@property (nonatomic) struct __Mecabra { }*mecabra;
@property (nonatomic) struct CGSize { double x1; double x2; } minimumDrawingSize;
@property (nonatomic) struct _CFBurstTrie { }*ovsTrie;
@property (nonatomic, retain) CHPatternNetwork *patternFST;
@property (nonatomic) /* Warning: unhandled struct encoding: '{Network={basic_string<char' */ struct *radicalClusterFST; /* unknown property attribute:  std::__1::less<NetworkEdgeIdentifier> >=Q}}}^IQ} */
@property (nonatomic) int recognitionMode;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *recognitionQueue;
@property (nonatomic) int recognitionType;
@property (nonatomic, readonly) CHRecognitionInsight *recordedInsightFromLastRequest;
@property (nonatomic) bool saveDrawingUntilNextCandidateAccepted;
@property (nonatomic, copy) CHDrawing *savedDrawing;
@property (nonatomic, copy) NSString *savedTop1CandidateString;
@property (nonatomic) bool shouldEnableCachingIfAvailable;
@property (nonatomic, retain) CHSpellChecker *spellChecker;
@property (nonatomic) struct _LXLexicon { }*staticLexicon;
@property (nonatomic, retain) CHStrokeTransitionModel *strokeTransitionModel;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSMutableDictionary *textReplacementLowercasedKeyMapping;
@property (nonatomic, retain) NSDictionary *textReplacements;
@property (nonatomic) struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*transliterationVariantMap;

+ (double)_computeEditPenalizationFromString:(id)arg1 toReferenceString:(id)arg2 withSuffix:(id)arg3 withCaseSensitivity:(bool)arg4 withFirstLetterCaseSensitivity:(bool)arg5 withDiacriticSensitivity:(bool)arg6 withDiacriticsCharSet:(id)arg7 withConsumableStrokesCharSet:(id)arg8 outputSuffix:(id*)arg9 lexiconExtraCharacters:(id*)arg10 firstLetterCaseFlipped:(bool*)arg11;
+ (unsigned long long)_decodeTempDelayedSegmentID:(unsigned long long)arg1;
+ (unsigned long long)_encodeTempDelayedSegmentID:(unsigned long long)arg1;
+ (bool)_isLocaleSupported:(id)arg1 withMode:(int)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_addAlternativeCandidatesForTokenizedResult:(id)arg1;
- (void)_addEdgesFromCandidates:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; })arg1 toEdges:(struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x1; struct NetworkEdge {} *x2; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_3_1_1; } x3; }*)arg2 referenceEdge:(const struct NetworkEdge { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; double x5; double x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; struct vector<long, std::__1::allocator<long> > { long long *x_10_1_1; long long *x_10_1_2; struct __compressed_pair<long *, std::__1::allocator<long> > { long long *x_3_2_1; } x_10_1_3; } x10; }*)arg3 network:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg4 consumedSegmentCount:(long long)arg5 delayedSegmentIDs:(struct vector<long, std::__1::allocator<long> > { long long *x1; long long *x2; struct __compressed_pair<long *, std::__1::allocator<long> > { long long *x_3_1_1; } x3; })arg6 numSubstrokes:(long long)arg7;
- (void)_adjustCandidatesForChinesePunctuation:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1 segmentDrawing:(id)arg2 completeDrawing:(id)arg3;
- (void)_adjustCandidatesForConfusableCharacters:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1;
- (void)_adjustCandidatesForRomanPunctuation:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1 segmentDrawing:(id)arg2;
- (void)_adjustResultsForConfusableCharacters:(id)arg1;
- (id)_alternativeInterpretationsForString:(id)arg1;
- (id)_applySentenceTransliterationCandidates:(unsigned short*)arg1 codesLen:(int)arg2 codesMax:(int)arg3;
- (void)_applyTransliterationAndSyntheticCandidates:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1;
- (void)_cachingWithMatchingStrokeRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 drawing:(id)arg2;
- (void)_calculateBestTranscriptionPaths:(id*)arg1 scores:(id*)arg2 fromTokenizedResult:(id)arg3 pathCount:(long long)arg4 history:(id)arg5 skipLMRescoring:(bool)arg6;
- (double)_calculateJointWordLMScoreForString:(id)arg1 wordRanges:(id)arg2 wordIDs:(id)arg3 patternEntries:(id)arg4 history:(unsigned int*)arg5 historyLength:(unsigned long long)arg6;
- (double)_calculateJointWordLMScoreForTokenPath:(id)arg1 tokenizedResult:(id)arg2 history:(unsigned int*)arg3 historyLength:(unsigned long long)arg4 pathTranscription:(id*)arg5;
- (double)_candidateLatticePruningThresholdForEdgeType:(bool)arg1;
- (struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; })_candidateNetworkFromSegmentationNetwork:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 segmentGroup:(id)arg2 drawing:(id)arg3 boundsAtNode:(struct vector<CGRect, std::__1::allocator<CGRect> > { struct CGRect {} *x1; struct CGRect {} *x2; struct __compressed_pair<CGRect *, std::__1::allocator<CGRect> > { struct CGRect {} *x_3_1_1; } x3; }*)arg4 matchingStrokeRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 sortedSegmentIndexes:(struct vector<long, std::__1::allocator<long> > { long long *x1; long long *x2; struct __compressed_pair<long *, std::__1::allocator<long> > { long long *x_3_1_1; } x3; })arg6 shouldCancel:(id /* block */)arg7;
- (long long)_classifyEdgeDrawingsFromContexts:(id)arg1 allEdges:(struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x1; struct NetworkEdge {} *x2; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge {} *x_3_1_1; } x3; }*)arg2 segmentationNetwork:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg3 candidateNetwork:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg4 cachedEdgeSet:(struct set<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, std::__1::allocator<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > > > { struct __tree<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, std::__1::allocator<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg5 completeDrawing:(id)arg6 allowSmallerFinalBatch:(bool)arg7 shouldCancel:(id /* block */)arg8;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_computeLocalFrameWithLeftBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 rightBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 delayedStrokeDrawingsLocalBounds:(struct vector<CGRect, std::__1::allocator<CGRect> > { struct CGRect {} *x1; struct CGRect {} *x2; struct __compressed_pair<CGRect *, std::__1::allocator<CGRect> > { struct CGRect {} *x_3_1_1; } x3; }*)arg3 delayedStrokeDrawings:(id)arg4;
- (id)_contextTokenIDsFromHistory:(id)arg1 maxCharacterLength:(unsigned long long)arg2 maxTokenCount:(unsigned long long)arg3;
- (struct set<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })_correctedDelayedStrokeIDs:(const struct set<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg1 inDrawing:(id)arg2 segmentationPoints:(id)arg3 correctedSegmentationPoints:(id*)arg4;
- (unsigned int*)_createNetworkTruncatedPrefixStringUsingPrefix:(id)arg1 fullHistoryStringLength:(long long)arg2 hasLexiconCursor:(bool)arg3 prefixStringLength:(unsigned long long*)arg4 hasComplexChars:(bool*)arg5 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6;
- (id)_defaultLegacyPunctuationResultsWithStrokeCount:(unsigned long long)arg1;
- (id)_defaultPunctuationResultWithStrokeCount:(unsigned long long)arg1;
- (id)_defaultPunctuationStringsOutputScores:(id*)arg1 maxCandidateCount:(long long)arg2;
- (unsigned long long)_effectiveMaxRecognitionResultCount;
- (void)_filterNonHumanFriendlyCandidates:(id)arg1;
- (id)_historyStringFromRecognizerOptions:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_initialContextRectFromRecognizerOptions:(id)arg1;
- (bool)_isInappropriateLexiconEntry:(struct _LXEntry { }*)arg1;
- (bool)_isInappropriateString:(id)arg1;
- (bool)_isInappropriateString:(id)arg1 withLexicon:(struct _LXLexicon { }*)arg2;
- (bool)_isInappropriateString:(id)arg1 withTrie:(struct _CFBurstTrie { }*)arg2;
- (bool)_isLocaleSupported:(id)arg1;
- (id)_legacyTextRecognitionResultsForDrawing:(id)arg1 options:(id)arg2 shouldCancel:(id /* block */)arg3;
- (id)_lexiconCorrectionsForToken:(id)arg1 withLexicon:(struct _LXLexicon { }*)arg2 textReplacements:(id)arg3 consumableStrokesSet:(id)arg4 minimumTokenScore:(double)arg5 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 outBestTokenScore:(double*)arg7 shouldCapitalizeWord:(bool)arg8;
- (double)_lmRescoringWeightForPath:(id)arg1;
- (void)_loadMecabraIfNeeded;
- (unsigned long long)_mininmumPathCount;
- (void)_penalizeCandidatesForRomanPunctuation:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1 punctuationStrokeCount:(long long)arg2;
- (long long)_precedingSpaceBehaviorFromRecognizerOptions:(id)arg1;
- (id)_recognitionResultsForMultipleCharacterDrawing:(id)arg1 segmentGroups:(id)arg2 options:(id)arg3 shouldCancel:(id /* block */)arg4;
- (void)_refineCandidates:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1 withAllowedCandidateCodes:(const struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x1; unsigned int *x2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_1_1; } x3; }*)arg2;
- (void)_refineChineseCharacterCandidates:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1 drawing:(id)arg2;
- (void)_reloadEngineAndResources;
- (void)_removeOVSResults:(id)arg1 withHistory:(id)arg2;
- (void)_rescoreCandidatesWithLanguageModel:(struct vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x1; struct CHCandidateResult {} *x2; struct __compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> > { struct CHCandidateResult {} *x_3_1_1; } x3; }*)arg1 history:(id)arg2;
- (id)_resolvedStrokeIndexes:(id)arg1 segmentGroup:(id)arg2 segmentOffset:(long long)arg3 substrokeCount:(long long*)arg4;
- (id)_segmentWordRangesForSegments:(id)arg1;
- (void)_setConfiguration:(id)arg1;
- (void)_setupRecognitionInsightRecording;
- (bool)_shouldCapitalizeGivenHistory:(id)arg1;
- (bool)_shouldReturnDefaultResultsForDrawing:(id)arg1;
- (struct vector<long, std::__1::allocator<long> > { long long *x1; long long *x2; struct __compressed_pair<long *, std::__1::allocator<long> > { long long *x_3_1_1; } x3; })_sortedIndexesForSegmentGroup:(id)arg1 drawing:(id)arg2;
- (id)_spellCheckerCorrectionsForToken:(id)arg1;
- (struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned long long x_1_4_3; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; struct { unsigned char x_2_5_1; } x_2_4_2; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })_stringForCode:(unsigned int)arg1;
- (id)_textReplacementResultForLegacyRecognitionResult:(id)arg1;
- (id)_textResultWithLexiconExpansionFromCandidateNetwork:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 history:(id)arg2 prefix:(id)arg3 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 rootStaticCursor:(struct _LXCursor { }*)arg5 rootCustomCursor:(struct _LXCursor { }*)arg6 rootPatternCursor:(id)arg7 segmentGroup:(id)arg8 maxRecognitionResultCount:(unsigned long long)arg9 precedingSpaceBehavior:(long long)arg10 shouldPerformNoSpaceRecognition:(bool)arg11 inLatticePaths:(struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg12 outLatticePaths:(struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg13 totalStrokeCount:(long long)arg14 totalSubstrokeCount:(long long)arg15 shouldCancel:(id /* block */)arg16;
- (id)_textResultWithNetworkComposeFromCandidateNetwork:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 segmentGroup:(id)arg2 drawing:(id)arg3 maxRecognitionResultCount:(unsigned long long)arg4 history:(id)arg5 totalStrokeCount:(long long)arg6 totalSubstrokeCount:(long long)arg7;
- (id)_tokenFromLegacyResult:(id)arg1 wordIndex:(unsigned long long)arg2 strokeSet:(id)arg3 substrokeCount:(long long)arg4;
- (unsigned int)_tokenIDForUNKCharacterString:(id)arg1;
- (id)_tokenizedTextRecognitionResultForDrawing:(id)arg1 options:(id)arg2 shouldCancel:(id /* block */)arg3;
- (id)_tokenizedTextResultFromResults:(id)arg1 segmentGroup:(id)arg2 offsetSegment:(long long)arg3 decodedStrokeSets:(bool)arg4 spaceBehavior:(long long)arg5;
- (id)_tokensUsingLMTokenizerForString:(id)arg1 wordRanges:(id)arg2 nonWordPatterns:(id)arg3 outTokenIDs:(id*)arg4;
- (id)_transliterationVariantsForString:(id)arg1;
- (void)_unloadEngineAndResources;
- (bool)_updateResults:(id)arg1 string:(id)arg2 score:(double)arg3 recognitionScore:(double)arg4 lexicalEntry:(bool)arg5 patternEntry:(bool)arg6 isInappropriateWord:(bool)arg7 wordID:(unsigned int)arg8 wordStrokeSet:(id)arg9;
- (id)activeCharacterSet;
- (id)bestPathsFromNetwork:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 pathCount:(unsigned long long)arg2 staticLexiconCursor:(struct _LXCursor { }*)arg3 customLexiconCursor:(struct _LXCursor { }*)arg4 patternCursor:(id)arg5 history:(id)arg6 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg7 mecabraIDs:(struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)arg8 segmentGroup:(id)arg9 precedingSpaceBehavior:(long long)arg10 effectiveContentType:(int)arg11 shouldAllowSpaceInsertion:(bool)arg12 inLatticePaths:(struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg13 outLatticePaths:(struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg14 totalStrokeCount:(long long)arg15 totalSubstrokeCount:(long long)arg16;
- (id)bestTranscriptionPathsForTokenizedResult:(id)arg1 scores:(id*)arg2 history:(id)arg3;
- (id)cachedDrawing;
- (struct map<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree<std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })cachedResults;
- (void)candidateAccepted:(void*)arg1;
- (void)candidatesCleared;
- (struct map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > { struct __tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })characterIDMap;
- (void*)characterLanguageModel;
- (id)characterSetForStrings:(id)arg1;
- (id)chatBubbleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void*)cjkDynamicLexicon;
- (void*)cjkStaticLexicon;
- (struct vector<const void *, std::__1::allocator<const void *> > { void **x1; void **x2; struct __compressed_pair<const void **, std::__1::allocator<const void *> > { void **x_3_1_1; } x3; })completionsForCandidate:(id)arg1 candidateContext:(id)arg2 prefix:(id)arg3 option:(unsigned long long)arg4;
- (struct vector<const void *, std::__1::allocator<const void *> > { void **x1; void **x2; struct __compressed_pair<const void **, std::__1::allocator<const void *> > { void **x_3_1_1; } x3; })completionsForCandidate:(id)arg1 prefix:(id)arg2 option:(unsigned long long)arg3;
- (id)configuration;
- (int)contentType;
- (struct _LXLexicon { }*)customLexicon;
- (id)cutpointModel;
- (void)dealloc;
- (id)ellipseCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void)endpointsForDrawing:(id)arg1 startLocation:(struct CGPoint { double x1; double x2; }*)arg2 endLocation:(struct CGPoint { double x1; double x2; }*)arg3;
- (struct CHNeuralNetwork { int (*x1)(); bool x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; id x11; id x12; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_13_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_13_1_2; } x13; }*)engine;
- (struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)formatGrammarFST;
- (struct CHNeuralNetwork { int (*x1)(); bool x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; id x11; id x12; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_13_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_13_1_2; } x13; }*)freeformEngine;
- (void**)icuTransliterator;
- (id)initWithMode:(int)arg1 locale:(id)arg2;
- (id)initWithMode:(int)arg1 locale:(id)arg2 learningDictionaryURL:(id)arg3;
- (id)initWithType:(int)arg1 mode:(int)arg2;
- (id)initWithType:(int)arg1 mode:(int)arg2 learningDictionaryURL:(id)arg3;
- (id)initWithType:(int)arg1 mode:(int)arg2 locale:(struct __CFLocale { }*)arg3;
- (id)initWithType:(int)arg1 mode:(int)arg2 locale:(struct __CFLocale { }*)arg3 learningDictionaryURL:(id)arg4;
- (bool)isOVSString:(id)arg1;
- (bool)isRareChineseEntry:(id)arg1;
- (void*)languageModel;
- (unsigned long long)lastCharacterSegmentCount;
- (id)lastCharacterSegmentIndexes;
- (id)learningDictionaryURL;
- (id)lineCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2 rejectionResult:(id*)arg3;
- (void*)lmVocabulary;
- (id)locale;
- (void)logCandidateIfAppropriate:(void*)arg1;
- (id)manhattanLineCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2 rejectionResult:(id*)arg3;
- (unsigned long long)maxRecognitionResultCount;
- (struct __Mecabra { }*)mecabra;
- (id)mecabraRareWordIndexes:(id)arg1 wordRanges:(id)arg2;
- (struct CGSize { double x1; double x2; })minimumDrawingSize;
- (unsigned int)normalizeLMTokenIDForWord:(id)arg1 withTokenID:(unsigned int)arg2 isFromPattern:(bool)arg3 outScore:(double*)arg4;
- (id)obfuscateString:(id)arg1;
- (id)outlineArrowCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (struct _CFBurstTrie { }*)ovsTrie;
- (id)patternFST;
- (id)pentagonCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)radicalClusterFST;
- (int)recognitionMode;
- (id)recognitionQueue;
- (id)recognitionResultsForDrawing:(id)arg1 options:(id)arg2;
- (id)recognitionResultsForDrawing:(id)arg1 options:(id)arg2 shouldCancel:(id /* block */)arg3;
- (id)recognitionResultsForSingleCharacterDrawing:(id)arg1 segmentGroup:(id)arg2 options:(id)arg3 history:(id)arg4;
- (id)recognitionResultsForSketchDrawing:(id)arg1 options:(id)arg2;
- (int)recognitionType;
- (void)recordInsightWithRequest:(id)arg1;
- (id)recordedInsightFromLastRequest;
- (id)rectangleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (bool)saveDrawingUntilNextCandidateAccepted;
- (id)savedDrawing;
- (id)savedTop1CandidateString;
- (id)segmentationPointsForDrawing:(id)arg1;
- (void)setActiveCharacterSet:(id)arg1;
- (void)setCachedDrawing:(id)arg1;
- (void)setCachedResults:(struct map<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree<std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::__value_type<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<long, std::__1::less<long>, std::__1::allocator<long> > >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg1;
- (void)setCharacterIDMap:(struct map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > { struct __tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg1;
- (void)setCharacterLanguageModel:(void*)arg1;
- (void)setCjkDynamicLexicon:(void*)arg1;
- (void)setCjkStaticLexicon:(void*)arg1;
- (void)setContentType:(int)arg1;
- (void)setCustomLexicon:(struct _LXLexicon { }*)arg1;
- (void)setCustomLexicon:(struct _LXLexicon { }*)arg1 customVocabulary:(void*)arg2;
- (void)setCutpointModel:(id)arg1;
- (void)setEngine:(struct CHNeuralNetwork { int (*x1)(); bool x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; id x11; id x12; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_13_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_13_1_2; } x13; }*)arg1;
- (void)setFormatGrammarFST:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1;
- (void)setFreeformEngine:(struct CHNeuralNetwork { int (*x1)(); bool x2; char *x3; unsigned long long x4; unsigned int *x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; id x11; id x12; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_13_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_13_1_2; } x13; }*)arg1;
- (void)setIcuTransliterator:(void**)arg1;
- (void)setLanguageModel:(void*)arg1;
- (void)setLastCharacterSegmentCount:(unsigned long long)arg1;
- (void)setLastCharacterSegmentIndexes:(id)arg1;
- (void)setLearningDictionaryURL:(id)arg1;
- (void)setLmVocabulary:(void*)arg1;
- (void)setLocale:(id)arg1;
- (void)setMaxRecognitionResultCount:(unsigned long long)arg1;
- (void)setMecabra:(struct __Mecabra { }*)arg1;
- (void)setMinimumDrawingSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setOvsTrie:(struct _CFBurstTrie { }*)arg1;
- (void)setPatternFST:(id)arg1;
- (void)setRadicalClusterFST:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1;
- (void)setRecognitionMode:(int)arg1;
- (void)setRecognitionQueue:(id)arg1;
- (void)setRecognitionType:(int)arg1;
- (void)setSaveDrawingUntilNextCandidateAccepted:(bool)arg1;
- (void)setSavedDrawing:(id)arg1;
- (void)setSavedTop1CandidateString:(id)arg1;
- (void)setShouldEnableCachingIfAvailable:(bool)arg1;
- (void)setSpellChecker:(id)arg1;
- (void)setStaticLexicon:(struct _LXLexicon { }*)arg1;
- (void)setStrokeTransitionModel:(id)arg1;
- (void)setTextReplacementLowercasedKeyMapping:(id)arg1;
- (void)setTextReplacements:(id)arg1;
- (void)setTransliterationVariantMap:(struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)arg1;
- (bool)shouldEnableCachingIfAvailable;
- (id)sketchCodeForDescription:(id)arg1;
- (id)sketchDescriptionForCode:(int)arg1;
- (id)spellChecker;
- (id)starCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (struct _LXLexicon { }*)staticLexicon;
- (id)strokeIndexesForLastCharacter;
- (id)strokeTransitionModel;
- (id)supportedCharacterSet;
- (id)supportedStrings;
- (id)textRecognitionResultForDrawing:(id)arg1 options:(id)arg2 shouldCancel:(id /* block */)arg3;
- (id)textReplacementLowercasedKeyMapping;
- (id)textReplacements;
- (id)tokenizedTextResultForChineseLatticePaths:(const struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg1 maximumPathCount:(unsigned long long)arg2 network:(struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; unsigned long long x2; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_1_1; struct NetworkNode {} *x_3_1_2; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode {} *x_3_2_1; } x_3_1_3; } x3; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg3 mecabraIDs:(struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)arg4 startNode:(long long)arg5 endNode:(long long)arg6 segmentGroup:(id)arg7;
- (id)tokenizedTextResultForRomanLatticePaths:(const struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg1 history:(id)arg2 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 isMultiWordsPath:(bool)arg4 isNoSpacePath:(bool)arg5 maximumPathCount:(unsigned long long)arg6 startNode:(long long)arg7 segmentGroup:(id)arg8 precedingSpaceBehavior:(long long)arg9 totalStrokeCount:(long long)arg10 totalSubstrokeCount:(long long)arg11;
- (id)tokenizedTextResultForRomanMultiWordsLatticePaths:(const struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg1 maximumResultCount:(unsigned long long)arg2 history:(id)arg3 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 startNode:(long long)arg5 segmentGroup:(id)arg6 precedingSpaceBehavior:(long long)arg7;
- (id)tokenizedTextResultForRomanNoSpaceLatticePaths:(const struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg1 maximumResultCount:(unsigned long long)arg2 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 precedingSpaceBehavior:(long long)arg4 totalStrokeCount:(long long)arg5 totalSubstrokeCount:(long long)arg6;
- (id)tokenizedTextResultForRomanSingleWordLatticePaths:(const struct vector<LatticePath, std::__1::allocator<LatticePath> > { struct LatticePath {} *x1; struct LatticePath {} *x2; struct __compressed_pair<LatticePath *, std::__1::allocator<LatticePath> > { struct LatticePath {} *x_3_1_1; } x3; }*)arg1 history:(id)arg2 activeHistoryRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 startNode:(long long)arg4 segmentGroup:(id)arg5;
- (struct VariantMap { int *x1; int *x2; int *x3; int x4; int *x5; unsigned long long x6; }*)transliterationVariantMap;
- (id)transliterationVariantsForString:(id)arg1;
- (id)triangleCandidateResultForDrawing:(id)arg1 candidate:(struct CHCandidateResult { unsigned int x1; float x2; }*)arg2;
- (void)updateAddressBookLexicon:(id)arg1;
- (void)updateMecabraWithRegionalOTAAssets:(id)arg1 nonRegionalOTAAssets:(id)arg2;
- (void)updateUserDictionaryLexicon:(id)arg1;
- (id)whitelistMecabraRareCharacters;

@end
