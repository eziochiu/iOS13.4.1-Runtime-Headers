/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHDrawing : NSObject <NSCopying, NSSecureCoding> {
    struct CHDrawingStrokes { 
        struct vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { 
            struct vector<double, std::__1::allocator<double> > {} *__begin_; 
            struct vector<double, std::__1::allocator<double> > {} *__end_; 
            struct __compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { 
                struct vector<double, std::__1::allocator<double> > {} *__value_; 
            } __end_cap_; 
        } strokeBounds; 
        struct vector<bool, std::__1::allocator<bool> > { 
            unsigned long long *__begin_; 
            unsigned long long __size_; 
            struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long> > { 
                unsigned long long __value_; 
            } __cap_alloc_; 
        } strokeBoundsValidity; 
        struct vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { 
            struct vector<double, std::__1::allocator<double> > {} *__begin_; 
            struct vector<double, std::__1::allocator<double> > {} *__end_; 
            struct __compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { 
                struct vector<double, std::__1::allocator<double> > {} *__value_; 
            } __end_cap_; 
        } strokes; 
        long long currentStrokeIndex; 
        unsigned int mSize; 
        struct Matrix<double> { 
            int (**_vptr$Matrix)(); 
            double *_data; 
            unsigned int _w; 
            unsigned int _h; 
        } bitmap; 
        double lineHeight; 
        struct vector<int, std::__1::allocator<int> > { 
            int *__begin_; 
            int *__end_; 
            struct __compressed_pair<int *, std::__1::allocator<int> > { 
                int *__value_; 
            } __end_cap_; 
        } sparseBitmap; 
    }  _drawing;
}

@property (nonatomic) /* Warning: unhandled struct encoding: '{CHDrawingStrokes={vector<std::__1::vector<double' */ struct  drawing; /* unknown property attribute:  std::__1::allocator<int> >=^i}}} */

+ (bool)supportsSecureCoding;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)appendSegment:(id)arg1 fromDrawing:(id)arg2;
- (double)averageCharacterHeightEstimation:(double)arg1 minChunkHeight:(double)arg2;
- (struct Matrix<float> { int (**x1)(); float *x2; unsigned int x3; unsigned int x4; })bitmapRepresentationForSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingBoxForDrawingSegmentFromCutPoint:(id)arg1 toCutPoint:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (void)clear;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)debugQuickLookObject;
- (id)description;
- (struct CHDrawingStrokes { struct vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { struct vector<double, std::__1::allocator<double> > {} *x_1_1_1; struct vector<double, std::__1::allocator<double> > {} *x_1_1_2; struct __compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { struct vector<double, std::__1::allocator<double> > {} *x_3_2_1; } x_1_1_3; } x1; struct vector<bool, std::__1::allocator<bool> > { unsigned long long *x_2_1_1; unsigned long long x_2_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long x_3_2_1; } x_2_1_3; } x2; struct vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { struct vector<double, std::__1::allocator<double> > {} *x_3_1_1; struct vector<double, std::__1::allocator<double> > {} *x_3_1_2; struct __compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { struct vector<double, std::__1::allocator<double> > {} *x_3_2_1; } x_3_1_3; } x3; })drawing;
- (id)drawingScaledByFactor:(double)arg1;
- (id)drawingSpatiallyResampled:(double)arg1 outputPointMap:(struct vector<std::__1::map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > >, std::__1::allocator<std::__1::map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > > > { struct map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > {} *x1; struct map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > {} *x2; struct __compressed_pair<std::__1::map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > *, std::__1::allocator<std::__1::map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > > > { struct map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > {} *x_3_1_1; } x3; }*)arg2;
- (id)drawingWithStrokesFromIndexSet:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)endStroke;
- (id)filterPointsWithProximity:(double)arg1 fixedPoints:(id)arg2 points:(id)arg3;
- (id)findLocalYMaximaWithWindowSize:(unsigned long long)arg1 excludingStrokes:(struct set<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg2;
- (id)findSignalCutPointsExcludingStrokes:(struct set<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg1;
- (unsigned long long)hash;
- (id)indexesOfStrokesSmallerThanSize:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfXYString:(id)arg1;
- (id)initialSegmentationPointIndicesForDrawing;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToDrawing:(id)arg1;
- (bool)isPrefixForDrawing:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })matchingStrokePrefixRangeForDrawing:(id)arg1;
- (struct Matrix<float> { int (**x1)(); float *x2; unsigned int x3; unsigned int x4; })orientationRepresentationForSampling:(unsigned long long)arg1 convolutionWidth:(unsigned long long)arg2;
- (unsigned long long)pointCount;
- (unsigned long long)pointCountForStrokeIndex:(unsigned long long)arg1;
- (struct CGPoint { double x1; double x2; })pointForStrokeIndex:(unsigned long long)arg1 pointIndex:(unsigned long long)arg2;
- (void)setDrawing:(struct CHDrawingStrokes { struct vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { struct vector<double, std::__1::allocator<double> > {} *x_1_1_1; struct vector<double, std::__1::allocator<double> > {} *x_1_1_2; struct __compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { struct vector<double, std::__1::allocator<double> > {} *x_3_2_1; } x_1_1_3; } x1; struct vector<bool, std::__1::allocator<bool> > { unsigned long long *x_2_1_1; unsigned long long x_2_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long x_3_2_1; } x_2_1_3; } x2; struct vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { struct vector<double, std::__1::allocator<double> > {} *x_3_1_1; struct vector<double, std::__1::allocator<double> > {} *x_3_1_2; struct __compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { struct vector<double, std::__1::allocator<double> > {} *x_3_2_1; } x_3_1_3; } x3; })arg1;
- (void)setLineHeight:(double)arg1;
- (id)sortedDrawingUsingMinXCoordinate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })strokeBoundsAtIndex:(unsigned long long)arg1;
- (unsigned long long)strokeCount;
- (struct vector<long, std::__1::allocator<long> > { long long *x1; long long *x2; struct __compressed_pair<long *, std::__1::allocator<long> > { long long *x_3_1_1; } x3; })strokeIndicesSortedByMinXCoordinate;
- (id)xyRepresentation;

@end
