/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHCutpointModel : CHRecurrentNeuralNetwork {
    long long  _cosAngleLeftFeatureIndex;
    long long  _cosAngleRightFeatureIndex;
    NSString * _cutpointProbabilityOutputName;
    NSString * _directionalFeaturesInputName;
    long long  _distanceLeftFeatureIndex;
    long long  _distanceRightFeatureIndex;
    long long  _endpointFeatureIndex;
    long long  _sinAngleLeftFeatureIndex;
    long long  _sinAngleRightFeatureIndex;
}

@property (nonatomic, readonly) long long cosAngleLeftFeatureIndex;
@property (nonatomic, readonly) long long cosAngleRightFeatureIndex;
@property (nonatomic, readonly, retain) NSString *cutpointProbabilityOutputName;
@property (nonatomic, readonly, retain) NSString *directionalFeaturesInputName;
@property (nonatomic, readonly) long long distanceLeftFeatureIndex;
@property (nonatomic, readonly) long long distanceRightFeatureIndex;
@property (nonatomic, readonly) long long endpointFeatureIndex;
@property (nonatomic, readonly) long long sinAngleLeftFeatureIndex;
@property (nonatomic, readonly) long long sinAngleRightFeatureIndex;

- (struct vector<CHCutpointCandidate, std::__1::allocator<CHCutpointCandidate> > { struct CHCutpointCandidate {} *x1; struct CHCutpointCandidate {} *x2; struct __compressed_pair<CHCutpointCandidate *, std::__1::allocator<CHCutpointCandidate> > { struct CHCutpointCandidate {} *x_3_1_1; } x3; })_detectedCutpoints:(struct vector<double, std::__1::allocator<double> > { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_1_1; } x3; }*)arg1 resampledDrawing:(id)arg2;
- (struct vector<float, std::__1::allocator<float> > { float *x1; float *x2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_1_1; } x3; })_extractFeaturesFromDrawing:(id)arg1 inputName:(id)arg2 interpointDistance:(double)arg3 error:(id*)arg4;
- (id)_remappedCutpoints:(struct vector<CHCutpointCandidate, std::__1::allocator<CHCutpointCandidate> > { struct CHCutpointCandidate {} *x1; struct CHCutpointCandidate {} *x2; struct __compressed_pair<CHCutpointCandidate *, std::__1::allocator<CHCutpointCandidate> > { struct CHCutpointCandidate {} *x_3_1_1; } x3; }*)arg1 pointMap:(struct vector<std::__1::map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > >, std::__1::allocator<std::__1::map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > > > { struct map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > {} *x1; struct map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > {} *x2; struct __compressed_pair<std::__1::map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > *, std::__1::allocator<std::__1::map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > > > { struct map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long> > > {} *x_3_1_1; } x3; }*)arg2 originalDrawing:(id)arg3 excludingStrokeIDs:(const struct set<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg4;
- (long long)cosAngleLeftFeatureIndex;
- (long long)cosAngleRightFeatureIndex;
- (id)cutpointProbabilityOutputName;
- (void)dealloc;
- (id)detectCutpointsInDrawing:(id)arg1 minimumDrawingSize:(struct CGSize { double x1; double x2; })arg2 excludingStrokeIDs:(const struct set<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg3;
- (id)directionalFeaturesInputName;
- (long long)distanceLeftFeatureIndex;
- (long long)distanceRightFeatureIndex;
- (long long)endpointFeatureIndex;
- (id)initWithModelName:(id)arg1;
- (long long)maxSequenceLength;
- (long long)sinAngleLeftFeatureIndex;
- (long long)sinAngleRightFeatureIndex;
- (long long)windowOverlap;

@end
