/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting
 */

@interface CHStrokeTransitionModel : CHRecurrentNeuralNetwork {
    NSString * _charBoundaryProbabilityOutputName;
    long long  _cosAlphaFeatureIndex;
    NSString * _delayedStrokeProbabilityOutputName;
    NSString * _directionalFeaturesInputName;
    long long  _distanceFeatureIndex;
    long long  _gapFeatureIndex;
    long long  _sinAlphaFeatureIndex;
    NSString * _spaceProbabilityOutputName;
}

@property (nonatomic, readonly, retain) NSString *charBoundaryProbabilityOutputName;
@property (nonatomic, readonly) long long cosAlphaFeatureIndex;
@property (nonatomic, readonly, retain) NSString *delayedStrokeProbabilityOutputName;
@property (nonatomic, readonly, retain) NSString *directionalFeaturesInputName;
@property (nonatomic, readonly) long long distanceFeatureIndex;
@property (nonatomic, readonly) long long gapFeatureIndex;
@property (nonatomic, readonly) long long sinAlphaFeatureIndex;
@property (nonatomic, readonly, retain) NSString *spaceProbabilityOutputName;

- (struct vector<float, std::__1::allocator<float> > { float *x1; float *x2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_1_1; } x3; })_extractFeaturesFromDrawing:(id)arg1 inputName:(id)arg2 interpointDistance:(double)arg3 error:(id*)arg4;
- (id)charBoundaryProbabilityOutputName;
- (bool)classifyStrokesInDrawing:(id)arg1 minimumDrawingSize:(struct CGSize { double x1; double x2; })arg2 outDelayedStrokeProbabilities:(struct vector<double, std::__1::allocator<double> > { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_1_1; } x3; }*)arg3 outSpaceProbabilities:(struct vector<double, std::__1::allocator<double> > { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_1_1; } x3; }*)arg4 outCharBoundaryProbabilities:(struct vector<double, std::__1::allocator<double> > { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_1_1; } x3; }*)arg5;
- (long long)cosAlphaFeatureIndex;
- (void)dealloc;
- (id)delayedStrokeProbabilityOutputName;
- (struct set<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree<long, std::__1::less<long>, std::__1::allocator<long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })detectedDelayedStrokes:(const struct vector<double, std::__1::allocator<double> > { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_1_1; } x3; }*)arg1;
- (id)directionalFeaturesInputName;
- (long long)distanceFeatureIndex;
- (long long)gapFeatureIndex;
- (id)initWithModelName:(id)arg1;
- (long long)maxSequenceLength;
- (long long)sinAlphaFeatureIndex;
- (id)spaceProbabilityOutputName;
- (long long)windowOverlap;

@end
