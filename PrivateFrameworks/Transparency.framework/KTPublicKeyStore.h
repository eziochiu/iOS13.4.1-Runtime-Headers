/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/Transparency.framework/Transparency
 */

@interface KTPublicKeyStore : NSObject {
    NSDictionary * _applicationKeyStores;
    NSArray * _applications;
    TransparencyManagedDataStore * _dataStore;
    bool  _forceRefresh;
}

@property (retain) NSDictionary *applicationKeyStores;
@property (retain) NSArray *applications;
@property (retain) TransparencyManagedDataStore *dataStore;
@property bool forceRefresh;
@property (readonly) bool ready;

- (void).cxx_destruct;
- (id)applicationKeyStores;
- (id)applications;
- (void)clearApplicationState:(id)arg1 error:(id*)arg2;
- (bool)clearDiskApplicationKeyStore:(id)arg1 error:(id*)arg2;
- (void)configureWithClient:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)configureWithClient:(id)arg1 ignoreCachedKeys:(bool)arg2 completionHandler:(id /* block */)arg3;
- (bool)configureWithDisk:(id*)arg1;
- (id)copyKeyStoreState;
- (id)copyMetadata;
- (id)createApplicationKeyStore:(id)arg1 keyStoreData:(id)arg2 error:(id*)arg3;
- (id)createApplicationKeyStore:(id)arg1 keyStoreResponse:(id)arg2 error:(id*)arg3;
- (id)dataStore;
- (void)fetchKeyStore:(id)arg1 application:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)forceRefresh;
- (bool)hasApplicationPublicKeyStoreOnDisk:(id)arg1 error:(id*)arg2;
- (id)initWithDataStore:(id)arg1;
- (id)readPublicKeyStoreFromDisk:(id*)arg1;
- (bool)ready;
- (bool)saveDiskApplicationKeyStore:(id)arg1 error:(id*)arg2;
- (void)setApplicationKeyStores:(id)arg1;
- (void)setApplications:(id)arg1;
- (void)setDataStore:(id)arg1;
- (void)setForceRefresh:(bool)arg1;
- (bool)writePublicKeyStoreToDisk:(id)arg1 error:(id*)arg2;

@end
