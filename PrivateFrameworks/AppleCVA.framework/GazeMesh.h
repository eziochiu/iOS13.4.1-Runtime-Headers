/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/AppleCVA.framework/AppleCVA
 */

@interface GazeMesh : NSObject {
    struct vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >="__value_"^ {}  _eyeOffsets;
    struct vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >="__value_"^ {}  _eyeOffsetsGeneric;
    struct vector<int, std::__1::allocator<int> > { 
        int *__begin_; 
        int *__end_; 
        struct __compressed_pair<int *, std::__1::allocator<int> > { 
            int *__value_; 
        } __end_cap_; 
    }  _eyeRegionIndices;
    struct vector<int, std::__1::allocator<int> > { 
        int *__begin_; 
        int *__end_; 
        struct __compressed_pair<int *, std::__1::allocator<int> > { 
            int *__value_; 
        } __end_cap_; 
    }  _eyeRegionTriangles;
    NSDictionary * _faceKitSemantics;
    struct vector<unsigned int, std::__1::allocator<unsigned int> > { 
        unsigned int *__begin_; 
        unsigned int *__end_; 
        struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { 
            unsigned int *__value_; 
        } __end_cap_; 
    }  _landmarkIds;
    struct vector<float, std::__1::allocator<float> > { 
        float *__begin_; 
        float *__end_; 
        struct __compressed_pair<float *, std::__1::allocator<float> > { 
            float *__value_; 
        } __end_cap_; 
    }  _landmarkWeights;
    struct vector<float, std::__1::allocator<float> > { 
        float *__begin_; 
        float *__end_; 
        struct __compressed_pair<float *, std::__1::allocator<float> > { 
            float *__value_; 
        } __end_cap_; 
    }  _previousIdentityCoefficients;
    struct shared_ptr<const shrek::IdentityTensor> { 
        struct IdentityTensor {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _tensorModel;
    int  _triangleCount;
    struct vector<int, std::__1::allocator<int> > { 
        int *__begin_; 
        int *__end_; 
        struct __compressed_pair<int *, std::__1::allocator<int> > { 
            int *__value_; 
        } __end_cap_; 
    }  _triangles;
    int  _vertexCount;
    struct vector<float, std::__1::allocator<float> > { 
        float *__begin_; 
        float *__end_; 
        struct __compressed_pair<float *, std::__1::allocator<float> > { 
            float *__value_; 
        } __end_cap_; 
    }  _vertexWeightsEyes;
    struct vector<float, std::__1::allocator<float> > { 
        float *__begin_; 
        float *__end_; 
        struct __compressed_pair<float *, std::__1::allocator<float> > { 
            float *__value_; 
        } __end_cap_; 
    }  _vertexWeightsFace;
    const float * _verticesNeutral;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<float __attribute__((ext_vector_type(3)))' */ struct  eyeOffsets; /* unknown property attribute:  std::__1::allocator<float __attribute__((ext_vector_type(3)))> >=^}} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<unsigned int' */ struct  landmarkIds; /* unknown property attribute:  std::__1::allocator<unsigned int> >=^I}} */
@property (nonatomic, readonly) NSArray *landmarkNames;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<float' */ struct  landmarkWeights; /* unknown property attribute:  std::__1::allocator<float> >=^f}} */
@property (nonatomic, readonly) int triangleCount;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<int' */ struct  triangles; /* unknown property attribute:  std::__1::allocator<int> >=^i}} */
@property (nonatomic, readonly) int vertexCount;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<float' */ struct  vertexWeightsEyes; /* unknown property attribute:  std::__1::allocator<float> >=^f}} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<float' */ struct  vertexWeightsFace; /* unknown property attribute:  std::__1::allocator<float> >=^f}} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)checkIdentityChangedWithIdentityCoefficients:(const float*)arg1;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })computeBoundBoxToModelWithVertices:(const struct array<float, 3> { float x1[3]; }*)arg1;
- (bool)computeEyeOffsetsWithResourceDir:(id)arg1;
- (void)computeMeshCenterWithVertices:(const struct array<float, 3> { float x1[3]; }*)arg1;
- (void)computeVertexWeights:(struct vector<float, std::__1::allocator<float> > { float *x1; float *x2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_1_1; } x3; }*)arg1 sigma:(float)arg2 includedLandmarks:(id)arg3;
- (bool)deformationTransfer:(const struct array<float, 3> { float x1[3]; }*)arg1 SourceOffsets:(/* Warning: Unrecognized filer type: '2' using 'void*' */ void**)arg2 VerticesTarget:(const struct array<float, 3> { float x1[3]; }*)arg3 VertexIndices:(const int*)arg4 Triangles:(const int*)arg5 VertexCount:(int)arg6 TriangleCount:(int)arg7 FixedVertexIdx:(int)arg8 VerticesTargetDeformed:(struct array<float, 3> { float x1[3]; }*)arg9;
- (struct vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >=^ {})eyeOffsets;
- (void)getEyePosWithVertices:(const struct array<float, 3> { float x1[3]; }*)arg1 leftEyePos:(/* Warning: Unrecognized filer type: '2' using 'void*' */ void**)arg2 rightEyePos:(/* Warning: Unrecognized filer type: '3' using 'void*' */ void**)arg3;
- (id)init;
- (void)initQuadMesh:(struct quad_mesh<float> { struct vector<cva::Matrix<float, 3, 1, false>, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > { struct Matrix<float, 3, 1, false> {} *x_1_1_1; struct Matrix<float, 3, 1, false> {} *x_1_1_2; struct __compressed_pair<cva::Matrix<float, 3, 1, false> *, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > { struct Matrix<float, 3, 1, false> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<cva::Matrix<float, 3, 1, false>, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > { struct Matrix<float, 3, 1, false> {} *x_2_1_1; struct Matrix<float, 3, 1, false> {} *x_2_1_2; struct __compressed_pair<cva::Matrix<float, 3, 1, false> *, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > { struct Matrix<float, 3, 1, false> {} *x_3_2_1; } x_2_1_3; } x2; struct vector<cva::Matrix<float, 2, 1, false>, std::__1::allocator<cva::Matrix<float, 2, 1, false> > > { struct Matrix<float, 2, 1, false> {} *x_3_1_1; struct Matrix<float, 2, 1, false> {} *x_3_1_2; struct __compressed_pair<cva::Matrix<float, 2, 1, false> *, std::__1::allocator<cva::Matrix<float, 2, 1, false> > > { struct Matrix<float, 2, 1, false> {} *x_3_2_1; } x_3_1_3; } x3; }*)arg1;
- (struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x1; unsigned int *x2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_1_1; } x3; })landmarkIds;
- (id)landmarkNames;
- (struct vector<float, std::__1::allocator<float> > { float *x1; float *x2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_1_1; } x3; })landmarkWeights;
- (void)loadIndicesWithResourceFile:(id)arg1 ResourceDir:(id)arg2 Indices:(struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)arg3;
- (void)loadVerticesWithResourceFile:(id)arg1 ResourceDir:(id)arg2 Vertices:(struct vector<float, std::__1::allocator<float> > { float *x1; float *x2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_1_1; } x3; }*)arg3;
- (void)neutralLabeling:(struct array<float, 3> { float x1[3]; }*)arg1;
- (int)triangleCount;
- (struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; })triangles;
- (void)updateEyeOffsetsWithIdentityCoefficients:(const float*)arg1;
- (int)vertexCount;
- (struct vector<float, std::__1::allocator<float> > { float *x1; float *x2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_1_1; } x3; })vertexWeightsEyes;
- (struct vector<float, std::__1::allocator<float> > { float *x1; float *x2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_1_1; } x3; })vertexWeightsFace;

@end
