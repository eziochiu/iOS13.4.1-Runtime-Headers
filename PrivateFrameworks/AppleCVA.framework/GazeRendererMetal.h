/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/AppleCVA.framework/AppleCVA
 */

@interface GazeRendererMetal : GazeRendererBase {
    <MTLTexture> * _depthTexture;
    <MTLDevice> * _device;
    <MTLBuffer> * _eyeOffsetsBuffer;
    <MTLDepthStencilState> * _gazeDepthStencilState;
    <MTLComputePipelineState> * _gazeLandmarksState;
    GazeMesh * _gazeMesh;
    <MTLRenderPipelineState> * _gazePipelineState;
    <MTLBuffer> * _gazeUniformBuffer;
    <MTLDepthStencilState> * _gazeWFDepthStencilState;
    <MTLRenderPipelineState> * _imagePipelineState;
    <MTLBuffer> * _imagePlaneVertexBuffer;
    <MTLBuffer> * _landmarkIdsBuffer;
    bool  _landmarkPositionOutputEnabled;
    NSDictionary * _landmarkPositions;
    <MTLBuffer> * _landmarkPositionsBuffer;
    <MTLBuffer> * _landmarkWeightsBuffer;
    unsigned long long  _outputPixelFormat;
    struct quad_mesh<float> { 
        struct vector<cva::Matrix<float, 3, 1, false>, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > { 
            struct Matrix<float, 3, 1, false> {} *__begin_; 
            struct Matrix<float, 3, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<float, 3, 1, false> *, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > { 
                struct Matrix<float, 3, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_vertices; 
        struct vector<cva::Matrix<float, 3, 1, false>, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > { 
            struct Matrix<float, 3, 1, false> {} *__begin_; 
            struct Matrix<float, 3, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<float, 3, 1, false> *, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > { 
                struct Matrix<float, 3, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_normals; 
        struct vector<cva::Matrix<float, 2, 1, false>, std::__1::allocator<cva::Matrix<float, 2, 1, false> > > { 
            struct Matrix<float, 2, 1, false> {} *__begin_; 
            struct Matrix<float, 2, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<float, 2, 1, false> *, std::__1::allocator<cva::Matrix<float, 2, 1, false> > > { 
                struct Matrix<float, 2, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_texcoords; 
        struct vector<cva::Matrix<float, 3, 1, false>, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > { 
            struct Matrix<float, 3, 1, false> {} *__begin_; 
            struct Matrix<float, 3, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<float, 3, 1, false> *, std::__1::allocator<cva::Matrix<float, 3, 1, false> > > { 
                struct Matrix<float, 3, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_tangents; 
        struct vector<cva::Matrix<int, 3, 1, false>, std::__1::allocator<cva::Matrix<int, 3, 1, false> > > { 
            struct Matrix<int, 3, 1, false> {} *__begin_; 
            struct Matrix<int, 3, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<int, 3, 1, false> *, std::__1::allocator<cva::Matrix<int, 3, 1, false> > > { 
                struct Matrix<int, 3, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_tris_vi; 
        struct vector<cva::Matrix<int, 3, 1, false>, std::__1::allocator<cva::Matrix<int, 3, 1, false> > > { 
            struct Matrix<int, 3, 1, false> {} *__begin_; 
            struct Matrix<int, 3, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<int, 3, 1, false> *, std::__1::allocator<cva::Matrix<int, 3, 1, false> > > { 
                struct Matrix<int, 3, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_tris_ni; 
        struct vector<cva::Matrix<int, 3, 1, false>, std::__1::allocator<cva::Matrix<int, 3, 1, false> > > { 
            struct Matrix<int, 3, 1, false> {} *__begin_; 
            struct Matrix<int, 3, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<int, 3, 1, false> *, std::__1::allocator<cva::Matrix<int, 3, 1, false> > > { 
                struct Matrix<int, 3, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_tris_ti; 
        struct vector<cva::Matrix<int, 4, 1, false>, std::__1::allocator<cva::Matrix<int, 4, 1, false> > > { 
            struct Matrix<int, 4, 1, false> {} *__begin_; 
            struct Matrix<int, 4, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<int, 4, 1, false> *, std::__1::allocator<cva::Matrix<int, 4, 1, false> > > { 
                struct Matrix<int, 4, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_quads_vi; 
        struct vector<cva::Matrix<int, 4, 1, false>, std::__1::allocator<cva::Matrix<int, 4, 1, false> > > { 
            struct Matrix<int, 4, 1, false> {} *__begin_; 
            struct Matrix<int, 4, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<int, 4, 1, false> *, std::__1::allocator<cva::Matrix<int, 4, 1, false> > > { 
                struct Matrix<int, 4, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_quads_ni; 
        struct vector<cva::Matrix<int, 4, 1, false>, std::__1::allocator<cva::Matrix<int, 4, 1, false> > > { 
            struct Matrix<int, 4, 1, false> {} *__begin_; 
            struct Matrix<int, 4, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<int, 4, 1, false> *, std::__1::allocator<cva::Matrix<int, 4, 1, false> > > { 
                struct Matrix<int, 4, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_quads_ti; 
        struct map<std::__1::basic_string<char>, shrek::quad_mesh_material<float>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, shrek::quad_mesh_material<float> > > > { 
            struct __tree<std::__1::__value_type<std::__1::basic_string<char>, shrek::quad_mesh_material<float> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, shrek::quad_mesh_material<float> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, shrek::quad_mesh_material<float> > > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, shrek::quad_mesh_material<float> >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __value_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, shrek::quad_mesh_material<float> >, std::__1::less<std::__1::basic_string<char> >, true> > { 
                    unsigned long long __value_; 
                } __pair3_; 
            } __tree_; 
        } m_materials; 
        struct map<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > > > > { 
            struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > > > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __value_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > >, std::__1::less<std::__1::basic_string<char> >, true> > { 
                    unsigned long long __value_; 
                } __pair3_; 
            } __tree_; 
        } m_material_parts; 
        struct map<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > > > > { 
            struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > > > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __value_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<shrek::quad_mesh_part>, std::__1::allocator<std::__1::shared_ptr<shrek::quad_mesh_part> > > >, std::__1::less<std::__1::basic_string<char> >, true> > { 
                    unsigned long long __value_; 
                } __pair3_; 
            } __tree_; 
        } m_groups; 
        struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > > { 
            struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __value_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true> > { 
                    unsigned long long __value_; 
                } __pair3_; 
            } __tree_; 
        } m_parent_group; 
        struct vector<std::__1::vector<std::__1::pair<int, int>, std::__1::allocator<std::__1::pair<int, int> > >, std::__1::allocator<std::__1::vector<std::__1::pair<int, int>, std::__1::allocator<std::__1::pair<int, int> > > > > { 
            struct vector<std::__1::pair<int, int>, std::__1::allocator<std::__1::pair<int, int> > > {} *__begin_; 
            struct vector<std::__1::pair<int, int>, std::__1::allocator<std::__1::pair<int, int> > > {} *__end_; 
            struct __compressed_pair<std::__1::vector<std::__1::pair<int, int>, std::__1::allocator<std::__1::pair<int, int> > > *, std::__1::allocator<std::__1::vector<std::__1::pair<int, int>, std::__1::allocator<std::__1::pair<int, int> > > > > { 
                struct vector<std::__1::pair<int, int>, std::__1::allocator<std::__1::pair<int, int> > > {} *__value_; 
            } __end_cap_; 
        } m_vertex_triangle_map; 
        struct vector<std::__1::pair<int, int>, std::__1::allocator<std::__1::pair<int, int> > > { 
            struct pair<int, int> {} *__begin_; 
            struct pair<int, int> {} *__end_; 
            struct __compressed_pair<std::__1::pair<int, int> *, std::__1::allocator<std::__1::pair<int, int> > > { 
                struct pair<int, int> {} *__value_; 
            } __end_cap_; 
        } m_vertex_triangle_indices; 
        struct vector<int, std::__1::allocator<int> > { 
            int *__begin_; 
            int *__end_; 
            struct __compressed_pair<int *, std::__1::allocator<int> > { 
                int *__value_; 
            } __end_cap_; 
        } m_vertex_triangle_index_list; 
        struct vector<cva::Matrix<int, 3, 1, false>, std::__1::allocator<cva::Matrix<int, 3, 1, false> > > { 
            struct Matrix<int, 3, 1, false> {} *__begin_; 
            struct Matrix<int, 3, 1, false> {} *__end_; 
            struct __compressed_pair<cva::Matrix<int, 3, 1, false> *, std::__1::allocator<cva::Matrix<int, 3, 1, false> > > { 
                struct Matrix<int, 3, 1, false> {} *__value_; 
            } __end_cap_; 
        } m_tris_for_normals; 
    }  _qmesh;
    long long  _renderMode;
    <MTLBuffer> * _renderModeAuxBuffer;
    float  _toMMExtrinsicsMultiplier;
    <MTLBuffer> * _triangleIndexBuffer;
    <MTLBuffer> * _vertexBuffer;
    <MTLBuffer> * _vertexWeightsEyesBuffer;
    <MTLBuffer> * _vertexWeightsFaceBuffer;
}

@property bool landmarkPositionOutputEnabled;
@property (readonly) NSDictionary *landmarkPositions;
@property (readonly) unsigned long long outputPixelFormat;
@property (nonatomic) long long renderMode;
@property float toMMExtrinsicsMultiplier;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (void)drawImageWithCommandEncoder:(id)arg1 sourceTexture:(id)arg2 transformation:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })arg3;
- (bool)drawLandmarksWithCommandBuffer:(id)arg1 imageSize:(struct { int x1; int x2; })arg2;
- (void)drawMeshWithCommandEncoder:(id)arg1 sourceTexture:(id)arg2;
- (void)initBuffers;
- (id)initWithDevice:(id)arg1 PixelFormat:(unsigned long long)arg2;
- (bool)landmarkPositionOutputEnabled;
- (id)landmarkPositions;
- (unsigned long long)outputPixelFormat;
- (bool)renderGroundTruthToCommandBuffer:(id)arg1 sourceTexture:(id)arg2 destinationTexture:(id)arg3 faceKitData:(id)arg4 outputIntrinsics:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })arg5 extrinsics:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg6 correctionEnabled:(bool)arg7 error:(id*)arg8;
- (long long)renderMode;
- (bool)renderToCommandBuffer:(void *)arg1 sourceTexture:(void *)arg2 destinationTexture:(void *)arg3 faceKitData:(void *)arg4 virtualCameraPosition:(void *)arg5 correctionEnabled:(void *)arg6 error:(void *)arg7; // needs 7 arg types, found 6: id, id, id, id, bool, id*
- (bool)renderToCommandBuffer:(void *)arg1 sourceTexture:(void *)arg2 destinationTexture:(void *)arg3 faceKitData:(void *)arg4 virtualCameraPosition:(void *)arg5 correctionEnabled:(void *)arg6 screenTransformationMatrix:(void *)arg7 error:(void *)arg8; // needs 8 arg types, found 7: id, id, id, id, bool, struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; }, id*
- (void)resetToDefaults;
- (void)resetToStored;
- (void)setLandmarkPositionOutputEnabled:(bool)arg1;
- (void)setRenderMode:(long long)arg1;
- (void)setToMMExtrinsicsMultiplier:(float)arg1;
- (void)storeSettings;
- (float)toMMExtrinsicsMultiplier;
- (void)updateDepthTexture:(struct { int x1; int x2; })arg1;
- (bool)updateFaceMeshWithfaceKitData:(id)arg1 screenProjectionMatrix:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg2 inputImageSize:(struct { int x1; int x2; })arg3 outputImageSize:(struct { int x1; int x2; })arg4 inputIntrinsics:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })arg5 outputIntrinsics:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })arg6 extrinsics:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg7 correctionEnabled:(bool)arg8 groundTruthMode:(bool)arg9;

@end
