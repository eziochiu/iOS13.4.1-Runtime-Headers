/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon
 */

@interface HMDXPCClientConnection : HMFMessageTransport <HMDaemonConnection, HMFLogging> {
    bool  _activated;
    HMDApplicationRegistry * _appRegistry;
    NSString * _clientName;
    bool  _entitledForAPIAccess;
    bool  _entitledForBackgroundMode;
    bool  _entitledForCameraClipsAccess;
    bool  _entitledForMultiUserSetupAccess;
    unsigned long long  _entitlements;
    HMDProcessInfo * _processInfo;
    NSObject<OS_dispatch_queue> * _queue;
    HMDXPCRequestTracker * _requestTracker;
    NSXPCConnection * _xpcConnection;
}

@property (getter=isActivated, nonatomic) bool activated;
@property (nonatomic, readonly) NSSet *activeRequests;
@property (nonatomic) HMDApplicationRegistry *appRegistry;
@property (nonatomic, readonly) NSString *applicationBundleIdentifier;
@property (getter=isAuthorizedForHomeDataAccess, nonatomic, readonly) bool authorizedForHomeDataAccess;
@property (getter=isAuthorizedForLocationAccess, nonatomic, readonly) bool authorizedForLocationAccess;
@property (getter=isAuthorizedForMicrophoneAccess, nonatomic, readonly) bool authorizedForMicrophoneAccess;
@property (nonatomic, retain) NSString *clientName;
@property (nonatomic, readonly) int clientPid;
@property (nonatomic, readonly) NSString *companionAppBundleIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isEntitledForAPIAccess, nonatomic, readonly) bool entitledForAPIAccess;
@property (getter=isEntitledForBackgroundMode, nonatomic, readonly) bool entitledForBackgroundMode;
@property (getter=isEntitledForCameraClipsAccess, nonatomic, readonly) bool entitledForCameraClipsAccess;
@property (getter=isEntitledForHomeLocationAccess, nonatomic, readonly) bool entitledForHomeLocationAccess;
@property (getter=isEntitledForMultiUserSetupAccess, nonatomic, readonly) bool entitledForMultiUserSetupAccess;
@property (getter=isEntitledForSPIAccess, readonly) bool entitledForSPIAccess;
@property (getter=isEntitledForShortcutsAutomationAccess, nonatomic, readonly) bool entitledForShortcutsAutomationAccess;
@property (getter=isEntitledToProvideAccessorySetupPayload, nonatomic, readonly) bool entitledToProvideAccessorySetupPayload;
@property (readonly) unsigned long long entitlements;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSString *name;
@property (getter=isPlatformBinary, readonly) bool platformBinary;
@property (nonatomic) HMDProcessInfo *processInfo;
@property (nonatomic, readonly) id remoteProxy;
@property (nonatomic, readonly) HMDXPCRequestTracker *requestTracker;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *teamIdentifier;
@property (nonatomic) NSXPCConnection *xpcConnection;

+ (unsigned long long)entitlementsForConnection:(id)arg1;
+ (id)logCategory;

- (void).cxx_destruct;
- (id)_displayName;
- (id)_extractBundleIdentifier;
- (void)_notifyOfNewIncomingClientMessage;
- (void)activate;
- (id)activeRequests;
- (id)appRegistry;
- (id)applicationBundleIdentifier;
- (bool)canSendMessage:(id)arg1;
- (void)checkinWithName:(id)arg1;
- (id)clientName;
- (int)clientPid;
- (id)companionAppBundleIdentifier;
- (void)deactivate;
- (void)dealloc;
- (id)description;
- (unsigned long long)entitlements;
- (id)extractTeamIdentifier;
- (void)handleMessage:(id)arg1;
- (void)handleMessage:(id)arg1 responseHandler:(id /* block */)arg2;
- (id)initWithConnection:(id)arg1 appRegistry:(id)arg2;
- (bool)isActivated;
- (bool)isAuthorizedForHomeDataAccess;
- (bool)isAuthorizedForLocationAccess;
- (bool)isAuthorizedForMicrophoneAccess;
- (bool)isEntitledForAPIAccess;
- (bool)isEntitledForBackgroundMode;
- (bool)isEntitledForCameraClipsAccess;
- (bool)isEntitledForHomeLocationAccess;
- (bool)isEntitledForMultiUserSetupAccess;
- (bool)isEntitledForSPIAccess;
- (bool)isEntitledForShortcutsAutomationAccess;
- (bool)isEntitledToProvideAccessorySetupPayload;
- (bool)isPlatformBinary;
- (id)logIdentifier;
- (id)name;
- (id)processInfo;
- (id)remoteProxy;
- (id)requestTracker;
- (void)sendMessage:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)setActivated:(bool)arg1;
- (void)setAppRegistry:(id)arg1;
- (void)setClientName:(id)arg1;
- (void)setProcessInfo:(id)arg1;
- (void)setXpcConnection:(id)arg1;
- (bool)shouldSendResponseForMessageIdentifier:(id)arg1;
- (id)teamIdentifier;
- (id)xpcConnection;

@end
