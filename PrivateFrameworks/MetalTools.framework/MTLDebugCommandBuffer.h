/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/MetalTools.framework/MetalTools
 */

@interface MTLDebugCommandBuffer : MTLToolsCommandBuffer {
    struct unordered_multiset<AttachmentDescriptorSimple, AttachmentDescriptorSimple::hash_t, AttachmentDescriptorSimple::equal_t, std::__1::allocator<AttachmentDescriptorSimple> > { 
        struct __hash_table<AttachmentDescriptorSimple, AttachmentDescriptorSimple::hash_t, AttachmentDescriptorSimple::equal_t, std::__1::allocator<AttachmentDescriptorSimple> > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<AttachmentDescriptorSimple, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<AttachmentDescriptorSimple, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<AttachmentDescriptorSimple, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<AttachmentDescriptorSimple, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<AttachmentDescriptorSimple, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<AttachmentDescriptorSimple, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<AttachmentDescriptorSimple, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<AttachmentDescriptorSimple, void *> *>, std::__1::allocator<std::__1::__hash_node<AttachmentDescriptorSimple, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<AttachmentDescriptorSimple, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<AttachmentDescriptorSimple, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, AttachmentDescriptorSimple::hash_t> { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, AttachmentDescriptorSimple::equal_t> { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _attachmentSet;
    struct unique_ptr<ILayerLockingPolicy, std::__1::default_delete<ILayerLockingPolicy> > { 
        struct __compressed_pair<ILayerLockingPolicy *, std::__1::default_delete<ILayerLockingPolicy> > { 
            struct ILayerLockingPolicy {} *__value_; 
        } __ptr_; 
    }  _boundForWriteLockingPolicy;
    NSMutableSet * _buffersBoundForWrite;
    struct array<AttachmentDescriptorSimple, 8> { 
        struct AttachmentDescriptorSimple { 
            void *texture; 
            unsigned long long level; 
            struct _NSRange { 
                unsigned long long location; 
                unsigned long long length; 
            } sliceRange; 
            struct _NSRange { 
                unsigned long long location; 
                unsigned long long length; 
            } depthPlaneRange; 
            unsigned long long storeAction; 
        } __elems_[8]; 
    }  _currAttachments;
    _MTLCommandEncoder * _currentEncoder;
    struct array<AttachmentDescriptorSimple, 8> { 
        struct AttachmentDescriptorSimple { 
            void *texture; 
            unsigned long long level; 
            struct _NSRange { 
                unsigned long long location; 
                unsigned long long length; 
            } sliceRange; 
            struct _NSRange { 
                unsigned long long location; 
                unsigned long long length; 
            } depthPlaneRange; 
            unsigned long long storeAction; 
        } __elems_[8]; 
    }  _prevAttachments;
    NSMutableSet * _texturesBoundForWrite;
    NSMutableSet * _unsignaledResources;
    struct vector<std::__1::pair<MTLDebugSharedEvent *, unsigned long long>, std::__1::allocator<std::__1::pair<MTLDebugSharedEvent *, unsigned long long> > > { 
        struct pair<MTLDebugSharedEvent *, unsigned long long> {} *__begin_; 
        struct pair<MTLDebugSharedEvent *, unsigned long long> {} *__end_; 
        struct __compressed_pair<std::__1::pair<MTLDebugSharedEvent *, unsigned long long> *, std::__1::allocator<std::__1::pair<MTLDebugSharedEvent *, unsigned long long> > > { 
            struct pair<MTLDebugSharedEvent *, unsigned long long> {} *__value_; 
        } __end_cap_; 
    }  _waitEvents;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_trackRenderPassAttachmentDescriptor:(id)arg1;
- (void)_trackTexture:(id)arg1;
- (void)addCompletedHandler:(id /* block */)arg1;
- (void)addSynchronizationNotification:(id /* block */)arg1;
- (id)blitCommandEncoder;
- (void)commit;
- (id)computeCommandEncoder;
- (id)computeCommandEncoderWithDispatchType:(unsigned long long)arg1;
- (void)dealloc;
- (void*)debugBufferContentsWithLength:(unsigned long long*)arg1;
- (void)encodeSignalEvent:(id)arg1 value:(unsigned long long)arg2;
- (void)encodeWaitForEvent:(id)arg1 value:(unsigned long long)arg2;
- (void)encodeWaitForEvent:(id)arg1 value:(unsigned long long)arg2 timeout:(unsigned int)arg3;
- (void)executeSynchronizationNotifications:(int)arg1;
- (void)executeSynchronizationNotifications:(int)arg1 scope:(unsigned long long)arg2 resources:(const id*)arg3 count:(unsigned long long)arg4;
- (id)fragmentRenderCommandEncoderWithDescriptor:(id)arg1;
- (id)initWithCommandBuffer:(id)arg1 commandQueue:(id)arg2;
- (void)onParallelRenderCommanderEndEncoding;
- (id)parallelRenderCommandEncoderWithDescriptor:(id)arg1;
- (id)renderCommandEncoderWithDescriptor:(id)arg1;
- (id)resourceStateCommandEncoder;
- (void)resourceTrackingRecordAccessesToArguments:(id)arg1 bufferFuncArgsPtr:(struct { bool x1; bool x2; unsigned long long x3; id x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; bool x10; float x11; float x12; }*)arg2 textureFuncArgsPtr:(struct { bool x1; bool x2; unsigned long long x3; id x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; bool x10; float x11; float x12; }*)arg3;
- (id)sampledComputeCommandEncoderWithDispatchType:(unsigned long long)arg1 programInfoBuffer:(struct { unsigned int x1 : 8; unsigned int x2 : 24; unsigned int x3; unsigned long long x4; unsigned long long x5; }*)arg2 capacity:(unsigned long long)arg3;
- (id)sampledComputeCommandEncoderWithProgramInfoBuffer:(struct { unsigned int x1 : 8; unsigned int x2 : 24; unsigned int x3; unsigned long long x4; unsigned long long x5; }*)arg1 capacity:(unsigned long long)arg2;
- (id)sampledFragmentRenderCommandEncoderWithDescriptor:(id)arg1 programInfoBuffer:(struct { unsigned int x1 : 8; unsigned int x2 : 24; unsigned int x3; unsigned long long x4; unsigned long long x5; }*)arg2 capacity:(unsigned long long)arg3;
- (id)sampledRenderCommandEncoderWithDescriptor:(id)arg1 programInfoBuffer:(struct { unsigned int x1 : 8; unsigned int x2 : 24; unsigned int x3; unsigned long long x4; unsigned long long x5; }*)arg2 capacity:(unsigned long long)arg3;
- (void)trackRenderPassDescriptor:(id)arg1;
- (void)trackUseResource:(id)arg1 usage:(unsigned long long)arg2;
- (void)trackUseResources:(const id*)arg1 count:(unsigned long long)arg2 usage:(unsigned long long)arg3;
- (void)validateStoreLoadTransition:(id)arg1 atIndex:(unsigned long long)arg2 renderTargetArrayLength:(unsigned long long)arg3;
- (void)waitUntilCompleted;
- (void)waitUntilScheduled;

@end
