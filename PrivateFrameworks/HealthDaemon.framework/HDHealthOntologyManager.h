/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDHealthOntologyManager : NSObject {
    NSUUID * _assetAvailabilityRegistrationToken;
    NSDictionary * _codingSystemPriorityInfo;
    NSCache * _conceptsByIdentifierCache;
    _Atomic bool  _enabled;
    HDSimpleGraphDatabase * _graphDatabase;
    _Atomic bool  _invalidated;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _ivarLock;
    NSCache * _nebulousConceptCache;
    HKObserverSet * _observers;
    NSURL * _ontologyURL;
    HDProfile * _profile;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _unitTest_useEmbeddedOntology;
    bool  _unitTest_useEmbeddedOntologyAsset;
    bool  _useCache;
}

@property (getter=isEnabled, nonatomic) bool enabled;
@property (nonatomic, retain) HDSimpleGraphDatabase *graphDatabase;
@property (nonatomic, readonly) bool ignoresOntologyAssetAvailabilityChanges;
@property (nonatomic, readonly) bool ignoresVersionCheckDuringReferenceOntologyImport;
@property (nonatomic, readonly, copy) NSURL *ontologyURL;
@property (nonatomic, readonly) HDProfile *profile;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, readonly) bool unitTest_useEmbeddedOntology;
@property (nonatomic, readonly) bool unitTest_useEmbeddedOntologyAsset;

+ (id)_ontologyURLForProfile:(id)arg1;
+ (bool)graphDatabase:(id)arg1 setVersion:(id)arg2 error:(id*)arg3;
+ (void)obliterateWithProfile:(id)arg1 reason:(id)arg2;

- (void).cxx_destruct;
- (id)_conceptWithGraphDatabaseCall:(id /* block */)arg1 error:(id*)arg2;
- (id)_conceptsWithGraphDatabaseCall:(id /* block */)arg1 error:(id*)arg2;
- (id)_conceptsWithRelationship:(id)arg1 toNodeWithID:(id)arg2 reversed:(bool)arg3 error:(id*)arg4;
- (bool)_createOntologyDirectoryIfNecessaryWithError:(id*)arg1;
- (id)_graphDatabaseUserVersionImplementation:(id)arg1 error:(id*)arg2;
- (long long)_graphDatabaseVersionImplementation:(id)arg1 error:(id*)arg2;
- (void)_handleOntologyAssetAvailabilityUpdate:(long long)arg1;
- (void)_notifyObserversReferenceOntologyCreated;
- (void)_notifyObserversReferenceOntologyDidUpdateWithSuccess:(bool)arg1 error:(id)arg2;
- (void)_notifyObserversReferenceOntologyWillUpdate;
- (id)_ontologyAssetManager;
- (id)_ontologyConfigurationForCountryCode:(id)arg1;
- (void)_queue_clearCache;
- (void)_queue_clearCachedConceptWithIdentifier:(id)arg1;
- (void)_queue_closeDatabase;
- (id)_queue_conceptsWithGraphDatabaseCall:(id /* block */)arg1 error:(id*)arg2;
- (bool)_queue_copyEmbeddedReferenceOntology;
- (void)_queue_createAndInitializeIfNeeded;
- (id)_queue_graphDatabase;
- (id)_queue_graphDatabaseUserVersionWithError:(id*)arg1;
- (long long)_queue_graphDatabaseVersion;
- (bool)_queue_importReferenceOntology;
- (bool)_queue_insertRawAttributeIntoDatabase:(id)arg1 valueString:(id)arg2;
- (bool)_queue_insertRawRelationshipIntoDatabase:(id)arg1 valueString:(id)arg2;
- (bool)_queue_insertTwoItemRawOntologyValueIntoDatabase:(id)arg1 table:(id)arg2 valueString:(id)arg3;
- (id)_referenceOntologyFileURL;
- (id)_work_conceptFromGraphNode:(id)arg1 preloadRelationships:(bool)arg2;
- (id)_work_graphDatabase:(id)arg1 findConceptForCoding:(id)arg2 error:(id*)arg3;
- (id)_work_graphDatabase:(id)arg1 findConceptsForCodings:(id)arg2 error:(id*)arg3;
- (bool)_work_graphDatabase:(id)arg1 insertConcept:(id)arg2 error:(id*)arg3;
- (id)_work_graphDatabase:(id)arg1 newConceptIdentifierWithName:(id)arg2 error:(id*)arg3;
- (id)_work_graphDatabase:(id)arg1 resolveMercuryConceptForCodings:(id)arg2 country:(id)arg3 error:(id*)arg4;
- (bool)_work_node:(id)arg1 addAttributeWithCoding:(id)arg2 error:(id*)arg3;
- (id)allAssociatedConceptsWithError:(id*)arg1;
- (bool)breakAssociationFromSampleUUID:(id)arg1 toConcept:(id)arg2 error:(id*)arg3;
- (id)conceptForContext:(id)arg1;
- (id)conceptForIdentifier:(id)arg1 error:(id*)arg2;
- (id)conceptForName:(id)arg1 error:(id*)arg2;
- (id)conceptsAssociatedWithSample:(id)arg1 error:(id*)arg2;
- (id)conceptsAssociatedWithSampleUUID:(id)arg1 error:(id*)arg2;
- (id)conceptsContainingAttribute:(long long)arg1 withValue:(id)arg2 error:(id*)arg3;
- (id)conceptsForIdentifiers:(id)arg1 expectedOntologyVersion:(id)arg2 error:(id*)arg3;
- (id)conceptsWithRelationship:(id)arg1 fromNodeWithID:(id)arg2 error:(id*)arg3;
- (id)conceptsWithRelationship:(id)arg1 toNodeWithID:(id)arg2 error:(id*)arg3;
- (long long)countOfConceptsAssociatedWithUserRecords:(id*)arg1;
- (id)graphDatabase;
- (void)hd_unitTesting_clearCache;
- (void)hd_unitTesting_closeDatabase;
- (void)hd_unitTesting_disableCache;
- (bool)hd_unitTesting_setVersion:(id)arg1 error:(id*)arg2;
- (void)hd_unitTesting_setupDatabase;
- (bool)ignoresOntologyAssetAvailabilityChanges;
- (bool)ignoresVersionCheckDuringReferenceOntologyImport;
- (void)importUsingAssetAtLocation:(id)arg1 rememberLocation:(bool)arg2 completion:(id /* block */)arg3;
- (void)importWithCompletion:(id /* block */)arg1;
- (id)init;
- (id)initWithProfile:(id)arg1;
- (bool)insertAssociations:(id)arg1 error:(id*)arg2;
- (void)invalidateAndWait;
- (bool)isEnabled;
- (bool)makeAssociationFromSampleUUID:(id)arg1 toConcept:(id)arg2 error:(id*)arg3;
- (bool)makeAssociationFromSampleUUID:(id)arg1 toConceptIdentifier:(id)arg2 error:(id*)arg3;
- (id)nameForCodingSystem:(long long)arg1 value:(id)arg2 error:(id*)arg3;
- (void)obliterateWithReason:(id)arg1;
- (id)ontologyURL;
- (bool)performGraphDatabaseWork:(id /* block */)arg1 usingTransaction:(bool)arg2 error:(id*)arg3;
- (id)profile;
- (id)queue;
- (void)registerObserver:(id)arg1;
- (id)relationshipsForConceptWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)removeAllAssociationsToSampleUUID:(id)arg1 error:(id*)arg2;
- (id)sampleUUIDsAssociatedWithConcept:(id)arg1 error:(id*)arg2;
- (void)setEnabled:(bool)arg1;
- (void)setGraphDatabase:(id)arg1;
- (void)setQueue:(id)arg1;
- (bool)unitTest_useEmbeddedOntology;
- (bool)unitTest_useEmbeddedOntologyAsset;
- (void)unregisterObserver:(id)arg1;
- (bool)useEmbeddedOntology;
- (bool)useEmbeddedOntologyAsset;
- (id)userVersionWithError:(id*)arg1;
- (id)versionWithError:(id*)arg1;

@end
