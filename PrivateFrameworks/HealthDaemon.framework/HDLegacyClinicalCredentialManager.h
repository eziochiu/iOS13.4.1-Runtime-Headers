/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDLegacyClinicalCredentialManager : NSObject {
    NSData * __cachedCredentialKey;
    NSObject<OS_dispatch_queue> * _credentialKeyQueue;
}

@property (setter=_setCachedCredentialKey:, nonatomic, copy) NSData *_cachedCredentialKey;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *credentialKeyQueue;

- (void).cxx_destruct;
- (bool)_assignCredentialManagerError:(out id*)arg1 code:(long long)arg2 description:(id)arg3;
- (bool)_assignCredentialManagerError:(out id*)arg1 code:(long long)arg2 format:(id)arg3;
- (id)_attributesForCredentialKey:(id)arg1;
- (id)_cachedCredentialKey;
- (id)_credentialKeyBaseAttributes;
- (id)_credentialKeyFingerprintWithError:(out id*)arg1;
- (id)_credentialKeyQuery;
- (id)_credentialKeyWithError:(out id*)arg1;
- (id)_decryptTokenData:(id)arg1 error:(out id*)arg2;
- (id)_encryptToken:(id)arg1 error:(out id*)arg2;
- (id)_encryptTokenData:(id)arg1 initializationVector:(id)arg2 operation:(unsigned int)arg3 error:(out id*)arg4;
- (bool)_encryptedTokenDataHasInitializationVector:(id)arg1 error:(out id*)arg2;
- (id)_encryptedTokenDataWithInitializationVector:(id)arg1 payload:(id)arg2;
- (bool)_error:(id)arg1 isCredentialManagerErrorWithCode:(long long)arg2;
- (id)_generateCredentialKeyWithError:(out id*)arg1;
- (id)_generateInitializationVectorWithError:(out id*)arg1;
- (id)_generateRandomBytesOfLength:(long long)arg1 error:(out id*)arg2;
- (id)_initializationVectorFromEncryptedTokenData:(id)arg1 error:(out id*)arg2;
- (id)_payloadFromEncryptedTokenData:(id)arg1 error:(out id*)arg2;
- (id)_retrieveCredentialKeyFromKeychainWithError:(out id*)arg1;
- (void)_setCachedCredentialKey:(id)arg1;
- (bool)_shouldProceedWithEncryptionAfterStatus:(int)arg1 error:(out id*)arg2;
- (bool)_storeCredentialKeyInKeychain:(id)arg1 error:(out id*)arg2;
- (id)_tokenByStrippingPaddingFromToken:(id)arg1;
- (id)_tokenDataFromToken:(id)arg1 error:(out id*)arg2;
- (id)_tokenFromTokenData:(id)arg1 error:(out id*)arg2;
- (bool)_validateToken:(id)arg1 error:(out id*)arg2;
- (id)credentialKeyFingerprintWithError:(out id*)arg1;
- (id)credentialKeyQueue;
- (id)decryptTokenData:(id)arg1 error:(out id*)arg2;
- (bool)deleteCredentialKeyFromKeychainWithError:(id*)arg1;
- (id)encryptToken:(id)arg1 error:(out id*)arg2;
- (id)init;
- (id)unitTesting_retrieveCredentialKeyFromKeychainWithError:(id*)arg1;
- (bool)unitTesting_storeCredentialKeyInKeychain:(id)arg1 error:(id*)arg2;

@end
