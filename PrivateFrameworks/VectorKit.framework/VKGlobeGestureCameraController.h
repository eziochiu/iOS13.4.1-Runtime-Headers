/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKGlobeGestureCameraController : VKGestureCameraBehavior {
    double  _beganDoublePanPitch;
    struct CameraManager { int (**x1)(); bool x2; bool x3; bool x4; struct Matrix<int, 2, 1> { int x_5_1_1[2]; } x5; struct Matrix<int, 2, 1> { int x_6_1_1[2]; } x6; struct Matrix<int, 2, 1> { int x_7_1_1[2]; } x7; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x_1_2_1; } x_8_1_1; struct Unit<RadianUnitDescription, double> { double x_2_2_1; } x_8_1_2; struct Unit<MeterUnitDescription, double> { double x_3_2_1; } x_8_1_3; } x8; double x9; bool x10; bool x11; bool x12; bool x13; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x_1_2_1; } x_14_1_1; struct Unit<RadianUnitDescription, double> { double x_2_2_1; } x_14_1_2; struct Unit<MeterUnitDescription, double> { double x_3_2_1; } x_14_1_3; } x14; struct Matrix<int, 2, 1> { int x_15_1_1[2]; } x15; double x16; bool x17; bool x18; bool x19; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x_1_2_1; } x_20_1_1; struct Unit<RadianUnitDescription, double> { double x_2_2_1; } x_20_1_2; struct Unit<MeterUnitDescription, double> { double x_3_2_1; } x_20_1_3; } x20; } * _cameraManager;
    double  _currentDoublePanPitch;
    struct GlobeView { int (**x1)(); struct GeoServicesLoader {} *x2; struct ManifestManager {} *x3; struct TriggerManager {} *x4; struct shared_ptr<altitude::AnchorManager> { struct AnchorManager {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct DtmCacheNode {} *x6; struct DtmRequestManager {} *x7; struct FreezeViewNode {} *x8; struct shared_ptr<mdc::Camera> { struct Camera {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; bool x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_11_1_1; } x11; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_12_1_1; } x12; } * _globeView;
    bool  _isPitchIncreasing;
}

- (void)beginPan:(struct CGPoint { double x1; double x2; })arg1;
- (void)beginPitch:(struct CGPoint { double x1; double x2; })arg1;
- (void)beginRotate:(struct CGPoint { double x1; double x2; })arg1;
- (void)beginZoom:(struct CGPoint { double x1; double x2; })arg1;
- (void)endPan:(struct CGPoint { double x1; double x2; })arg1;
- (void)endPitch:(struct CGPoint { double x1; double x2; })arg1;
- (void)endRotate:(struct CGPoint { double x1; double x2; })arg1;
- (void)endZoom:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isPitchIncreasing;
- (void)setCameraManager:(struct CameraManager { int (**x1)(); bool x2; bool x3; bool x4; struct Matrix<int, 2, 1> { int x_5_1_1[2]; } x5; struct Matrix<int, 2, 1> { int x_6_1_1[2]; } x6; struct Matrix<int, 2, 1> { int x_7_1_1[2]; } x7; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x_1_2_1; } x_8_1_1; struct Unit<RadianUnitDescription, double> { double x_2_2_1; } x_8_1_2; struct Unit<MeterUnitDescription, double> { double x_3_2_1; } x_8_1_3; } x8; double x9; bool x10; bool x11; bool x12; bool x13; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x_1_2_1; } x_14_1_1; struct Unit<RadianUnitDescription, double> { double x_2_2_1; } x_14_1_2; struct Unit<MeterUnitDescription, double> { double x_3_2_1; } x_14_1_3; } x14; struct Matrix<int, 2, 1> { int x_15_1_1[2]; } x15; double x16; bool x17; bool x18; bool x19; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x_1_2_1; } x_20_1_1; struct Unit<RadianUnitDescription, double> { double x_2_2_1; } x_20_1_2; struct Unit<MeterUnitDescription, double> { double x_3_2_1; } x_20_1_3; } x20; }*)arg1;
- (void)setGlobeView:(struct GlobeView { int (**x1)(); struct GeoServicesLoader {} *x2; struct ManifestManager {} *x3; struct TriggerManager {} *x4; struct shared_ptr<altitude::AnchorManager> { struct AnchorManager {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct DtmCacheNode {} *x6; struct DtmRequestManager {} *x7; struct FreezeViewNode {} *x8; struct shared_ptr<mdc::Camera> { struct Camera {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; bool x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_11_1_1; } x11; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_12_1_1; } x12; }*)arg1;
- (void)updatePan:(struct CGPoint { double x1; double x2; })arg1 lastScreenPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)updatePitch:(struct CGPoint { double x1; double x2; })arg1 translation:(double)arg2;
- (void)updateRotate:(double)arg1 atScreenPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)updateZoom:(struct CGPoint { double x1; double x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;

@end
