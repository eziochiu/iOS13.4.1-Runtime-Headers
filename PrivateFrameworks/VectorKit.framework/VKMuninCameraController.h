/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKMuninCameraController : VKCameraController <VKGesturingCameraController> {
    struct unique_ptr<(anonymous namespace)::BumpAnimator, std::__1::default_delete<(anonymous namespace)::BumpAnimator> >="__ptr_"{__compressed_pair<(anonymous namespace)::BumpAnimator *, std::__1::default_delete<(anonymous namespace)::BumpAnimator> >="__value_"^{BumpAnimator {}  _bumpAnimator;
    float  _cameraOffsetFactor;
    struct optional<(anonymous namespace)::PointSegment>="_hasValue"B"_value"(ValueUnion="data"[3984C]"type"{PointSegment="_startPoint"{PointView="_point"{CollectionPoint="pointId"Q"frame"{RigidTransform<double, float>="_translation"{Matrix<double, 3, 1>="_e"[3d] {}  _currentPointSegment;
    struct Unit<RadianUnitDescription, double> { 
        double _value; 
    }  _heading;
    double  _lastUpdateTime;
    struct MuninSceneLogic { int (**x1)(); bool x2; unsigned short x3; struct shared_ptr<md::TaskContext> { struct TaskContext {} *x_4_1_1; struct __shared_weak_count {} *x_4_1_2; } x4; struct World {} *x5; struct LoadingStatusTracker {} *x6; struct RunLoopController {} *x7; struct unique_ptr<md::mun::MuninMetadataContainer, std::__1::default_delete<md::mun::MuninMetadataContainer> > { struct __compressed_pair<md::mun::MuninMetadataContainer *, std::__1::default_delete<md::mun::MuninMetadataContainer> > { struct MuninMetadataContainer {} *x_1_2_1; } x_8_1_1; } x8; struct vector<md::mun::ViewId, std::__1::allocator<md::mun::ViewId> > { struct ViewId {} *x_9_1_1; struct ViewId {} *x_9_1_2; struct __compressed_pair<md::mun::ViewId *, std::__1::allocator<md::mun::ViewId> > { struct ViewId {} *x_3_2_1; } x_9_1_3; } x9; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; } x_10_1_1; } x10; } * _muninSceneLogic;
    struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        VKTimedAnimation *_obj; 
        struct _retain_objc { } _retain; 
        struct _release_objc { } _release; 
    }  _offsetAnimation;
    struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        VKTimedAnimation *_obj; 
        struct _retain_objc { } _retain; 
        struct _release_objc { } _release; 
    }  _panAnimation;
    struct Spring<double, 1, mdc::SpringType::Angular> { 
        double _position; 
        double _velocity; 
        double _restingPosition; 
        double _kSpring; 
        double _kDamper; 
    }  _panSpring;
    bool  _panStopping;
    struct Matrix<float, 2, 1> { 
        float _e[2]; 
    }  _panTranslation;
    bool  _panning;
    struct unique_ptr<(anonymous namespace)::PathAnimator, std::__1::default_delete<(anonymous namespace)::PathAnimator> >="__ptr_"{__compressed_pair<(anonymous namespace)::PathAnimator *, std::__1::default_delete<(anonymous namespace)::PathAnimator> >="__value_"^{PathAnimator {}  _pathAnimator;
    struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        VKTimedAnimation *_obj; 
        struct _retain_objc { } _retain; 
        struct _release_objc { } _release; 
    }  _pinchResetAnimation;
    struct Unit<RadianUnitDescription, double> { 
        double _value; 
    }  _pinchStartFieldOfView;
    struct Matrix<float, 2, 1> { 
        float _e[2]; 
    }  _pinchZoomOffset;
    bool  _pinching;
    struct Unit<RadianUnitDescription, double> { 
        double _value; 
    }  _pitch;
    struct CameraFrame<geo::Radians, double> { 
        struct Coordinate3D<Radians, double> { 
            struct Unit<RadianUnitDescription, double> { 
                double _value; 
            } latitude; 
            struct Unit<RadianUnitDescription, double> { 
                double _value; 
            } longitude; 
            struct Unit<MeterUnitDescription, double> { 
                double _value; 
            } altitude; 
        } _target; 
        struct Unit<MeterUnitDescription, double> { 
            double _value; 
        } _distanceFromTarget; 
        struct Unit<RadianUnitDescription, double> { 
            double _value; 
        } _pitch; 
        struct Unit<RadianUnitDescription, double> { 
            double _value; 
        } _heading; 
        struct Unit<RadianUnitDescription, double> { 
            double _value; 
        } _roll; 
    }  _previousCameraFrame;
    bool  _restrictWidestFieldOfView;
    struct Coordinate3D<Radians, double> { 
        struct Unit<RadianUnitDescription, double> { 
            double _value; 
        } latitude; 
        struct Unit<RadianUnitDescription, double> { 
            double _value; 
        } longitude; 
        struct Unit<MeterUnitDescription, double> { 
            double _value; 
        } altitude; 
    }  _rigPosition;
    struct shared_ptr<md::TaskContext> { 
        struct TaskContext {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _taskContext;
    bool  _virtualParallaxEnabled;
    struct Unit<RadianUnitDescription, double> { 
        double _value; 
    }  _widestFieldOfView;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (nonatomic) bool virtualParallaxEnabled;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct Unit<RadianUnitDescription, double> { double x1; })_horizontalFieldOfView:(struct Unit<RadianUnitDescription, double> { double x1; })arg1;
- (void)_setHeading:(struct Unit<RadianUnitDescription, double> { double x1; })arg1;
- (struct Unit<RadianUnitDescription, double> { double x1; })_verticalFieldOfView:(struct Unit<RadianUnitDescription, double> { double x1; })arg1;
- (double)_zoomRubberBandFov:(double)arg1;
- (double)altitude;
- (void)animatePath:(struct vector<md::mun::CollectionPoint, std::__1::allocator<md::mun::CollectionPoint> > { struct CollectionPoint {} *x1; struct CollectionPoint {} *x2; struct __compressed_pair<md::mun::CollectionPoint *, std::__1::allocator<md::mun::CollectionPoint> > { struct CollectionPoint {} *x_3_1_1; } x3; }*)arg1 withTarget:(const struct Geocentric<double> { double x1[3]; }*)arg2 lookAtTarget:(bool)arg3 constantLod:(bool)arg4 completionHandler:(id /* block */)arg5;
- (bool)canZoomInForTileSize:(long long)arg1;
- (bool)canZoomOutForTileSize:(long long)arg1;
- (bool)cancelPendingMove;
- (bool)cancelPendingMoveExceptBump;
- (struct { double x1; double x2; })centerCoordinate;
- (const struct CollectionPoint { unsigned long long x1; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_2_1_1; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x_1_3_1[3]; } x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; struct Unit<RadianUnitDescription, float> { float x_3_1_1; } x3; struct Mercator3<double> { double x_4_1_1[3]; } x4; unsigned long long x5; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo {} *x_6_1_1; struct PhotoInfo {} *x_6_1_2; struct PhotoInfo {} *x_6_1_3; unsigned long long x_6_1_4; struct type { unsigned char x_5_2_1[288]; } x_6_1_5[6]; } x6; float x7; unsigned int x8; unsigned short x9; unsigned char x10; unsigned char x11; unsigned char x12; }*)currentPoint;
- (double)currentZoomLevelForTileSize:(long long)arg1;
- (double)heading;
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext {} *x1; struct __shared_weak_count {} *x2; })arg1 mapDataAccess:(struct MapDataAccess { struct World {} *x1; unsigned char x2; id x3; struct CameraAccessInternal {} *x4; struct unique_ptr<md::CameraAccessCartographic, std::__1::default_delete<md::CameraAccessCartographic> > { struct __compressed_pair<md::CameraAccessCartographic *, std::__1::default_delete<md::CameraAccessCartographic> > { struct CameraAccessCartographic {} *x_1_2_1; } x_5_1_1; } x5; struct unique_ptr<md::CameraAccessGlobe, std::__1::default_delete<md::CameraAccessGlobe> > { struct __compressed_pair<md::CameraAccessGlobe *, std::__1::default_delete<md::CameraAccessGlobe> > { struct CameraAccessGlobe {} *x_1_2_1; } x_6_1_1; } x6; struct unique_ptr<md::CameraAccessMunin, std::__1::default_delete<md::CameraAccessMunin> > { struct __compressed_pair<md::CameraAccessMunin *, std::__1::default_delete<md::CameraAccessMunin> > { struct CameraAccessMunin {} *x_1_2_1; } x_7_1_1; } x7; }*)arg2 animationRunner:(struct AnimationRunner { struct MapEngine {} *x1; }*)arg3 runLoopController:(struct RunLoopController { struct MapEngine {} *x1; long long x2; long long x3; }*)arg4 cameraDelegate:(id)arg5 muninSceneLogic:(struct MuninSceneLogic { int (**x1)(); bool x2; unsigned short x3; struct shared_ptr<md::TaskContext> { struct TaskContext {} *x_4_1_1; struct __shared_weak_count {} *x_4_1_2; } x4; struct World {} *x5; struct LoadingStatusTracker {} *x6; struct RunLoopController {} *x7; struct unique_ptr<md::mun::MuninMetadataContainer, std::__1::default_delete<md::mun::MuninMetadataContainer> > { struct __compressed_pair<md::mun::MuninMetadataContainer *, std::__1::default_delete<md::mun::MuninMetadataContainer> > { struct MuninMetadataContainer {} *x_1_2_1; } x_8_1_1; } x8; struct vector<md::mun::ViewId, std::__1::allocator<md::mun::ViewId> > { struct ViewId {} *x_9_1_1; struct ViewId {} *x_9_1_2; struct __compressed_pair<md::mun::ViewId *, std::__1::allocator<md::mun::ViewId> > { struct ViewId {} *x_3_2_1; } x_9_1_3; } x9; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; } x_10_1_1; } x10; }*)arg6;
- (bool)isAnimationsRunning;
- (bool)isAnimationsRunningExceptBump;
- (double)maximumZoomLevelForTileSize:(long long)arg1;
- (double)minimumZoomLevelForTileSize:(long long)arg1;
- (bool)moveToPoint:(const struct CollectionPoint { unsigned long long x1; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_2_1_1; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x_1_3_1[3]; } x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; struct Unit<RadianUnitDescription, float> { float x_3_1_1; } x3; struct Mercator3<double> { double x_4_1_1[3]; } x4; unsigned long long x5; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo {} *x_6_1_1; struct PhotoInfo {} *x_6_1_2; struct PhotoInfo {} *x_6_1_3; unsigned long long x_6_1_4; struct type { unsigned char x_5_2_1[288]; } x_6_1_5[6]; } x6; float x7; unsigned int x8; unsigned short x9; unsigned char x10; unsigned char x11; unsigned char x12; }*)arg1 withHeading:(struct Unit<RadianUnitDescription, double> { double x1; })arg2 withPitch:(struct Unit<RadianUnitDescription, double> { double x1; })arg3 animated:(bool)arg4 completionHandler:(id /* block */)arg5;
- (double)pitch;
- (bool)restoreViewportFromInfo:(id)arg1;
- (void)runBumpAnimation:(const struct Geocentric<double> { double x1[3]; }*)arg1 targetPoint:(const struct Geocentric<double> { double x1[3]; }*)arg2 rigType:(unsigned char)arg3;
- (struct Matrix<float, 2, 1> { float x1[2]; })screenPointWithOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)selectLabelMarker:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*)arg1 completion:(id /* block */)arg2;
- (void)setCamera:(id)arg1;
- (void)setCameraFrame:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x_1_2_1; } x_1_1_1; struct Unit<RadianUnitDescription, double> { double x_2_2_1; } x_1_1_2; struct Unit<MeterUnitDescription, double> { double x_3_2_1; } x_1_1_3; } x1; struct Unit<MeterUnitDescription, double> { double x_2_1_1; } x2; struct Unit<RadianUnitDescription, double> { double x_3_1_1; } x3; struct Unit<RadianUnitDescription, double> { double x_4_1_1; } x4; struct Unit<RadianUnitDescription, double> { double x_5_1_1; } x5; })arg1;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 animationStyle:(long long)arg6 timingCurve:(id /* block */)arg7 completion:(id /* block */)arg8;
- (void)setCurrentPoint:(const struct CollectionPoint { unsigned long long x1; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_2_1_1; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x_1_3_1[3]; } x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; struct Unit<RadianUnitDescription, float> { float x_3_1_1; } x3; struct Mercator3<double> { double x_4_1_1[3]; } x4; unsigned long long x5; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo {} *x_6_1_1; struct PhotoInfo {} *x_6_1_2; struct PhotoInfo {} *x_6_1_3; unsigned long long x_6_1_4; struct type { unsigned char x_5_2_1[288]; } x_6_1_5[6]; } x6; float x7; unsigned int x8; unsigned short x9; unsigned char x10; unsigned char x11; unsigned char x12; }*)arg1;
- (void)setCurrentSegment:(struct PointSegment { struct PointView { struct CollectionPoint { unsigned long long x_1_2_1; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x_1_4_1[3]; } x_2_3_1; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x_1_5_1[3]; } x_2_4_1; float x_2_4_2; } x_2_3_2; } x_1_2_2; struct Unit<RadianUnitDescription, float> { float x_3_3_1; } x_1_2_3; struct Mercator3<double> { double x_4_3_1[3]; } x_1_2_4; unsigned long long x_1_2_5; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo {} *x_6_3_1; struct PhotoInfo {} *x_6_3_2; struct PhotoInfo {} *x_6_3_3; unsigned long long x_6_3_4; struct type { unsigned char x_5_4_1[288]; } x_6_3_5[6]; } x_1_2_6; float x_1_2_7; unsigned int x_1_2_8; unsigned short x_1_2_9; unsigned char x_1_2_10; unsigned char x_1_2_11; unsigned char x_1_2_12; } x_1_1_1; struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> {} *x_2_2_1; struct pair<md::mun::ViewId, unsigned int> {} *x_2_2_2; struct __compressed_pair<std::__1::pair<md::mun::ViewId, unsigned int> *, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> {} *x_3_3_1; } x_2_2_3; } x_1_1_2; } x1; }*)arg1;
- (void)setVirtualParallaxEnabled:(bool)arg1;
- (void)setWidestFieldOfView:(struct Unit<RadianUnitDescription, double> { double x1; })arg1;
- (void)startPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1 panAtStartPoint:(bool)arg2;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopAnimations;
- (void)stopAnimationsExceptBump;
- (void)stopPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)tapAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)topDownMinimumZoomLevelForTileSize:(long long)arg1;
- (void)transferGestureState:(id)arg1;
- (void)updateCurrentPointView:(bool)arg1;
- (void)updatePanWithTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 translation:(double)arg2;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 newValue:(double)arg2;
- (void)updateWithTimestamp:(double)arg1;
- (id)viewportInfo;
- (bool)virtualParallaxEnabled;
- (void)willStopPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint { double x1; double x2; })arg2 completionHandler:(id /* block */)arg3;
- (void)zoomAnimated:(struct Unit<RadianUnitDescription, double> { double x1; })arg1 completion:(id /* block */)arg2;
- (void)zoomAnimatedWithDuration:(struct Unit<RadianUnitDescription, double> { double x1; })arg1 duration:(float)arg2 completion:(id /* block */)arg3;
- (double)zoomLevelAdjustmentForTileSize:(long long)arg1;

@end
