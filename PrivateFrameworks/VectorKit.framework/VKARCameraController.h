/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKARCameraController : VKScreenCameraController <VKGesturingCameraController> {
    double  _altitudeOffset;
    struct Quaternion<double> { 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } _imaginary; 
        double _scalar; 
    }  _arOrientation;
    struct RigidTransform<double, double> { 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } _translation; 
        struct Quaternion<double> { 
            struct Matrix<double, 3, 1> { 
                double _e[3]; 
            } _imaginary; 
            double _scalar; 
        } _rotation; 
    }  _arTransform;
    struct RigidTransform<double, double> { 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } _translation; 
        struct Quaternion<double> { 
            struct Matrix<double, 3, 1> { 
                double _e[3]; 
            } _imaginary; 
            double _scalar; 
        } _rotation; 
    }  _baseTransform;
    struct CameraFrame<geo::Radians, double> { 
        struct Coordinate3D<Radians, double> { 
            struct Unit<RadianUnitDescription, double> { 
                double _value; 
            } latitude; 
            struct Unit<RadianUnitDescription, double> { 
                double _value; 
            } longitude; 
            struct Unit<MeterUnitDescription, double> { 
                double _value; 
            } altitude; 
        } _target; 
        struct Unit<MeterUnitDescription, double> { 
            double _value; 
        } _distanceFromTarget; 
        struct Unit<RadianUnitDescription, double> { 
            double _value; 
        } _pitch; 
        struct Unit<RadianUnitDescription, double> { 
            double _value; 
        } _heading; 
        struct Unit<RadianUnitDescription, double> { 
            double _value; 
        } _roll; 
    }  _cameraFrame;
    struct RigidTransform<double, double> { 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } _translation; 
        struct Quaternion<double> { 
            struct Matrix<double, 3, 1> { 
                double _e[3]; 
            } _imaginary; 
            double _scalar; 
        } _rotation; 
    }  _currentARTransform;
    struct Coordinate2D<Radians, double> { 
        struct Unit<RadianUnitDescription, double> { 
            double _value; 
        } latitude; 
        struct Unit<RadianUnitDescription, double> { 
            double _value; 
        } longitude; 
    }  _currentCoordinate;
    double  _currentZoomLevel;
    struct Unit<DegreeUnitDescription, double> { 
        double _value; 
    }  _fieldOfView;
    struct Unit<RadianUnitDescription, double> { 
        double _value; 
    }  _fovy;
    struct GlobeView { int (**x1)(); struct GeoServicesLoader {} *x2; struct ManifestManager {} *x3; struct TriggerManager {} *x4; struct shared_ptr<altitude::AnchorManager> { struct AnchorManager {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct DtmCacheNode {} *x6; struct DtmRequestManager {} *x7; struct FreezeViewNode {} *x8; struct shared_ptr<mdc::Camera> { struct Camera {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; bool x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_11_1_1; } x11; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_12_1_1; } x12; } * _globeView;
    double  _height;
    long long  _interfaceOrientation;
    struct Quaternion<double> { 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } _imaginary; 
        double _scalar; 
    }  _interfaceOrientationRotation;
    struct RigidTransform<double, double> { 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } _translation; 
        struct Quaternion<double> { 
            struct Matrix<double, 3, 1> { 
                double _e[3]; 
            } _imaginary; 
            double _scalar; 
        } _rotation; 
    }  _lastARTransform;
    struct MapEngine { int (**x1)(); struct shared_ptr<md::TaskContext> { struct TaskContext {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct Device {} *x3; struct _retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_4_1_1)(); id x_4_1_2; struct _retain_objc { } x_4_1_3; struct _release_objc { } x_4_1_4; } x4; struct unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> > { struct __compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> > { struct DisplayLink {} *x_1_2_1; } x_5_1_1; } x5; struct unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct __compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct SnapshotRunLoop {} *x_1_2_1; } x_6_1_1; } x6; struct RunLoop {} *x7; struct unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> > { struct __compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> > { struct AnimationManager {} *x_1_2_1; } x_8_1_1; } x8; } * _mapEngine;
    double  _maxZoomLevel;
    struct RigidTransform<double, double> { 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } _translation; 
        struct Quaternion<double> { 
            struct Matrix<double, 3, 1> { 
                double _e[3]; 
            } _imaginary; 
            double _scalar; 
        } _rotation; 
    }  _offsetTransform;
    bool  _overrideARFieldOfView;
    struct shared_ptr<md::TaskContext> { 
        struct TaskContext {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _taskContext;
    VKTimedAnimation * _transitionAnimation;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) /* Warning: unhandled struct encoding: '{Unit<DegreeUnitDescription' */ struct  fieldOfView; /* unknown property attribute:  double>=d} */
@property (nonatomic) struct GlobeView { int (**x1)(); struct GeoServicesLoader {} *x2; struct ManifestManager {} *x3; struct TriggerManager {} *x4; struct shared_ptr<altitude::AnchorManager> { struct AnchorManager {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct DtmCacheNode {} *x6; struct DtmRequestManager {} *x7; struct FreezeViewNode {} *x8; struct shared_ptr<mdc::Camera> { struct Camera {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; bool x10; /* Warning: unhandled struct encoding: '{basic_string<char' */ struct x11; }*globeView; /* unknown property attribute:  std::__1::__cxx_atomic_base_impl<altitude::TextureMap *> >=A^{TextureMap}}}{function<altitude::TextureMap *()>={__value_func<altitude::TextureMap *()>={type=[24C]}^{__base<altitude::TextureMap *()>}}}}} */
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) float heightScale;
@property (nonatomic) struct MapEngine { int (**x1)(); struct shared_ptr<md::TaskContext> { struct TaskContext {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct Device {} *x3; /* Warning: unhandled struct encoding: '{_retain_ptr<_MapEngineRenderQueueSource *' */ struct x4; }*mapEngine; /* unknown property attribute:  geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}QQ} */
@property (nonatomic) /* Warning: unhandled struct encoding: '{RigidTransform<double' */ struct  offsetTransform; /* unknown property attribute:  1>=[3d]}d}} */
@property (nonatomic) bool overrideARFieldOfView;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (double)_fovAdjustment;
- (struct Matrix<double, 3, 1> { double x1[3]; })_intersectAndResolveWorldCollision:(const struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x_1_1_1[3]; } x1; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (void)_setupPounceAnimation:(const struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x_1_1_1; } x1; struct Unit<RadianUnitDescription, double> { double x_2_1_1; } x2; struct Unit<MeterUnitDescription, double> { double x_3_1_1; } x3; }*)arg1 duration:(double)arg2 completion:(id /* block */)arg3;
- (struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x_1_1_1[3]; } x1; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_2_1_1; double x_2_1_2; } x2; })_transformFromARCamera:(id)arg1;
- (void)_updateARContext;
- (void)_updateBaseTransform;
- (double)altitude;
- (struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x_1_1_1[3]; } x1; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_2_1_1; double x_2_1_2; } x2; })arCameraTransform;
- (void)arSessionWasInterrupted:(unsigned long long)arg1;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x_1_2_1; } x_1_1_1; struct Unit<RadianUnitDescription, double> { double x_2_2_1; } x_1_1_2; struct Unit<MeterUnitDescription, double> { double x_3_2_1; } x_1_1_3; } x1; struct Unit<MeterUnitDescription, double> { double x_2_1_1; } x2; struct Unit<RadianUnitDescription, double> { double x_3_1_1; } x3; struct Unit<RadianUnitDescription, double> { double x_4_1_1; } x4; struct Unit<RadianUnitDescription, double> { double x_5_1_1; } x5; })cameraFrame;
- (struct Geocentric<double> { double x1[3]; })cameraPosition;
- (struct { double x1; double x2; })centerCoordinate;
- (double)currentZoomLevel;
- (void)dealloc;
- (double)distanceFromCenterCoordinate;
- (struct Unit<DegreeUnitDescription, double> { double x1; })fieldOfView;
- (struct GlobeView { int (**x1)(); struct GeoServicesLoader {} *x2; struct ManifestManager {} *x3; struct TriggerManager {} *x4; struct shared_ptr<altitude::AnchorManager> { struct AnchorManager {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct DtmCacheNode {} *x6; struct DtmRequestManager {} *x7; struct FreezeViewNode {} *x8; struct shared_ptr<mdc::Camera> { struct Camera {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; bool x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_11_1_1; } x11; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_12_1_1; } x12; }*)globeView;
- (double)heading;
- (float)heightScale;
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext {} *x1; struct __shared_weak_count {} *x2; })arg1 mapDataAccess:(struct MapDataAccess { }*)arg2 animationRunner:(struct AnimationRunner { struct MapEngine {} *x1; }*)arg3 runLoopController:(struct RunLoopController { struct MapEngine {} *x1; long long x2; long long x3; }*)arg4 cameraDelegate:(id)arg5;
- (bool)isFullyPitched;
- (bool)isPitched;
- (struct MapEngine { int (**x1)(); struct shared_ptr<md::TaskContext> { struct TaskContext {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct Device {} *x3; struct _retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_4_1_1)(); id x_4_1_2; struct _retain_objc { } x_4_1_3; struct _release_objc { } x_4_1_4; } x4; struct unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> > { struct __compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> > { struct DisplayLink {} *x_1_2_1; } x_5_1_1; } x5; struct unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct __compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct SnapshotRunLoop {} *x_1_2_1; } x_6_1_1; } x6; struct RunLoop {} *x7; struct unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> > { struct __compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> > { struct AnimationManager {} *x_1_2_1; } x_8_1_1; } x8; }*)mapEngine;
- (id)mapRegion;
- (double)maximumZoomLevel;
- (double)minimumZoomLevel;
- (struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x_1_1_1[3]; } x1; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_2_1_1; double x_2_1_2; } x2; })offsetTransform;
- (bool)overrideARFieldOfView;
- (double)pitch;
- (double)presentationYaw;
- (bool)restoreViewportFromInfo:(id)arg1;
- (void)setCamera:(id)arg1;
- (void)setCurrentZoomLevel:(double)arg1;
- (void)setFieldOfView:(struct Unit<DegreeUnitDescription, double> { double x1; })arg1;
- (void)setGlobeView:(struct GlobeView { int (**x1)(); struct GeoServicesLoader {} *x2; struct ManifestManager {} *x3; struct TriggerManager {} *x4; struct shared_ptr<altitude::AnchorManager> { struct AnchorManager {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct DtmCacheNode {} *x6; struct DtmRequestManager {} *x7; struct FreezeViewNode {} *x8; struct shared_ptr<mdc::Camera> { struct Camera {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; bool x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_11_1_1; } x11; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_12_1_1; } x12; }*)arg1;
- (void)setMapEngine:(struct MapEngine { int (**x1)(); struct shared_ptr<md::TaskContext> { struct TaskContext {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct Device {} *x3; struct _retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_4_1_1)(); id x_4_1_2; struct _retain_objc { } x_4_1_3; struct _release_objc { } x_4_1_4; } x4; struct unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> > { struct __compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> > { struct DisplayLink {} *x_1_2_1; } x_5_1_1; } x5; struct unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct __compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct SnapshotRunLoop {} *x_1_2_1; } x_6_1_1; } x6; struct RunLoop {} *x7; struct unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> > { struct __compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> > { struct AnimationManager {} *x_1_2_1; } x_8_1_1; } x8; }*)arg1;
- (void)setMaxZoomLevel:(double)arg1;
- (void)setOffsetTransform:(struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x_1_1_1[3]; } x1; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x_1_2_1[3]; } x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setOverrideARFieldOfView:(bool)arg1;
- (void)setYaw:(double)arg1 animated:(bool)arg2;
- (long long)tileSize;
- (double)topDownMinimumZoomLevel;
- (void)trasitionToARModeAtCoordinate:(struct { double x1; double x2; })arg1 withDuration:(double)arg2 completion:(id /* block */)arg3;
- (void)trasitionToARModeFromCameraFrame:(const struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x_1_2_1; } x_1_1_1; struct Unit<RadianUnitDescription, double> { double x_2_2_1; } x_1_1_2; struct Unit<MeterUnitDescription, double> { double x_3_2_1; } x_1_1_3; } x1; struct Unit<MeterUnitDescription, double> { double x_2_1_1; } x2; struct Unit<RadianUnitDescription, double> { double x_3_1_1; } x3; struct Unit<RadianUnitDescription, double> { double x_4_1_1; } x4; struct Unit<RadianUnitDescription, double> { double x_5_1_1; } x5; }*)arg1 withDuration:(double)arg2 completion:(id /* block */)arg3;
- (void)updateCameraFrameFromARTransform;
- (void)updateGlobeFromCamera;
- (void)updateWithARSession:(id)arg1;
- (void)updateWithTimestamp:(double)arg1;
- (id)viewportInfo;

@end
