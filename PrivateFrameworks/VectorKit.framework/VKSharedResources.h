/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKSharedResources : NSObject <GEOResourceManifestTileGroupObserver> {
    struct unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas> > { 
        struct __compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas> > { 
            struct AlphaAtlas {} *__value_; 
        } __ptr_; 
    }  _alphaAtlas;
    struct shared_ptr<md::DataOverrideManager> { 
        struct DataOverrideManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _dataOverrideManager;
    struct FigPhotoDecompressionSession { } * _defaultDecompressionSession;
    struct unique_ptr<md::Device, std::__1::default_delete<md::Device> > { 
        struct __compressed_pair<md::Device *, std::__1::default_delete<md::Device> > { 
            struct Device {} *__value_; 
        } __ptr_; 
    }  _device;
    struct unique_ptr<ggl::DistanceAtlas, std::__1::default_delete<ggl::DistanceAtlas> > { 
        struct __compressed_pair<ggl::DistanceAtlas *, std::__1::default_delete<ggl::DistanceAtlas> > { 
            struct DistanceAtlas {} *__value_; 
        } __ptr_; 
    }  _distanceAtlas;
    struct shared_ptr<grl::FontManager> { 
        struct FontManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _grlFontManager;
    struct shared_ptr<grl::IconManager> { 
        struct IconManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _grlIconManager;
    struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas> > { 
        struct __compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> > { 
            struct IsoAlphaAtlas {} *__value_; 
        } __ptr_; 
    }  _highInflationAlphaAtlas;
    struct _retain_ptr<VKInternalIconManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        VKInternalIconManager *_obj; 
        struct _retain_objc { } _retain; 
        struct _release_objc { } _release; 
    }  _iconManager;
    struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas> > { 
        struct __compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> > { 
            struct IsoAlphaAtlas {} *__value_; 
        } __ptr_; 
    }  _isoAlphaAtlas;
    unsigned int  _referenceCount;
    struct _retain_ptr<VKResourceManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        VKResourceManager *_obj; 
        struct _retain_objc { } _retain; 
        struct _release_objc { } _release; 
    }  _resourceManager;
    struct shared_ptr<md::GeoResourceProvider> { 
        struct GeoResourceProvider {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _resourceProvider;
    struct shared_ptr<ggl::StandardLibrary> { 
        struct StandardLibrary {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _shaderLibrary;
    struct shared_ptr<md::StylesheetVendor> { 
        struct StylesheetVendor {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _stylesheetVendor;
    struct shared_ptr<md::TextureManager> { 
        struct TextureManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _textureManager;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{AlphaAtlas=BIIIf{unique_ptr<ggl::Texture2D' */ struct *alphaAtlas; /* unknown property attribute:  std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}} */
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) struct FigPhotoDecompressionSession { }*defaultDecompressionSession;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) struct Device { int x1; struct shared_ptr<ggl::Device> { struct Device {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; /* Warning: unhandled struct encoding: '{unique_ptr<md::SharedDeviceResources' */ struct x3; }*device; /* unknown property attribute:  std::__1::default_delete<md::SharedDeviceResources> >=^{SharedDeviceResources}}}} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{DistanceAtlas=III{unique_ptr<ggl::Texture2D' */ struct *distanceAtlas; /* unknown property attribute:  std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}} */
@property (nonatomic, readonly) struct Device { int (**x1)(); struct DeviceVersion { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; struct DeviceCapabilities { bool x_3_1_1; bool x_3_1_2; unsigned int x_3_1_3; unsigned int x_3_1_4; unsigned int x_3_1_5; struct DeviceSize { unsigned int x_6_2_1; unsigned int x_6_2_2; unsigned int x_6_2_3; } x_3_1_6; } x3; struct DeviceAPIProperties { int x_4_1_1; int x_4_1_2; double x_4_1_3; bool x_4_1_4; } x4; int x5; int x6; }*gglDevice;
@property (nonatomic, readonly) struct shared_ptr<grl::FontManager> { struct FontManager {} *x1; struct __shared_weak_count {} *x2; } grlFontManager;
@property (nonatomic, readonly) struct IconManager { int (**x1)(); struct shared_ptr<grl::ResourceProvider> { struct ResourceProvider {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_3_1_1; } x3; bool x4; struct PackInfo {} *x5; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_6_1_1; } x6; /* Warning: unhandled struct encoding: '{map<std::__1::pair<std::__1::basic_string<char>' */ struct x7; }*grlIconManager; /* unknown property attribute:  true> >=Q}}}{shared_ptr<grl::FontManager>=^{FontManager}^{__shared_weak_count}}} */
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{IsoAlphaAtlas=IIf{unique_ptr<ggl::Texture2D' */ struct *highInflationAlphaAtlas; /* unknown property attribute:  std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}} */
@property (nonatomic, readonly) VKInternalIconManager *iconManager;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{IsoAlphaAtlas=IIf{unique_ptr<ggl::Texture2D' */ struct *isoAlphaAtlas; /* unknown property attribute:  std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}} */
@property (nonatomic, readonly) VKResourceManager *resourceManager;
@property (nonatomic, readonly) const struct StandardLibrary { int (**x1)(); struct ResourceManager {} *x2; struct RenderResource {} *x3; struct ShaderLibraryDescriptor {} *x4; /* Warning: unhandled struct encoding: '{vector<ggl::ShaderLibrary::FunctionEntry' */ struct x5; }*shaderLibrary; /* unknown property attribute:  ggl::Allocator>=^{Allocator}}}}{shared_ptr<ggl::ShaderLibraryData>=^{ShaderLibraryData}^{__shared_weak_count}}} */
@property (nonatomic, readonly) struct shared_ptr<md::StylesheetVendor> { struct StylesheetVendor {} *x1; struct __shared_weak_count {} *x2; } stylesheetVendor;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct shared_ptr<md::TextureManager> { struct TextureManager {} *x1; struct __shared_weak_count {} *x2; } textureManager;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_addResourceUser;
- (bool)_hasResourceUsers;
- (id)_initWithDevice:(struct Device { int x1; struct shared_ptr<ggl::Device> { struct Device {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> > { struct __compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> > { struct SharedDeviceResources {} *x_1_2_1; } x_3_1_1; } x3; }*)arg1 standardLibrary:(const struct shared_ptr<ggl::StandardLibrary> { struct StandardLibrary {} *x1; struct __shared_weak_count {} *x2; }*)arg2;
- (void)_removeResourceUser;
- (struct AlphaAtlas { bool x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > { struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > { struct Texture2D {} *x_1_2_1; } x_6_1_1; } x6; }*)alphaAtlas;
- (const struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager {} *x1; struct __shared_weak_count {} *x2; }*)dataOverrideManager;
- (void)dealloc;
- (struct FigPhotoDecompressionSession { }*)defaultDecompressionSession;
- (struct Device { int x1; struct shared_ptr<ggl::Device> { struct Device {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> > { struct __compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> > { struct SharedDeviceResources {} *x_1_2_1; } x_3_1_1; } x3; }*)device;
- (struct DistanceAtlas { unsigned int x1; unsigned int x2; unsigned int x3; struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > { struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > { struct Texture2D {} *x_1_2_1; } x_4_1_1; } x4; }*)distanceAtlas;
- (struct Device { int (**x1)(); struct DeviceVersion { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; struct DeviceCapabilities { bool x_3_1_1; bool x_3_1_2; unsigned int x_3_1_3; unsigned int x_3_1_4; unsigned int x_3_1_5; struct DeviceSize { unsigned int x_6_2_1; unsigned int x_6_2_2; unsigned int x_6_2_3; } x_3_1_6; } x3; struct DeviceAPIProperties { int x_4_1_1; int x_4_1_2; double x_4_1_3; bool x_4_1_4; } x4; int x5; int x6; }*)gglDevice;
- (struct shared_ptr<grl::FontManager> { struct FontManager {} *x1; struct __shared_weak_count {} *x2; }*)grlFontManager;
- (struct IconManager { int (**x1)(); struct shared_ptr<grl::ResourceProvider> { struct ResourceProvider {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_3_1_1; } x3; bool x4; struct PackInfo {} *x5; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x_1_2_1; BOOL x_1_2_2[192]; } x_6_1_1; } x6; struct map<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock, std::__1::less<std::__1::pair<std::__1::basic_string<char>, float> >, geo::StdAllocator<std::__1::pair<const std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, grl::Allocator> > { struct __tree<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, float>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, std::__1::less<std::__1::pair<std::__1::basic_string<char>, float> >, true>, geo::StdAllocator<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, grl::Allocator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, void *>, grl::Allocator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, void *>, grl::Allocator> { struct Allocator {} *x_2_4_1; } x_2_3_2; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, float>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, std::__1::less<std::__1::pair<std::__1::basic_string<char>, float> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_7_1_1; } x7; }*)grlIconManager;
- (struct IsoAlphaAtlas { unsigned int x1; unsigned int x2; float x3; struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > { struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > { struct Texture2D {} *x_1_2_1; } x_4_1_1; } x4; struct shared_ptr<ggl::SamplerState> { struct SamplerState {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; }*)highInflationAlphaAtlas;
- (id)iconManager;
- (struct IsoAlphaAtlas { unsigned int x1; unsigned int x2; float x3; struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > { struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > { struct Texture2D {} *x_1_2_1; } x_4_1_1; } x4; struct shared_ptr<ggl::SamplerState> { struct SamplerState {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; }*)isoAlphaAtlas;
- (void)purge;
- (void)purgeDecompressSessionCachedBuffers;
- (id)resourceManager;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (const struct StandardLibrary { int (**x1)(); struct ResourceManager {} *x2; struct RenderResource {} *x3; struct ShaderLibraryDescriptor {} *x4; struct vector<ggl::ShaderLibrary::FunctionEntry, geo::StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator> > { struct FunctionEntry {} *x_5_1_1; struct FunctionEntry {} *x_5_1_2; struct __compressed_pair<ggl::ShaderLibrary::FunctionEntry *, geo::StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator> > { struct FunctionEntry {} *x_3_2_1; struct StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator> { struct Allocator {} *x_2_3_1; } x_3_2_2; } x_5_1_3; } x5; struct vector<ggl::ShaderLibrary::ShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator> > { struct ShaderEntry {} *x_6_1_1; struct ShaderEntry {} *x_6_1_2; struct __compressed_pair<ggl::ShaderLibrary::ShaderEntry *, geo::StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator> > { struct ShaderEntry {} *x_3_2_1; struct StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator> { struct Allocator {} *x_2_3_1; } x_3_2_2; } x_6_1_3; } x6; }*)shaderLibrary;
- (struct shared_ptr<md::StylesheetVendor> { struct StylesheetVendor {} *x1; struct __shared_weak_count {} *x2; })stylesheetVendor;
- (struct shared_ptr<md::TextureManager> { struct TextureManager {} *x1; struct __shared_weak_count {} *x2; })textureManager;

@end
