/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKImage : NSObject {
    struct CGPoint { 
        double x; 
        double y; 
    }  _anchorPoint;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _collisionRect;
    NSData * _data;
    struct Texture2D { int (**x1)(); struct ResourceManager {} *x2; struct RenderResource {} *x3; int (**x4)(); char *x5; int x6; int x7; int x8; int x9; unsigned int x10; int x11; unsigned int x12; unsigned int x13; unsigned int x14; struct shared_ptr<const ggl::TextureDataAbstract> { struct TextureDataAbstract {} *x_15_1_1; struct __shared_weak_count {} *x_15_1_2; } x15; bool x16; bool x17; bool x18; struct shared_ptr<ggl::SamplerState> { struct SamplerState {} *x_19_1_1; struct __shared_weak_count {} *x_19_1_2; } x19; } * _gglTexture;
    bool  _hasAnchorPoint;
    bool  _hasCollisionRect;
    unsigned char  _imageHash;
    struct CGImage { } * _imageRef;
    struct atomic<bool> { 
        struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { 
            _Atomic bool __a_value; 
        } __a_; 
    }  _isImageReady;
    struct atomic<bool> { 
        struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { 
            _Atomic bool __a_value; 
        } __a_; 
    }  _isTextureReady;
    NSString * _name;
    VKResourceManager * _resourceManager;
    double  _scale;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
    struct shared_ptr<md::TextureAtlasRegion> { 
        struct TextureAtlasRegion {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _textureAtlasRegion;
    struct Box<float, 2> { 
        struct Matrix<float, 2, 1> { 
            float _e[2]; 
        } _minimum; 
        struct Matrix<float, 2, 1> { 
            float _e[2]; 
        } _maximum; 
    }  _textureCoordinates;
    bool  _usedAsTextureAndImage;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_prepareImage;
- (void)_prepareTextureWithAtlas:(struct TextureAtlas { struct vector<md::TextureAtlas::RelocateItem, std::__1::allocator<md::TextureAtlas::RelocateItem> > { struct RelocateItem {} *x_1_1_1; struct RelocateItem {} *x_1_1_2; struct __compressed_pair<md::TextureAtlas::RelocateItem *, std::__1::allocator<md::TextureAtlas::RelocateItem> > { struct RelocateItem {} *x_3_2_1; } x_1_1_3; } x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; int x3; struct Matrix<unsigned int, 2, 1> { unsigned int x_4_1_1[2]; } x4; struct Matrix<unsigned int, 2, 1> { unsigned int x_5_1_1[2]; } x5; struct Matrix<unsigned int, 2, 1> { unsigned int x_6_1_1[2]; } x6; }*)arg1;
- (struct CGPoint { double x1; double x2; })anchorPoint;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })collisionRect;
- (int)compareTo:(id)arg1;
- (void)dealloc;
- (struct Texture2D { int (**x1)(); struct ResourceManager {} *x2; struct RenderResource {} *x3; int (**x4)(); char *x5; int x6; int x7; int x8; int x9; unsigned int x10; int x11; unsigned int x12; unsigned int x13; unsigned int x14; struct shared_ptr<const ggl::TextureDataAbstract> { struct TextureDataAbstract {} *x_15_1_1; struct __shared_weak_count {} *x_15_1_2; } x15; bool x16; bool x17; bool x18; struct shared_ptr<ggl::SamplerState> { struct SamplerState {} *x_19_1_1; struct __shared_weak_count {} *x_19_1_2; } x19; }*)gglTexture;
- (struct CGImage { }*)image;
- (id)initWithCGImage:(struct CGImage { }*)arg1 scale:(double)arg2;
- (id)initWithCGImage:(struct CGImage { }*)arg1 scale:(double)arg2 usedAsTextureAndImage:(bool)arg3;
- (id)initWithData:(id)arg1 scale:(double)arg2;
- (id)initWithData:(id)arg1 scale:(double)arg2 usedAsTextureAndImage:(bool)arg3;
- (id)initWithName:(id)arg1 scale:(double)arg2 resourceManager:(id)arg3;
- (void)prepareTextureWithAtlas:(struct TextureAtlas { struct vector<md::TextureAtlas::RelocateItem, std::__1::allocator<md::TextureAtlas::RelocateItem> > { struct RelocateItem {} *x_1_1_1; struct RelocateItem {} *x_1_1_2; struct __compressed_pair<md::TextureAtlas::RelocateItem *, std::__1::allocator<md::TextureAtlas::RelocateItem> > { struct RelocateItem {} *x_3_2_1; } x_1_1_3; } x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; int x3; struct Matrix<unsigned int, 2, 1> { unsigned int x_4_1_1[2]; } x4; struct Matrix<unsigned int, 2, 1> { unsigned int x_5_1_1[2]; } x5; struct Matrix<unsigned int, 2, 1> { unsigned int x_6_1_1[2]; } x6; }*)arg1;
- (double)scale;
- (void)setAnchorPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setCollisionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })size;
- (const struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; }*)textureCoordinates;

@end
