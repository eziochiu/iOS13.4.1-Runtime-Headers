/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKIconModifiers : NSObject {
    unsigned long long  _countryCode;
    struct IconModifiers { 
        bool _isGlyphHidden; 
        bool _isGlyphOnly; 
        float _opacity; 
        float _scale; 
        struct optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB> > { 
            bool _hasValue; 
            union ValueUnion { 
                unsigned char data[4]; 
                struct Color<unsigned char, 4, geo::ColorSpace::sRGB> { 
                    struct Matrix<unsigned char, 4, 1> { 
                        unsigned char _e[4]; 
                    } _backing; 
                } type; 
            } _value; 
        } _textColor; 
        struct optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB> > { 
            bool _hasValue; 
            union ValueUnion { 
                unsigned char data[4]; 
                struct Color<unsigned char, 4, geo::ColorSpace::sRGB> { 
                    struct Matrix<unsigned char, 4, 1> { 
                        unsigned char _e[4]; 
                    } _backing; 
                } type; 
            } _value; 
        } _transitLineColor; 
        struct optional<float> { 
            bool _hasValue; 
            union ValueUnion { 
                unsigned char data[4]; 
                float type; 
            } _value; 
        } _fontSize; 
        struct optional<float> { 
            bool _hasValue; 
            union ValueUnion { 
                unsigned char data[4]; 
                float type; 
            } _value; 
        } _tailDirection; 
        struct optional<float> { 
            bool _hasValue; 
            union ValueUnion { 
                unsigned char data[4]; 
                float type; 
            } _value; 
        } _textBaseline; 
        struct optional<gm::Matrix<float, 2, 1> > { 
            bool _hasValue; 
            union ValueUnion { 
                unsigned char data[8]; 
                struct Matrix<float, 2, 1> { 
                    float _e[2]; 
                } type; 
            } _value; 
        } _fillSize; 
        struct optional<std::__1::basic_string<char> > { 
            bool _hasValue; 
            union ValueUnion { 
                unsigned char data[24]; 
                struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { 
                    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { 
                        struct __rep { 
                            union { 
                                struct __long { 
                                    char *__data_; 
                                    unsigned long long __size_; 
                                    unsigned long long __cap_; 
                                } __l; 
                                struct __short { 
                                    BOOL __data_[23]; 
                                    struct { 
                                        unsigned char __size_; 
                                    } ; 
                                } __s; 
                                struct __raw { 
                                    unsigned long long __words[3]; 
                                } __r; 
                            } ; 
                        } __value_; 
                    } __r_; 
                } type; 
            } _value; 
        } _fontName; 
        struct map<unsigned short, std::__1::basic_string<char>, std::__1::less<unsigned short>, geo::StdAllocator<std::__1::pair<const unsigned short, std::__1::basic_string<char> >, grl::Allocator> > { 
            struct __tree<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::less<unsigned short>, true>, geo::StdAllocator<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, grl::Allocator> > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, void *>, grl::Allocator> > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __value_; 
                    struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, void *>, grl::Allocator> { 
                        struct Allocator {} *_allocator; 
                    } __value_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::less<unsigned short>, true> > { 
                    unsigned long long __value_; 
                } __pair3_; 
            } __tree_; 
        } _text; 
    }  _iconModifiers;
    bool  _interactive;
    bool  _navMode;
    bool  _nightMode;
    bool  _searchResult;
    bool  _transitMode;
    unsigned long long  _variant;
    long long  _zoom;
}

@property (nonatomic) unsigned long long countryCode;
@property (nonatomic) bool interactive;
@property (nonatomic) bool navMode;
@property (nonatomic) bool nightMode;
@property (getter=isSearchResult, nonatomic) bool searchResult;
@property (nonatomic) bool transitMode;
@property (nonatomic) unsigned long long variant;
@property (nonatomic) long long zoom;

- (id).cxx_construct;
- (void).cxx_destruct;
- (unsigned long long)countryCode;
- (struct IconModifiers { bool x1; bool x2; float x3; float x4; struct optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB> > { bool x_5_1_1; union ValueUnion { unsigned char x_2_2_1[4]; struct Color<unsigned char, 4, geo::ColorSpace::sRGB> { struct Matrix<unsigned char, 4, 1> { unsigned char x_1_4_1[4]; } x_2_3_1; } x_2_2_2; } x_5_1_2; } x5; struct optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB> > { bool x_6_1_1; union ValueUnion { unsigned char x_2_2_1[4]; struct Color<unsigned char, 4, geo::ColorSpace::sRGB> { struct Matrix<unsigned char, 4, 1> { unsigned char x_1_4_1[4]; } x_2_3_1; } x_2_2_2; } x_6_1_2; } x6; struct optional<float> { bool x_7_1_1; union ValueUnion { unsigned char x_2_2_1[4]; float x_2_2_2; } x_7_1_2; } x7; struct optional<float> { bool x_8_1_1; union ValueUnion { unsigned char x_2_2_1[4]; float x_2_2_2; } x_8_1_2; } x8; struct optional<float> { bool x_9_1_1; union ValueUnion { unsigned char x_2_2_1[4]; float x_2_2_2; } x_9_1_2; } x9; struct optional<gm::Matrix<float, 2, 1> > { bool x_10_1_1; union ValueUnion { unsigned char x_2_2_1[8]; struct Matrix<float, 2, 1> { float x_2_3_1[2]; } x_2_2_2; } x_10_1_2; } x10; }*)cppModifiers;
- (id)init;
- (id)initWithModifiers:(const struct IconModifiers { bool x1; bool x2; float x3; float x4; struct optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB> > { bool x_5_1_1; union ValueUnion { unsigned char x_2_2_1[4]; struct Color<unsigned char, 4, geo::ColorSpace::sRGB> { struct Matrix<unsigned char, 4, 1> { unsigned char x_1_4_1[4]; } x_2_3_1; } x_2_2_2; } x_5_1_2; } x5; struct optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB> > { bool x_6_1_1; union ValueUnion { unsigned char x_2_2_1[4]; struct Color<unsigned char, 4, geo::ColorSpace::sRGB> { struct Matrix<unsigned char, 4, 1> { unsigned char x_1_4_1[4]; } x_2_3_1; } x_2_2_2; } x_6_1_2; } x6; struct optional<float> { bool x_7_1_1; union ValueUnion { unsigned char x_2_2_1[4]; float x_2_2_2; } x_7_1_2; } x7; struct optional<float> { bool x_8_1_1; union ValueUnion { unsigned char x_2_2_1[4]; float x_2_2_2; } x_8_1_2; } x8; struct optional<float> { bool x_9_1_1; union ValueUnion { unsigned char x_2_2_1[4]; float x_2_2_2; } x_9_1_2; } x9; struct optional<gm::Matrix<float, 2, 1> > { bool x_10_1_1; union ValueUnion { unsigned char x_2_2_1[8]; struct Matrix<float, 2, 1> { float x_2_3_1[2]; } x_2_2_2; } x_10_1_2; } x10; }*)arg1;
- (bool)interactive;
- (bool)isSearchResult;
- (bool)navMode;
- (bool)nightMode;
- (void)setCountryCode:(unsigned long long)arg1;
- (void)setGlyphOnly:(bool)arg1;
- (void)setInteractive:(bool)arg1;
- (void)setNavMode:(bool)arg1;
- (void)setNightMode:(bool)arg1;
- (void)setSearchResult:(bool)arg1;
- (void)setText:(id)arg1;
- (void)setTransitLineColor:(struct { float x1; float x2; float x3; float x4; })arg1;
- (void)setTransitMode:(bool)arg1;
- (void)setVariant:(unsigned long long)arg1;
- (void)setZoom:(long long)arg1;
- (bool)transitMode;
- (unsigned long long)variant;
- (long long)zoom;

@end
