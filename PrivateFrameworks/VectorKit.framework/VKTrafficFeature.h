/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKTrafficFeature : NSObject <NSCopying> {
    double  _approachingDistanceInMeters;
    struct PolylineCoordinate { 
        unsigned int index; 
        float offset; 
    }  _approachingRouteOffset;
    int  _groupIdentifier;
    struct { 
        double latitude; 
        double longitude; 
    }  _location;
    float  _maxZoom;
    float  _minZoom;
    GEOLatLng * _position;
    unsigned int  _priority;
    struct PolylineCoordinate { 
        unsigned int index; 
        float offset; 
    }  _routeOffset;
    bool  _shouldUpdateStyle;
    long long  _state;
    long long  _trafficFeatureType;
    NSString * _uniqueIdentifier;
    struct Matrix<double, 3, 1> { 
        double _e[3]; 
    }  _worldPoint;
}

@property (nonatomic, readonly) double approachingDistanceInMeters;
@property (nonatomic) struct PolylineCoordinate { unsigned int x1; float x2; } approachingRouteOffset;
@property (nonatomic, readonly) int groupIdentifier;
@property (nonatomic, readonly) bool isGrouped;
@property (nonatomic) long long labelState;
@property (nonatomic) struct { double x1; double x2; } location;
@property (nonatomic) float maxZoom;
@property (nonatomic, readonly) struct Mercator2<double> { double x1[2]; } mercatorPoint;
@property (nonatomic) float minZoom;
@property (nonatomic, copy) GEOLatLng *position;
@property (nonatomic, readonly) unsigned int priority;
@property (nonatomic) struct PolylineCoordinate { unsigned int x1; float x2; } routeOffset;
@property (nonatomic) bool shouldUpdateStyle;
@property (nonatomic, readonly) long long trafficFeatureType;
@property (nonatomic, readonly) NSString *uniqueIdentifier;
@property (nonatomic) /* Warning: unhandled struct encoding: '{Matrix<double' */ struct  worldPoint; /* unknown property attribute:  1>=[3d]} */

+ (id)newTrafficFeatureForEnrouteNotice:(id)arg1 onRoute:(id)arg2;

- (id).cxx_construct;
- (double)approachingDistanceInMeters;
- (struct PolylineCoordinate { unsigned int x1; float x2; })approachingRouteOffset;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (int)groupIdentifier;
- (id)initWithEnrouteNotice:(id)arg1;
- (id)initWithType:(long long)arg1;
- (bool)isAheadButNotApproaching;
- (bool)isApproaching;
- (bool)isBehind;
- (bool)isCamera;
- (bool)isEqual:(id)arg1;
- (bool)isGrouped;
- (bool)isIncident;
- (bool)isSignal;
- (long long)labelState;
- (struct { double x1; double x2; })location;
- (float)maxZoom;
- (struct Mercator2<double> { double x1[2]; })mercatorPoint;
- (float)minZoom;
- (id)position;
- (unsigned int)priority;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeOffset;
- (void)setApproachingRouteOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setLabelState:(long long)arg1;
- (void)setLocation:(struct { double x1; double x2; })arg1;
- (void)setMaxZoom:(float)arg1;
- (void)setMinZoom:(float)arg1;
- (void)setPosition:(id)arg1;
- (void)setRouteOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setShouldUpdateStyle:(bool)arg1;
- (void)setWorldPoint:(struct Matrix<double, 3, 1> { double x1[3]; })arg1;
- (bool)shouldUpdateStyle;
- (long long)trafficFeatureType;
- (id)uniqueIdentifier;
- (void)updateLabelStateForRouteUserOffset:(const struct PolylineCoordinate { unsigned int x1; float x2; }*)arg1;
- (struct Matrix<double, 3, 1> { double x1[3]; })worldPoint;

@end
