/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKPolylineOverlayRenderRegion : NSObject {
    struct set<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > > { 
        struct __tree<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::RouteLineData>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::RouteLineData> > > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _routeLineDatas;
    struct MultiRectRegion { 
        struct set<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > > { 
            struct __tree<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
                struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<gm::Box<double, 2>, void *> > > { 
                    struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                        struct __tree_node_base<void *> {} *__left_; 
                    } __value_; 
                } __pair1_; 
                struct __compressed_pair<unsigned long, md::MultiRectSetCompare> { 
                    unsigned long long __value_; 
                } __pair3_; 
            } __tree_; 
        } _rects; 
    }  _snappingRegion;
    struct Box<double, 2> { 
        struct Matrix<double, 2, 1> { 
            double _e[2]; 
        } _minimum; 
        struct Matrix<double, 2, 1> { 
            double _e[2]; 
        } _maximum; 
    }  _visibleRect;
}

@property (nonatomic, readonly) const /* Warning: unhandled struct encoding: '{set<std::__1::shared_ptr<md::RouteLineData>' */ struct *routeLineDatas; /* unknown property attribute:  std::__1::less<std::__1::shared_ptr<md::RouteLineData> > >=Q}}} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{Box<double' */ struct  visibleRect; /* unknown property attribute:  1>=[2d]}} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)initForVisibleRect:(const struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; }*)arg1 snappingRegion:(const struct MultiRectRegion { struct set<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > > { struct __tree<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<gm::Box<double, 2>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::MultiRectSetCompare> { unsigned long long x_3_3_1; } x_1_2_3; } x_1_1_1; } x1; }*)arg2 routeLineDatas:(const struct set<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > > { struct __tree<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::RouteLineData>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::RouteLineData> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg3;
- (bool)isEquivalentToNewRegion:(id)arg1;
- (const struct set<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > > { struct __tree<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::RouteLineData>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::RouteLineData> > > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)routeLineDatas;
- (const struct MultiRectRegion { struct set<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > > { struct __tree<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<gm::Box<double, 2>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, md::MultiRectSetCompare> { unsigned long long x_3_3_1; } x_1_2_3; } x_1_1_1; } x1; }*)snappingRegion;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; })visibleRect;

@end
