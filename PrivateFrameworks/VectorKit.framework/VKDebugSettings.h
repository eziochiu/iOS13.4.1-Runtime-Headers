/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKDebugSettings : NSObject {
    bool  _altitudeDisableC3mTextureLoading;
    float  _altitudeFadeSpeed;
    bool  _altitudeFreezeViewNode;
    float  _altitudeHideMeshTime;
    bool  _altitudeHighResSatellite;
    float  _altitudeLodScale;
    bool  _altitudeMipmapFlyover;
    bool  _altitudeMipmapObjectTree;
    bool  _altitudeMipmapSatellite;
    bool  _altitudePauseLoading;
    bool  _altitudePrintRenderedTilesStat;
    bool  _altitudeShowNightLight;
    bool  _altitudeShowTileBounds;
    bool  _altitudeShowTriggerbounds;
    bool  _altitudeTexturePaging;
    float  _altitudeTileQualityThreshold;
    bool  _altitudeTourSpeedup;
    float  _altitudeTourSpeedupFactor;
    float  _arDefaultHeight;
    bool  _arOverrideDefaults;
    unsigned long long  _arPinchGesture;
    bool  _arRenderAtNativeRate;
    unsigned long long  _arSwipeGesture;
    float  _arVirtualPlaneHeight;
    bool  _constantlyChangeTileGroup;
    double  _constantlyChangeTileGroupInterval;
    struct unique_ptr<(anonymous namespace)::CustomLandmarksContainer, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer> >="__ptr_"{__compressed_pair<(anonymous namespace)::CustomLandmarksContainer *, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer> >="__value_"^{CustomLandmarksContainer {}  _customLandmarks;
    NSMutableDictionary * _customTiles;
    int  _debugOverlayOffsetX;
    int  _debugOverlayOffsetY;
    struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { 
        struct StylesheetManager<gss::PropertyID> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _debugStyleManager;
    bool  _decodeStyleNames;
    float  _defaultFovLandscape;
    float  _defaultFovPortrait;
    bool  _disableBackgroundLabelLayout;
    bool  _disableGlyphTextureAtlas;
    bool  _disableIconTextureAtlas;
    bool  _disableIntraLinkTransitLineCrossings;
    bool  _disableOverlayTextConsole;
    bool  _disableRoadSignLimit;
    bool  _disableRoute;
    bool  _disableStylesheetAnimations;
    bool  _disableTransitLineDrawing;
    bool  _disableTransitLineGroupMerging;
    bool  _disableTransitLineMerging;
    bool  _displayTextureAtlas;
    bool  _dontMapMatchToSnappedRouteLine;
    bool  _dontMatchRouteLine;
    bool  _dontVerifyRouteToTransitSnapping;
    bool  _drawDebugTransit;
    bool  _drawPerformanceHUD;
    bool  _dumpRouteAndPath;
    bool  _dumpTransitTileContents;
    bool  _enableARDebugConsole;
    bool  _enableAROmniTileLoader;
    bool  _enableEtaLabelDebugging;
    bool  _enableEtaLabelRectDebugging;
    bool  _enableLoggingInLockScreen;
    bool  _enableMuninMiniMapCollectionPoints;
    bool  _enableMuninMiniMapComposedEdgeRoadColoring;
    bool  _enableMuninMiniMapRoadWidths;
    bool  _enableMuninMiniMapRoadZData;
    bool  _enableMuninRoadNetworkMiniMap;
    bool  _enableRouteIntersectionTesting;
    bool  _enableRouteShareSectionDebugging;
    bool  _enableSignPostEvents;
    bool  _enableTrafficFeatureLabelDebugging;
    unsigned int  _etaLabelDebugOrientationMask;
    unsigned long long  _etaLabelDebugScore;
    bool  _etaLabelsAvoidScreenEdges;
    bool  _expandedPerformanceHUD;
    NSMutableArray * _footprintsToSuppress;
    bool  _forceBumpAll;
    bool  _forceBumpNextTap;
    bool  _forceEtaLabelPlacement;
    bool  _hideClientPositionedFeatures;
    bool  _hideDirectionalArrows;
    bool  _hideServerPositionedRoadFeatures;
    bool  _hideServerPositionedTransitFeatures;
    bool  _highlightRouteLineSnappingRegion;
    bool  _highlightRouteLineSnappingStatus;
    bool  _holdOntoStyleAttributes;
    unsigned char  _intermediateLodOverride;
    bool  _isInstalledInLockScreen;
    bool  _keepTooCloseServerPositionedTransitFeatures;
    bool  _labelAllowDefaultStyle;
    bool  _labelAutoOffsetRoadText;
    bool  _labelBaseSSLPMEnabled;
    bool  _labelCollideContinuously;
    bool  _labelCollisionDisabled;
    bool  _labelDedupingDisabled;
    bool  _labelFacingCullDisabled;
    bool  _labelFlipAlternatePositionsEnable;
    bool  _labelHideLineFeatures;
    bool  _labelHidePointFeatures;
    bool  _labelHighlighting;
    bool  _labelHighlightingTransitFeaturesOnly;
    bool  _labelHighlightingVerboseLoggingEnabled;
    bool  _labelOcclusionDisabled;
    bool  _labelStyleOverridesDisabled;
    bool  _labelTileDecodeEnabled;
    bool  _labelTransitLineCollisionEnabled;
    bool  _labelUpdateMapTilesContinuously;
    unsigned char  _labelerOutputIndex;
    struct { 
        bool borders; 
        bool folds; 
        bool angles; 
        float minAngle; 
        float maxAngle; 
    }  _landmark2DStrokeSettings;
    bool  _layoutContinuously;
    bool  _lightingAccelerateTime;
    bool  _lightingEnableAmbient;
    bool  _lightingEnableLight1;
    bool  _lightingEnableLight2;
    bool  _lightingEnableLight3;
    bool  _lightingOverrideAmbient;
    bool  _lightingOverrideLight1;
    bool  _lightingOverrideLight2;
    bool  _lightingOverrideLight3;
    bool  _lightingStopTime;
    unsigned char  _lightingStoppedTimeHour;
    bool  _loadGreenTraffic;
    unsigned char  _lodOverride;
    float  _maxFovLandscape;
    float  _maxFovPortrait;
    float  _maxFovSpring;
    float  _minFov;
    float  _minFovSpring;
    unsigned long long  _muninAvailabilityOverride;
    float  _muninCameraPanOffset;
    bool  _muninDebugLayer;
    bool  _muninGraphConnections;
    bool  _muninIgnorePlacesMetadata;
    unsigned long long  _muninIntermediatePointStep;
    bool  _muninOverrideFov;
    bool  _muninOverrideParallax;
    float  _muninParallaxDamper;
    float  _muninParallaxScale;
    float  _muninParallaxSpring;
    bool  _muninReplayLastTap;
    float  _muninRoadNetworkMiniMapAreaInMeters;
    bool  _muninShowRigTransitionInfo;
    bool  _muninSlowMotion;
    struct { 
        float x; 
        float y; 
        double latitude; 
        double longitude; 
        float yaw; 
        float pitch; 
    }  _muninTapState;
    float  _muninTransitionMaxResolution;
    float  _muninTransitionMinResolution;
    struct { 
        float r; 
        float g; 
        float b; 
        float a; 
    }  _overrideAmbient;
    bool  _overrideIntermediateLod;
    struct { 
        float r; 
        float g; 
        float b; 
        float a; 
    }  _overrideLight1;
    float  _overrideLight1Altitude;
    float  _overrideLight1Azimuth;
    struct { 
        float r; 
        float g; 
        float b; 
        float a; 
    }  _overrideLight2;
    float  _overrideLight2Altitude;
    float  _overrideLight2Azimuth;
    struct { 
        float r; 
        float g; 
        float b; 
        float a; 
    }  _overrideLight3;
    float  _overrideLight3Altitude;
    float  _overrideLight3Azimuth;
    bool  _overrideLod;
    bool  _overrideNeworkDefaultsBaseSSLPMSwitch;
    bool  _paintBuildings;
    bool  _paintCoastlines;
    bool  _paintJunctions;
    bool  _paintKeysInView;
    bool  _paintLabelBounds;
    bool  _paintLabelCollisionLines;
    bool  _paintLabelCounts;
    bool  _paintLabelRoadFeatures;
    bool  _paintLandcoverTiles;
    bool  _paintLoadReason;
    bool  _paintMapTiles;
    bool  _paintPoiTiles;
    bool  _paintPointTiles;
    bool  _paintPolygonLayerData;
    bool  _paintPolygonTiles;
    bool  _paintRoadBoundaries;
    bool  _paintRoadSigns;
    bool  _paintRoadTileData;
    bool  _paintRoadTiles;
    bool  _paintRoadsStitchedByName;
    bool  _paintSelectedMapTiles;
    bool  _paintStandardLabelMapData;
    bool  _paintTiles;
    bool  _paintTransitCounts;
    bool  _paintVenues;
    bool  _paintVertices;
    bool  _prioritizeTrafficSkeleton;
    bool  _readLandmarksFromDisk;
    bool  _realisticWireframeEnabled;
    float  _ribbonCrispness;
    float  _sdfGlyphShaderUpscaleFactor;
    float  _sdfGlyphSuperSampleKernelSize;
    struct GEOTileSetRegion { 
        unsigned int _maxX; 
        unsigned int _maxY; 
        unsigned int _maxZ; 
        unsigned int _minX; 
        unsigned int _minY; 
        unsigned int _minZ; 
    }  _selectedMapTilesToPaint;
    bool  _shouldFreezeLayoutCamera;
    bool  _shouldOverrideSuperSampleKernelSize;
    bool  _shouldOverrideUpscaleFactor;
    bool  _shouldUseSDFGlyphs;
    bool  _shouldUseSDFSuperSampling;
    bool  _shouldUseTestTileLoader;
    bool  _showManeuverPoints;
    bool  _showNavCameraDebugConsole;
    bool  _showNavCameraDebugConsoleAttributes;
    bool  _showNavCameraDebugConsoleProperties;
    bool  _showNavCameraDebugLegend;
    bool  _showNavCameraDebugOverlay;
    bool  _showNavLabelOverlay;
    bool  _showTrafficCasing;
    bool  _slowMotionBump;
    bool  _suppressFootprints;
    bool  _textlessPOIsEnabled;
    float  _textlessPOIsMinZoom;
    unsigned char  _textureAtlasIndex;
    unsigned short  _textureAtlasPageIndex;
    bool  _texturedTrafficCasing;
    bool  _traceEtaDebugLog;
    bool  _trackingCameraZoomFurther;
    bool  _transitHighlighting;
    bool  _useBuildingShadowTexture;
    bool  _useGeoResourceLib;
    bool  _useMetalRenderer;
    bool  _useStaticTrafficFeed;
    bool  shouldOverrideSuperSampleKernelSize;
}

@property (nonatomic) bool altitudeDisableC3mTextureLoading;
@property (nonatomic) float altitudeFadeSpeed;
@property (nonatomic) bool altitudeFreezeViewNode;
@property (nonatomic) float altitudeHideMeshTime;
@property (nonatomic) bool altitudeHighResSatellite;
@property (nonatomic) float altitudeLodScale;
@property (nonatomic) bool altitudeMipmapFlyover;
@property (nonatomic) bool altitudeMipmapObjectTree;
@property (nonatomic) bool altitudeMipmapSatellite;
@property (nonatomic) bool altitudePauseLoading;
@property (nonatomic) bool altitudePrintRenderedTilesStat;
@property (nonatomic) bool altitudeShowNightLight;
@property (nonatomic) bool altitudeShowTileBounds;
@property (nonatomic) bool altitudeShowTriggerBounds;
@property (nonatomic) bool altitudeTexturePaging;
@property (nonatomic) float altitudeTileQualityThreshold;
@property (nonatomic) bool altitudeTourSpeedup;
@property (nonatomic) float altitudeTourSpeedupFactor;
@property (nonatomic) float arDefaultHeight;
@property (nonatomic) bool arOverrideDefaults;
@property (nonatomic) unsigned long long arPinchGesture;
@property (nonatomic) bool arRenderAtNativeRate;
@property (nonatomic) unsigned long long arSwipeGesture;
@property (nonatomic) float arVirtualPlaneHeight;
@property (nonatomic) bool constantlyChangeTileGroup;
@property (nonatomic) double constantlyChangeTileGroupInterval;
@property (nonatomic) int debugOverlayOffsetX;
@property (nonatomic) int debugOverlayOffsetY;
@property (nonatomic) struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; } debugStyleManager;
@property (nonatomic) bool decodeStyleNames;
@property (nonatomic) float defaultFovLandscape;
@property (nonatomic) float defaultFovPortrait;
@property (nonatomic) bool disableBackgroundLabelLayout;
@property (nonatomic) bool disableGlyphTextureAtlas;
@property (nonatomic) bool disableIconTextureAtlas;
@property (nonatomic) bool disableIntraLinkTransitLineCrossings;
@property (nonatomic) bool disableOverlayTextConsole;
@property (nonatomic) bool disableRoadSignLimit;
@property (nonatomic) bool disableRoute;
@property (nonatomic) bool disableStylesheetAnimations;
@property (nonatomic) bool disableTransitLineDrawing;
@property (nonatomic) bool disableTransitLineGroupMerging;
@property (nonatomic) bool disableTransitLineMerging;
@property (nonatomic) bool displayTextureAtlas;
@property (nonatomic) bool dontMapMatchToSnappedRouteLine;
@property (nonatomic) bool dontMatchRouteLine;
@property (nonatomic) bool dontVerifyRouteToTransitSnapping;
@property (nonatomic) bool drawDebugTransit;
@property (nonatomic) bool drawPerformanceHUD;
@property (nonatomic) bool dumpRouteAndPath;
@property (nonatomic) bool dumpTransitTileContents;
@property (nonatomic) bool enableARDebugConsole;
@property (nonatomic) bool enableAROmniTileLoader;
@property (nonatomic) bool enableEtaLabelDebugging;
@property (nonatomic) bool enableEtaLabelRectDebugging;
@property (nonatomic) bool enableLoggingInLockScreen;
@property (nonatomic) bool enableMuninMiniMapCollectionPoints;
@property (nonatomic) bool enableMuninMiniMapComposedEdgeRoadColoring;
@property (nonatomic) bool enableMuninMiniMapRoadWidths;
@property (nonatomic) bool enableMuninMiniMapRoadZData;
@property (nonatomic) bool enableMuninRoadNetworkMiniMap;
@property (nonatomic) bool enableRouteIntersectionTesting;
@property (nonatomic) bool enableRouteShareSectionDebugging;
@property (nonatomic) bool enableSignPostEvents;
@property (nonatomic) bool enableTrafficFeatureLabelDebugging;
@property (nonatomic) unsigned int etaLabelDebugOrientationMask;
@property (nonatomic) unsigned long long etaLabelDebugScore;
@property (nonatomic) bool etaLabelsAvoidScreenEdges;
@property (nonatomic) bool expandedPerformanceHUD;
@property (nonatomic, retain) NSMutableArray *footprintsToSuppress;
@property (nonatomic) bool forceBumpAll;
@property (nonatomic) bool forceBumpNextTap;
@property (nonatomic) bool forceEtaLabelPlacement;
@property (nonatomic) bool hideClientPositionedFeatures;
@property (nonatomic) bool hideDirectionalArrows;
@property (nonatomic) bool hideServerPositionedRoadFeatures;
@property (nonatomic) bool hideServerPositionedTransitFeatures;
@property (nonatomic) bool highlightRouteLineSnappingStatus;
@property (nonatomic) bool holdOntoStyleAttributes;
@property (nonatomic) unsigned char intermediateLodOverride;
@property (nonatomic) bool isInstalledInLockScreen;
@property (nonatomic) bool keepTooCloseServerPositionedTransitFeatures;
@property (nonatomic) bool labelAllowDefaultStyle;
@property (nonatomic) bool labelAutoOffsetRoadText;
@property (nonatomic) bool labelBaseSSLPMEnabled;
@property (nonatomic) bool labelCollideContinuously;
@property (nonatomic) bool labelCollisionDisabled;
@property (nonatomic) bool labelDedupingDisabled;
@property (nonatomic) bool labelFacingCullDisabled;
@property (nonatomic) bool labelFlipAlternatePositionsEnable;
@property (nonatomic) bool labelHideLineFeatures;
@property (nonatomic) bool labelHidePointFeatures;
@property (nonatomic) bool labelHighlighting;
@property (nonatomic) bool labelHighlightingTransitFeaturesOnly;
@property (nonatomic) bool labelHighlightingVerboseLoggingEnabled;
@property (nonatomic) bool labelOcclusionDisabled;
@property (nonatomic) bool labelStyleOverridesDisabled;
@property (nonatomic) bool labelTileDecodeEnabled;
@property (nonatomic) bool labelTransitLineCollisionEnabled;
@property (nonatomic) bool labelUpdateMapTilesContinuously;
@property (nonatomic) unsigned char labelerOutputIndex;
@property (nonatomic) struct { bool x1; bool x2; bool x3; float x4; float x5; } landmark2DStrokeSettings;
@property (nonatomic) bool layoutContinuously;
@property (nonatomic) bool lightingAccelerateTime;
@property (nonatomic) bool lightingEnableAmbient;
@property (nonatomic) bool lightingEnableLight1;
@property (nonatomic) bool lightingEnableLight2;
@property (nonatomic) bool lightingEnableLight3;
@property (nonatomic) bool lightingOverrideAmbient;
@property (nonatomic) bool lightingOverrideLight1;
@property (nonatomic) bool lightingOverrideLight2;
@property (nonatomic) bool lightingOverrideLight3;
@property (nonatomic) bool lightingStopTime;
@property (nonatomic) unsigned char lightingStoppedTimeHour;
@property (nonatomic) bool loadGreenTraffic;
@property (nonatomic) unsigned char lodOverride;
@property (nonatomic) float maxFovLandscape;
@property (nonatomic) float maxFovPortrait;
@property (nonatomic) float maxFovSpring;
@property (nonatomic) float minFov;
@property (nonatomic) float minFovSpring;
@property (nonatomic) unsigned long long muninAvailabilityOverride;
@property (nonatomic) float muninCameraPanOffset;
@property (nonatomic) bool muninDebugLayer;
@property (nonatomic) bool muninGraphConnections;
@property (nonatomic) bool muninIgnorePlacesMetadata;
@property (nonatomic) unsigned long long muninIntermediatePointStep;
@property (nonatomic) bool muninOverrideFov;
@property (nonatomic) bool muninOverrideParallax;
@property (nonatomic) float muninParallaxDamper;
@property (nonatomic) float muninParallaxScale;
@property (nonatomic) float muninParallaxSpring;
@property (nonatomic) bool muninReplayLastTap;
@property (nonatomic) float muninRoadNetworkMiniMapAreaInMeters;
@property (nonatomic) bool muninShowRigTransitionInfo;
@property (nonatomic) bool muninSlowMotion;
@property (nonatomic) struct { float x1; float x2; double x3; double x4; float x5; float x6; } muninTapState;
@property (nonatomic) float muninTransitionMaxResolution;
@property (nonatomic) float muninTransitionMinResolution;
@property (nonatomic) struct { float x1; float x2; float x3; float x4; } overrideAmbient;
@property (nonatomic) bool overrideIntermediateLod;
@property (nonatomic) struct { float x1; float x2; float x3; float x4; } overrideLight1;
@property (nonatomic) float overrideLight1Altitude;
@property (nonatomic) float overrideLight1Azimuth;
@property (nonatomic) struct { float x1; float x2; float x3; float x4; } overrideLight2;
@property (nonatomic) float overrideLight2Altitude;
@property (nonatomic) float overrideLight2Azimuth;
@property (nonatomic) struct { float x1; float x2; float x3; float x4; } overrideLight3;
@property (nonatomic) float overrideLight3Altitude;
@property (nonatomic) float overrideLight3Azimuth;
@property (nonatomic) bool overrideLod;
@property (nonatomic) bool overrideNeworkDefaultsBaseSSLPMSwitch;
@property (nonatomic) bool paintBuildings;
@property (nonatomic) bool paintCoastlines;
@property (nonatomic) bool paintJunctions;
@property (nonatomic) bool paintKeysInView;
@property (nonatomic) bool paintLabelBounds;
@property (nonatomic) bool paintLabelCollisionLines;
@property (nonatomic) bool paintLabelCounts;
@property (nonatomic) bool paintLabelRoadFeatures;
@property (nonatomic) bool paintLandcoverTiles;
@property (nonatomic) bool paintLoadReason;
@property (nonatomic) bool paintMapTiles;
@property (nonatomic) bool paintPoiTiles;
@property (nonatomic) bool paintPointTiles;
@property (nonatomic) bool paintPolygonLayerData;
@property (nonatomic) bool paintPolygonTiles;
@property (nonatomic) bool paintRoadBoundaries;
@property (nonatomic) bool paintRoadSigns;
@property (nonatomic) bool paintRoadTileData;
@property (nonatomic) bool paintRoadTiles;
@property (nonatomic) bool paintRoadsStitchedByName;
@property (nonatomic) bool paintSelectedMapTiles;
@property (nonatomic) bool paintStandardLabelMapData;
@property (nonatomic) bool paintTiles;
@property (nonatomic) bool paintTransitCounts;
@property (nonatomic) bool paintVenues;
@property (nonatomic) bool paintVertices;
@property (nonatomic) bool prioritizeTrafficSkeleton;
@property (nonatomic) bool readLandmarksFromDisk;
@property (nonatomic) bool realisticWireframeEnabled;
@property (nonatomic) float ribbonCrispness;
@property (nonatomic) float sdfGlyphShaderUpscaleFactor;
@property (nonatomic) float sdfGlyphSuperSampleKernelSize;
@property (nonatomic) struct GEOTileSetRegion { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; } selectedMapTilesToPaint;
@property (nonatomic) bool shouldFreezeLayoutCamera;
@property (nonatomic) bool shouldOverrideSuperSampleKernelSize;
@property (nonatomic) bool shouldOverrideUpscaleFactor;
@property (nonatomic) bool shouldUseSDFGlyphs;
@property (nonatomic) bool shouldUseSDFSuperSampling;
@property (nonatomic) bool shouldUseTestTileLoader;
@property (nonatomic) bool showManeuverPoints;
@property (nonatomic) bool showNavCameraDebugConsole;
@property (nonatomic) bool showNavCameraDebugConsoleAttributes;
@property (nonatomic) bool showNavCameraDebugConsoleProperties;
@property (nonatomic) bool showNavCameraDebugLegend;
@property (nonatomic) bool showNavCameraDebugOverlay;
@property (nonatomic) bool showNavLabelOverlay;
@property (nonatomic) bool showTrafficCasing;
@property (nonatomic) bool slowMotionBump;
@property (nonatomic) bool suppressFootprints;
@property (nonatomic) bool textlessPOIsEnabled;
@property (nonatomic) float textlessPOIsMinZoom;
@property (nonatomic) unsigned char textureAtlasIndex;
@property (nonatomic) unsigned short textureAtlasPageIndex;
@property (nonatomic) bool texturedTrafficCasing;
@property (nonatomic) bool traceEtaDebugLog;
@property (nonatomic) bool trackingCameraZoomFurther;
@property (nonatomic) bool transitHighlighting;
@property (nonatomic) bool useBuildingShadowTexture;
@property (nonatomic) bool useGeoResourceLib;
@property (nonatomic) bool useMetalRenderer;
@property (nonatomic) bool useStaticTrafficFeed;

+ (id)sharedSettings;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addFootprintToSuppress:(id)arg1;
- (void)addTileToPaint:(struct GEOTileSetRegion { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; })arg1;
- (bool)altitudeDisableC3mTextureLoading;
- (float)altitudeFadeSpeed;
- (bool)altitudeFreezeViewNode;
- (float)altitudeHideMeshTime;
- (bool)altitudeHighResSatellite;
- (float)altitudeLodScale;
- (bool)altitudeMipmapFlyover;
- (bool)altitudeMipmapObjectTree;
- (bool)altitudeMipmapSatellite;
- (bool)altitudePauseLoading;
- (bool)altitudePrintRenderedTilesStat;
- (bool)altitudeShowNightLight;
- (bool)altitudeShowTileBounds;
- (bool)altitudeShowTriggerBounds;
- (bool)altitudeTexturePaging;
- (float)altitudeTileQualityThreshold;
- (bool)altitudeTourSpeedup;
- (float)altitudeTourSpeedupFactor;
- (float)arDefaultHeight;
- (bool)arOverrideDefaults;
- (unsigned long long)arPinchGesture;
- (bool)arRenderAtNativeRate;
- (unsigned long long)arSwipeGesture;
- (float)arVirtualPlaneHeight;
- (void)clearFootprintsToSuppress;
- (bool)constantlyChangeTileGroup;
- (double)constantlyChangeTileGroupInterval;
- (const struct vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > { struct shared_ptr<md::ObjectGroup> {} *x1; struct shared_ptr<md::ObjectGroup> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::ObjectGroup> *, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > { struct shared_ptr<md::ObjectGroup> {} *x_3_1_1; } x3; }*)customLandmarkObjectGroupsForKey:(const struct _GEOTileKey { unsigned int x1 : 7; unsigned int x2 : 1; union { struct _GEOStandardTileKey { unsigned int x_1_2_1 : 40; unsigned int x_1_2_2 : 6; unsigned int x_1_2_3 : 26; unsigned int x_1_2_4 : 26; unsigned int x_1_2_5 : 14; unsigned int x_1_2_6 : 4; unsigned int x_1_2_7 : 4; } x_3_1_1; struct _GEORegionalResourceKey { unsigned int x_2_2_1 : 32; unsigned int x_2_2_2 : 8; unsigned int x_2_2_3 : 6; unsigned int x_2_2_4 : 8; unsigned int x_2_2_5 : 8; } x_3_1_2; struct _GEOSputnikMetadataKey { unsigned int x_3_2_1 : 32; unsigned int x_3_2_2 : 24; unsigned int x_3_2_3 : 14; unsigned int x_3_2_4 : 8; } x_3_1_3; struct _GEOFlyoverKey { unsigned int x_4_2_1 : 6; unsigned int x_4_2_2 : 26; unsigned int x_4_2_3 : 26; unsigned int x_4_2_4 : 8; unsigned int x_4_2_5 : 24; unsigned int x_4_2_6 : 14; unsigned int x_4_2_7 : 8; unsigned int x_4_2_8 : 8; } x_3_1_4; struct _GEOTransitLineSelectionKey { unsigned int x_5_2_1 : 6; unsigned int x_5_2_2 : 25; unsigned int x_5_2_3 : 25; unsigned int x_5_2_4 : 64; } x_3_1_5; struct _GEOTileOverlayKey { unsigned int x_6_2_1 : 6; unsigned int x_6_2_2 : 26; unsigned int x_6_2_3 : 26; unsigned int x_6_2_4 : 8; unsigned int x_6_2_5 : 32; } x_3_1_6; } x3; }*)arg1;
- (void)dealloc;
- (int)debugOverlayOffsetX;
- (int)debugOverlayOffsetY;
- (struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })debugStyleManager;
- (bool)decodeStyleNames;
- (float)defaultFovLandscape;
- (float)defaultFovPortrait;
- (bool)disableBackgroundLabelLayout;
- (bool)disableGlyphTextureAtlas;
- (bool)disableIconTextureAtlas;
- (bool)disableIntraLinkTransitLineCrossings;
- (bool)disableOverlayTextConsole;
- (bool)disableRoadSignLimit;
- (bool)disableRoute;
- (bool)disableStylesheetAnimations;
- (bool)disableTransitLineDrawing;
- (bool)disableTransitLineGroupMerging;
- (bool)disableTransitLineMerging;
- (bool)displayTextureAtlas;
- (bool)dontMapMatchToSnappedRouteLine;
- (bool)dontMatchRouteLine;
- (bool)dontVerifyRouteToTransitSnapping;
- (bool)drawDebugTransit;
- (bool)drawPerformanceHUD;
- (bool)dumpRouteAndPath;
- (bool)dumpTransitTileContents;
- (bool)enableARDebugConsole;
- (bool)enableAROmniTileLoader;
- (bool)enableEtaLabelDebugging;
- (bool)enableEtaLabelRectDebugging;
- (bool)enableLoggingInLockScreen;
- (bool)enableMuninMiniMapCollectionPoints;
- (bool)enableMuninMiniMapComposedEdgeRoadColoring;
- (bool)enableMuninMiniMapRoadWidths;
- (bool)enableMuninMiniMapRoadZData;
- (bool)enableMuninRoadNetworkMiniMap;
- (bool)enableRouteIntersectionTesting;
- (bool)enableRouteShareSectionDebugging;
- (bool)enableSignPostEvents;
- (bool)enableTrafficFeatureLabelDebugging;
- (unsigned int)etaLabelDebugOrientationMask;
- (unsigned long long)etaLabelDebugScore;
- (bool)etaLabelsAvoidScreenEdges;
- (bool)expandedPerformanceHUD;
- (id)footprintsToSuppress;
- (bool)forceBumpAll;
- (bool)forceBumpNextTap;
- (bool)forceEtaLabelPlacement;
- (bool)hideClientPositionedFeatures;
- (bool)hideDirectionalArrows;
- (void)hidePerformanceGroup:(unsigned int)arg1;
- (bool)hideServerPositionedRoadFeatures;
- (bool)hideServerPositionedTransitFeatures;
- (bool)highlightRouteLineSnappingStatus;
- (bool)holdOntoStyleAttributes;
- (id)init;
- (unsigned char)intermediateLodOverride;
- (bool)isInstalledInLockScreen;
- (bool)isPerformanceGroupShown:(unsigned int)arg1;
- (bool)keepTooCloseServerPositionedTransitFeatures;
- (bool)labelAllowDefaultStyle;
- (bool)labelAutoOffsetRoadText;
- (bool)labelBaseSSLPMEnabled;
- (bool)labelCollideContinuously;
- (bool)labelCollisionDisabled;
- (bool)labelDedupingDisabled;
- (bool)labelFacingCullDisabled;
- (bool)labelFlipAlternatePositionsEnable;
- (bool)labelHideLineFeatures;
- (bool)labelHidePointFeatures;
- (bool)labelHighlighting;
- (bool)labelHighlightingTransitFeaturesOnly;
- (bool)labelHighlightingVerboseLoggingEnabled;
- (bool)labelOcclusionDisabled;
- (bool)labelStyleOverridesDisabled;
- (bool)labelTileDecodeEnabled;
- (bool)labelTransitLineCollisionEnabled;
- (bool)labelUpdateMapTilesContinuously;
- (unsigned char)labelerOutputIndex;
- (struct { bool x1; bool x2; bool x3; float x4; float x5; })landmark2DStrokeSettings;
- (bool)layoutContinuously;
- (bool)lightingAccelerateTime;
- (bool)lightingEnableAmbient;
- (bool)lightingEnableLight1;
- (bool)lightingEnableLight2;
- (bool)lightingEnableLight3;
- (bool)lightingOverrideAmbient;
- (bool)lightingOverrideLight1;
- (bool)lightingOverrideLight2;
- (bool)lightingOverrideLight3;
- (bool)lightingStopTime;
- (unsigned char)lightingStoppedTimeHour;
- (bool)loadGreenTraffic;
- (unsigned char)lodOverride;
- (float)maxFovLandscape;
- (float)maxFovPortrait;
- (float)maxFovSpring;
- (float)minFov;
- (float)minFovSpring;
- (unsigned long long)muninAvailabilityOverride;
- (float)muninCameraPanOffset;
- (bool)muninDebugLayer;
- (bool)muninGraphConnections;
- (bool)muninIgnorePlacesMetadata;
- (unsigned long long)muninIntermediatePointStep;
- (bool)muninOverrideFov;
- (bool)muninOverrideParallax;
- (float)muninParallaxDamper;
- (float)muninParallaxScale;
- (float)muninParallaxSpring;
- (bool)muninReplayLastTap;
- (float)muninRoadNetworkMiniMapAreaInMeters;
- (bool)muninShowRigTransitionInfo;
- (bool)muninSlowMotion;
- (struct { float x1; float x2; double x3; double x4; float x5; float x6; })muninTapState;
- (float)muninTransitionMaxResolution;
- (float)muninTransitionMinResolution;
- (id)nameForPerformanceGroup:(unsigned int)arg1;
- (unsigned int)numPerformanceGroups;
- (bool)overlaysShouldDrawDebug;
- (struct { float x1; float x2; float x3; float x4; })overrideAmbient;
- (bool)overrideIntermediateLod;
- (struct { float x1; float x2; float x3; float x4; })overrideLight1;
- (float)overrideLight1Altitude;
- (float)overrideLight1Azimuth;
- (struct { float x1; float x2; float x3; float x4; })overrideLight2;
- (float)overrideLight2Altitude;
- (float)overrideLight2Azimuth;
- (struct { float x1; float x2; float x3; float x4; })overrideLight3;
- (float)overrideLight3Altitude;
- (float)overrideLight3Azimuth;
- (bool)overrideLod;
- (bool)overrideNeworkDefaultsBaseSSLPMSwitch;
- (bool)paintBuildings;
- (bool)paintCoastlines;
- (bool)paintJunctions;
- (bool)paintKeysInView;
- (bool)paintLabelBounds;
- (bool)paintLabelCollisionLines;
- (bool)paintLabelCounts;
- (bool)paintLabelRoadFeatures;
- (bool)paintLandcoverTiles;
- (bool)paintLoadReason;
- (bool)paintMapTiles;
- (bool)paintPoiTiles;
- (bool)paintPointTiles;
- (bool)paintPolygonLayerData;
- (bool)paintPolygonTiles;
- (bool)paintRoadBoundaries;
- (bool)paintRoadSigns;
- (bool)paintRoadTileData;
- (bool)paintRoadTiles;
- (bool)paintRoadsStitchedByName;
- (bool)paintSelectedMapTiles;
- (bool)paintStandardLabelMapData;
- (bool)paintTiles;
- (bool)paintTransitCounts;
- (bool)paintVenues;
- (bool)paintVertices;
- (bool)prioritizeTrafficSkeleton;
- (bool)readLandmarksFromDisk;
- (bool)realisticWireframeEnabled;
- (void)removeTileToPaint;
- (float)ribbonCrispness;
- (float)sdfGlyphShaderUpscaleFactor;
- (float)sdfGlyphSuperSampleKernelSize;
- (struct GEOTileSetRegion { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; })selectedMapTilesToPaint;
- (void)setAltitudeDisableC3mTextureLoading:(bool)arg1;
- (void)setAltitudeFadeSpeed:(float)arg1;
- (void)setAltitudeFreezeViewNode:(bool)arg1;
- (void)setAltitudeHideMeshTime:(float)arg1;
- (void)setAltitudeHighResSatellite:(bool)arg1;
- (void)setAltitudeLodScale:(float)arg1;
- (void)setAltitudeMipmapFlyover:(bool)arg1;
- (void)setAltitudeMipmapObjectTree:(bool)arg1;
- (void)setAltitudeMipmapSatellite:(bool)arg1;
- (void)setAltitudePauseLoading:(bool)arg1;
- (void)setAltitudePrintRenderedTilesStat:(bool)arg1;
- (void)setAltitudeShowNightLight:(bool)arg1;
- (void)setAltitudeShowTileBounds:(bool)arg1;
- (void)setAltitudeShowTriggerBounds:(bool)arg1;
- (void)setAltitudeTexturePaging:(bool)arg1;
- (void)setAltitudeTileQualityThreshold:(float)arg1;
- (void)setAltitudeTourSpeedup:(bool)arg1;
- (void)setAltitudeTourSpeedupFactor:(float)arg1;
- (void)setArDefaultHeight:(float)arg1;
- (void)setArOverrideDefaults:(bool)arg1;
- (void)setArPinchGesture:(unsigned long long)arg1;
- (void)setArRenderAtNativeRate:(bool)arg1;
- (void)setArSwipeGesture:(unsigned long long)arg1;
- (void)setArVirtualPlaneHeight:(float)arg1;
- (void)setConstantlyChangeTileGroup:(bool)arg1;
- (void)setConstantlyChangeTileGroupInterval:(double)arg1;
- (void)setCustomLandmarkFromData:(id)arg1 tileKey:(const struct _GEOTileKey { unsigned int x1 : 7; unsigned int x2 : 1; union { struct _GEOStandardTileKey { unsigned int x_1_2_1 : 40; unsigned int x_1_2_2 : 6; unsigned int x_1_2_3 : 26; unsigned int x_1_2_4 : 26; unsigned int x_1_2_5 : 14; unsigned int x_1_2_6 : 4; unsigned int x_1_2_7 : 4; } x_3_1_1; struct _GEORegionalResourceKey { unsigned int x_2_2_1 : 32; unsigned int x_2_2_2 : 8; unsigned int x_2_2_3 : 6; unsigned int x_2_2_4 : 8; unsigned int x_2_2_5 : 8; } x_3_1_2; struct _GEOSputnikMetadataKey { unsigned int x_3_2_1 : 32; unsigned int x_3_2_2 : 24; unsigned int x_3_2_3 : 14; unsigned int x_3_2_4 : 8; } x_3_1_3; struct _GEOFlyoverKey { unsigned int x_4_2_1 : 6; unsigned int x_4_2_2 : 26; unsigned int x_4_2_3 : 26; unsigned int x_4_2_4 : 8; unsigned int x_4_2_5 : 24; unsigned int x_4_2_6 : 14; unsigned int x_4_2_7 : 8; unsigned int x_4_2_8 : 8; } x_3_1_4; struct _GEOTransitLineSelectionKey { unsigned int x_5_2_1 : 6; unsigned int x_5_2_2 : 25; unsigned int x_5_2_3 : 25; unsigned int x_5_2_4 : 64; } x_3_1_5; struct _GEOTileOverlayKey { unsigned int x_6_2_1 : 6; unsigned int x_6_2_2 : 26; unsigned int x_6_2_3 : 26; unsigned int x_6_2_4 : 8; unsigned int x_6_2_5 : 32; } x_3_1_6; } x3; }*)arg2 texturePath:(id)arg3;
- (void)setCustomLandmarkFromDisk:(id)arg1 tileKey:(const struct _GEOTileKey { unsigned int x1 : 7; unsigned int x2 : 1; union { struct _GEOStandardTileKey { unsigned int x_1_2_1 : 40; unsigned int x_1_2_2 : 6; unsigned int x_1_2_3 : 26; unsigned int x_1_2_4 : 26; unsigned int x_1_2_5 : 14; unsigned int x_1_2_6 : 4; unsigned int x_1_2_7 : 4; } x_3_1_1; struct _GEORegionalResourceKey { unsigned int x_2_2_1 : 32; unsigned int x_2_2_2 : 8; unsigned int x_2_2_3 : 6; unsigned int x_2_2_4 : 8; unsigned int x_2_2_5 : 8; } x_3_1_2; struct _GEOSputnikMetadataKey { unsigned int x_3_2_1 : 32; unsigned int x_3_2_2 : 24; unsigned int x_3_2_3 : 14; unsigned int x_3_2_4 : 8; } x_3_1_3; struct _GEOFlyoverKey { unsigned int x_4_2_1 : 6; unsigned int x_4_2_2 : 26; unsigned int x_4_2_3 : 26; unsigned int x_4_2_4 : 8; unsigned int x_4_2_5 : 24; unsigned int x_4_2_6 : 14; unsigned int x_4_2_7 : 8; unsigned int x_4_2_8 : 8; } x_3_1_4; struct _GEOTransitLineSelectionKey { unsigned int x_5_2_1 : 6; unsigned int x_5_2_2 : 25; unsigned int x_5_2_3 : 25; unsigned int x_5_2_4 : 64; } x_3_1_5; struct _GEOTileOverlayKey { unsigned int x_6_2_1 : 6; unsigned int x_6_2_2 : 26; unsigned int x_6_2_3 : 26; unsigned int x_6_2_4 : 8; unsigned int x_6_2_5 : 32; } x_3_1_6; } x3; }*)arg2;
- (void)setCustomLandmarkFromDisk:(id)arg1 tileKey:(const struct _GEOTileKey { unsigned int x1 : 7; unsigned int x2 : 1; union { struct _GEOStandardTileKey { unsigned int x_1_2_1 : 40; unsigned int x_1_2_2 : 6; unsigned int x_1_2_3 : 26; unsigned int x_1_2_4 : 26; unsigned int x_1_2_5 : 14; unsigned int x_1_2_6 : 4; unsigned int x_1_2_7 : 4; } x_3_1_1; struct _GEORegionalResourceKey { unsigned int x_2_2_1 : 32; unsigned int x_2_2_2 : 8; unsigned int x_2_2_3 : 6; unsigned int x_2_2_4 : 8; unsigned int x_2_2_5 : 8; } x_3_1_2; struct _GEOSputnikMetadataKey { unsigned int x_3_2_1 : 32; unsigned int x_3_2_2 : 24; unsigned int x_3_2_3 : 14; unsigned int x_3_2_4 : 8; } x_3_1_3; struct _GEOFlyoverKey { unsigned int x_4_2_1 : 6; unsigned int x_4_2_2 : 26; unsigned int x_4_2_3 : 26; unsigned int x_4_2_4 : 8; unsigned int x_4_2_5 : 24; unsigned int x_4_2_6 : 14; unsigned int x_4_2_7 : 8; unsigned int x_4_2_8 : 8; } x_3_1_4; struct _GEOTransitLineSelectionKey { unsigned int x_5_2_1 : 6; unsigned int x_5_2_2 : 25; unsigned int x_5_2_3 : 25; unsigned int x_5_2_4 : 64; } x_3_1_5; struct _GEOTileOverlayKey { unsigned int x_6_2_1 : 6; unsigned int x_6_2_2 : 26; unsigned int x_6_2_3 : 26; unsigned int x_6_2_4 : 8; unsigned int x_6_2_5 : 32; } x_3_1_6; } x3; }*)arg2 styleKey:(unsigned int)arg3 styleValue:(int)arg4;
- (void)setDebugOverlayOffsetX:(int)arg1;
- (void)setDebugOverlayOffsetY:(int)arg1;
- (void)setDebugStyleManager:(struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setDecodeStyleNames:(bool)arg1;
- (void)setDefaultFovLandscape:(float)arg1;
- (void)setDefaultFovPortrait:(float)arg1;
- (void)setDisableBackgroundLabelLayout:(bool)arg1;
- (void)setDisableGlyphTextureAtlas:(bool)arg1;
- (void)setDisableIconTextureAtlas:(bool)arg1;
- (void)setDisableIntraLinkTransitLineCrossings:(bool)arg1;
- (void)setDisableOverlayTextConsole:(bool)arg1;
- (void)setDisableRoadSignLimit:(bool)arg1;
- (void)setDisableRoute:(bool)arg1;
- (void)setDisableStylesheetAnimations:(bool)arg1;
- (void)setDisableTransitLineDrawing:(bool)arg1;
- (void)setDisableTransitLineGroupMerging:(bool)arg1;
- (void)setDisableTransitLineMerging:(bool)arg1;
- (void)setDisplayTextureAtlas:(bool)arg1;
- (void)setDontMapMatchToSnappedRouteLine:(bool)arg1;
- (void)setDontMatchRouteLine:(bool)arg1;
- (void)setDontVerifyRouteToTransitSnapping:(bool)arg1;
- (void)setDrawDebugTransit:(bool)arg1;
- (void)setDrawPerformanceHUD:(bool)arg1;
- (void)setDumpRouteAndPath:(bool)arg1;
- (void)setDumpTransitTileContents:(bool)arg1;
- (void)setEnableARDebugConsole:(bool)arg1;
- (void)setEnableAROmniTileLoader:(bool)arg1;
- (void)setEnableEtaLabelDebugging:(bool)arg1;
- (void)setEnableEtaLabelRectDebugging:(bool)arg1;
- (void)setEnableLoggingInLockScreen:(bool)arg1;
- (void)setEnableMuninMiniMapCollectionPoints:(bool)arg1;
- (void)setEnableMuninMiniMapComposedEdgeRoadColoring:(bool)arg1;
- (void)setEnableMuninMiniMapRoadWidths:(bool)arg1;
- (void)setEnableMuninMiniMapRoadZData:(bool)arg1;
- (void)setEnableMuninRoadNetworkMiniMap:(bool)arg1;
- (void)setEnableRouteIntersectionTesting:(bool)arg1;
- (void)setEnableRouteShareSectionDebugging:(bool)arg1;
- (void)setEnableSignPostEvents:(bool)arg1;
- (void)setEnableTrafficFeatureLabelDebugging:(bool)arg1;
- (void)setEtaLabelDebugOrientationMask:(unsigned int)arg1;
- (void)setEtaLabelDebugScore:(unsigned long long)arg1;
- (void)setEtaLabelsAvoidScreenEdges:(bool)arg1;
- (void)setExpandedPerformanceHUD:(bool)arg1;
- (void)setFootprintsToSuppress:(id)arg1;
- (void)setForceBumpAll:(bool)arg1;
- (void)setForceBumpNextTap:(bool)arg1;
- (void)setForceEtaLabelPlacement:(bool)arg1;
- (void)setHideClientPositionedFeatures:(bool)arg1;
- (void)setHideDirectionalArrows:(bool)arg1;
- (void)setHideServerPositionedRoadFeatures:(bool)arg1;
- (void)setHideServerPositionedTransitFeatures:(bool)arg1;
- (void)setHighlightRouteLineSnappingStatus:(bool)arg1;
- (void)setHoldOntoStyleAttributes:(bool)arg1;
- (void)setIntermediateLodOverride:(unsigned char)arg1;
- (void)setIsInstalledInLockScreen:(bool)arg1;
- (void)setKeepTooCloseServerPositionedTransitFeatures:(bool)arg1;
- (void)setLabelAllowDefaultStyle:(bool)arg1;
- (void)setLabelAutoOffsetRoadText:(bool)arg1;
- (void)setLabelBaseSSLPMEnabled:(bool)arg1;
- (void)setLabelCollideContinuously:(bool)arg1;
- (void)setLabelCollisionDisabled:(bool)arg1;
- (void)setLabelDedupingDisabled:(bool)arg1;
- (void)setLabelFacingCullDisabled:(bool)arg1;
- (void)setLabelFlipAlternatePositionsEnable:(bool)arg1;
- (void)setLabelHideLineFeatures:(bool)arg1;
- (void)setLabelHidePointFeatures:(bool)arg1;
- (void)setLabelHighlighting:(bool)arg1;
- (void)setLabelHighlightingTransitFeaturesOnly:(bool)arg1;
- (void)setLabelHighlightingVerboseLoggingEnabled:(bool)arg1;
- (void)setLabelOcclusionDisabled:(bool)arg1;
- (void)setLabelStyleOverridesDisabled:(bool)arg1;
- (void)setLabelTileDecodeEnabled:(bool)arg1;
- (void)setLabelTransitLineCollisionEnabled:(bool)arg1;
- (void)setLabelUpdateMapTilesContinuously:(bool)arg1;
- (void)setLabelerOutputIndex:(unsigned char)arg1;
- (void)setLandmark2DStrokeSettings:(struct { bool x1; bool x2; bool x3; float x4; float x5; })arg1;
- (void)setLayoutContinuously:(bool)arg1;
- (void)setLightingAccelerateTime:(bool)arg1;
- (void)setLightingEnableAmbient:(bool)arg1;
- (void)setLightingEnableLight1:(bool)arg1;
- (void)setLightingEnableLight2:(bool)arg1;
- (void)setLightingEnableLight3:(bool)arg1;
- (void)setLightingOverrideAmbient:(bool)arg1;
- (void)setLightingOverrideLight1:(bool)arg1;
- (void)setLightingOverrideLight2:(bool)arg1;
- (void)setLightingOverrideLight3:(bool)arg1;
- (void)setLightingStopTime:(bool)arg1;
- (void)setLightingStoppedTimeHour:(unsigned char)arg1;
- (void)setLoadGreenTraffic:(bool)arg1;
- (void)setLodOverride:(unsigned char)arg1;
- (void)setMaxFovLandscape:(float)arg1;
- (void)setMaxFovPortrait:(float)arg1;
- (void)setMaxFovSpring:(float)arg1;
- (void)setMinFov:(float)arg1;
- (void)setMinFovSpring:(float)arg1;
- (void)setMuninAvailabilityOverride:(unsigned long long)arg1;
- (void)setMuninCameraPanOffset:(float)arg1;
- (void)setMuninDebugLayer:(bool)arg1;
- (void)setMuninGraphConnections:(bool)arg1;
- (void)setMuninIgnorePlacesMetadata:(bool)arg1;
- (void)setMuninIntermediatePointStep:(unsigned long long)arg1;
- (void)setMuninOverrideFov:(bool)arg1;
- (void)setMuninOverrideParallax:(bool)arg1;
- (void)setMuninParallaxDamper:(float)arg1;
- (void)setMuninParallaxScale:(float)arg1;
- (void)setMuninParallaxSpring:(float)arg1;
- (void)setMuninReplayLastTap:(bool)arg1;
- (void)setMuninRoadNetworkMiniMapAreaInMeters:(float)arg1;
- (void)setMuninShowRigTransitionInfo:(bool)arg1;
- (void)setMuninSlowMotion:(bool)arg1;
- (void)setMuninTapState:(struct { float x1; float x2; double x3; double x4; float x5; float x6; })arg1;
- (void)setMuninTransitionMaxResolution:(float)arg1;
- (void)setMuninTransitionMinResolution:(float)arg1;
- (void)setOverrideAmbient:(struct { float x1; float x2; float x3; float x4; })arg1;
- (void)setOverrideIntermediateLod:(bool)arg1;
- (void)setOverrideLight1:(struct { float x1; float x2; float x3; float x4; })arg1;
- (void)setOverrideLight1Altitude:(float)arg1;
- (void)setOverrideLight1Azimuth:(float)arg1;
- (void)setOverrideLight2:(struct { float x1; float x2; float x3; float x4; })arg1;
- (void)setOverrideLight2Altitude:(float)arg1;
- (void)setOverrideLight2Azimuth:(float)arg1;
- (void)setOverrideLight3:(struct { float x1; float x2; float x3; float x4; })arg1;
- (void)setOverrideLight3Altitude:(float)arg1;
- (void)setOverrideLight3Azimuth:(float)arg1;
- (void)setOverrideLod:(bool)arg1;
- (void)setOverrideNeworkDefaultsBaseSSLPMSwitch:(bool)arg1;
- (void)setPaintBuildings:(bool)arg1;
- (void)setPaintCoastlines:(bool)arg1;
- (void)setPaintJunctions:(bool)arg1;
- (void)setPaintKeysInView:(bool)arg1;
- (void)setPaintLabelBounds:(bool)arg1;
- (void)setPaintLabelCollisionLines:(bool)arg1;
- (void)setPaintLabelCounts:(bool)arg1;
- (void)setPaintLabelRoadFeatures:(bool)arg1;
- (void)setPaintLandcoverTiles:(bool)arg1;
- (void)setPaintLoadReason:(bool)arg1;
- (void)setPaintMapTiles:(bool)arg1;
- (void)setPaintPoiTiles:(bool)arg1;
- (void)setPaintPointTiles:(bool)arg1;
- (void)setPaintPolygonLayerData:(bool)arg1;
- (void)setPaintPolygonTiles:(bool)arg1;
- (void)setPaintRoadBoundaries:(bool)arg1;
- (void)setPaintRoadSigns:(bool)arg1;
- (void)setPaintRoadTileData:(bool)arg1;
- (void)setPaintRoadTiles:(bool)arg1;
- (void)setPaintRoadsStitchedByName:(bool)arg1;
- (void)setPaintSelectedMapTiles:(bool)arg1;
- (void)setPaintStandardLabelMapData:(bool)arg1;
- (void)setPaintTiles:(bool)arg1;
- (void)setPaintTransitCounts:(bool)arg1;
- (void)setPaintVenues:(bool)arg1;
- (void)setPaintVertices:(bool)arg1;
- (void)setPrioritizeTrafficSkeleton:(bool)arg1;
- (void)setReadLandmarksFromDisk:(bool)arg1;
- (void)setRealisticWireframeEnabled:(bool)arg1;
- (void)setRibbonCrispness:(float)arg1;
- (void)setSdfGlyphShaderUpscaleFactor:(float)arg1;
- (void)setSdfGlyphSuperSampleKernelSize:(float)arg1;
- (void)setSelectedMapTilesToPaint:(struct GEOTileSetRegion { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; })arg1;
- (void)setShouldFreezeLayoutCamera:(bool)arg1;
- (void)setShouldOverrideSuperSampleKernelSize:(bool)arg1;
- (void)setShouldOverrideUpscaleFactor:(bool)arg1;
- (void)setShouldUseSDFGlyphs:(bool)arg1;
- (void)setShouldUseSDFSuperSampling:(bool)arg1;
- (void)setShouldUseTestTileLoader:(bool)arg1;
- (void)setShowManeuverPoints:(bool)arg1;
- (void)setShowNavCameraDebugConsole:(bool)arg1;
- (void)setShowNavCameraDebugConsoleAttributes:(bool)arg1;
- (void)setShowNavCameraDebugConsoleProperties:(bool)arg1;
- (void)setShowNavCameraDebugLegend:(bool)arg1;
- (void)setShowNavCameraDebugOverlay:(bool)arg1;
- (void)setShowNavLabelOverlay:(bool)arg1;
- (void)setShowTrafficCasing:(bool)arg1;
- (void)setSlowMotionBump:(bool)arg1;
- (void)setSuppressFootprints:(bool)arg1;
- (void)setTextlessPOIsEnabled:(bool)arg1;
- (void)setTextlessPOIsMinZoom:(float)arg1;
- (void)setTextureAtlasIndex:(unsigned char)arg1;
- (void)setTextureAtlasPageIndex:(unsigned short)arg1;
- (void)setTexturedTrafficCasing:(bool)arg1;
- (void)setTraceEtaDebugLog:(bool)arg1;
- (void)setTrackingCameraZoomFurther:(bool)arg1;
- (void)setTransitHighlighting:(bool)arg1;
- (void)setUseBuildingShadowTexture:(bool)arg1;
- (void)setUseGeoResourceLib:(bool)arg1;
- (void)setUseMetalRenderer:(bool)arg1;
- (void)setUseStaticTrafficFeed:(bool)arg1;
- (bool)shouldDrawDebug;
- (bool)shouldFreezeLayoutCamera;
- (bool)shouldOverrideSuperSampleKernelSize;
- (bool)shouldOverrideUpscaleFactor;
- (bool)shouldUseSDFGlyphs;
- (bool)shouldUseSDFSuperSampling;
- (bool)shouldUseTestTileLoader;
- (bool)showManeuverPoints;
- (bool)showNavCameraDebugConsole;
- (bool)showNavCameraDebugConsoleAttributes;
- (bool)showNavCameraDebugConsoleProperties;
- (bool)showNavCameraDebugLegend;
- (bool)showNavCameraDebugOverlay;
- (bool)showNavLabelOverlay;
- (void)showPerformanceGroup:(unsigned int)arg1;
- (bool)showTrafficCasing;
- (bool)slowMotionBump;
- (bool)suppressFootprints;
- (bool)textlessPOIsEnabled;
- (float)textlessPOIsMinZoom;
- (unsigned char)textureAtlasIndex;
- (unsigned short)textureAtlasPageIndex;
- (bool)texturedTrafficCasing;
- (bool)traceEtaDebugLog;
- (bool)trackingCameraZoomFurther;
- (bool)transitHighlighting;
- (bool)useBuildingShadowTexture;
- (bool)useGeoResourceLib;
- (bool)useMetalRenderer;
- (bool)useStaticTrafficFeed;

@end
