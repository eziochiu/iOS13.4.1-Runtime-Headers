/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome
 */

@interface SBIconView : UIView <SBCloseBoxViewDelegate, SBIconAccessoryInfoProvider, SBIconObserver, SBReusableView, SBSHardwareButtonEventConsuming, UIContextMenuInteractionDelegate, UIDragInteractionDelegate, UIGestureRecognizerDelegate, _UICursorInteractionDelegate, _UISettingsKeyObserver> {
    UIColor * _accessibilityTintColor;
    UIView<SBIconAccessoryView> * _accessoryView;
    UIViewPropertyAnimator * _accessoryViewAnimator;
    UIContextMenuConfiguration * _activeContextMenuConfiguration;
    bool  _allIconElementsButLabelHidden;
    unsigned int  _allowCloseBox;
    unsigned int  _allowJitter;
    unsigned int  _allowsLabelArea;
    unsigned int  _allowsPassthroughHitTesting;
    NSArray * _applicationShortcutItems;
    SBFParallaxSettings * _badgeParallaxSettings;
    SBCloseBoxView * _closeBox;
    _UICursorInteraction * _closeBoxCursorInteraction;
    UIContextMenuInteraction * _contextMenuInteraction;
    unsigned int  _contextMenuInteractionActive;
    unsigned int  _contextMenuInteractionPending;
    id /* block */  _contextMenuInteractionPendingCompletion;
    <SBIconContinuityInfo> * _continuityInfo;
    SBIconImageCrossfadeView * _crossfadeView;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _cursorHitTestPadding;
    <SBIconViewDelegate> * _delegate;
    unsigned int  _disableContextMenuInteraction;
    unsigned int  _disallowCursorInteraction;
    unsigned int  _disallowsBlockedForScreenTimeExpiration;
    long long  _displayedLabelAccessoryType;
    UIDragInteraction * _dragInteraction;
    unsigned int  _drawsLabel;
    UIView * _dropGlow;
    UILongPressGestureRecognizer * _editingModeGestureRecognizer;
    bool  _enabled;
    _UIStatesFeedbackGenerator * _feedbackGenerator;
    SBFolderIcon * _folderIcon;
    UIView * _folderIconBackgroundView;
    SBFolderIconImageCache * _folderIconImageCache;
    NSCountedSet * _forbidEditingModeReasons;
    unsigned int  _hasSetIconImageInfo;
    unsigned int  _hideLabel;
    unsigned int  _hideLabelAccessoryView;
    unsigned int  _highlighted;
    <BSInvalidatable> * _homeButtonPressConsumingAssertion;
    SBIcon * _icon;
    double  _iconAccessoryAlpha;
    double  _iconContentScale;
    unsigned int  _iconContentScalingEnabled;
    double  _iconImageAlpha;
    SBHIconImageCache * _iconImageCache;
    struct SBIconImageInfo { 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
        double scale; 
        double continuousCornerRadius; 
    }  _iconImageInfo;
    SBIconImageView * _iconImageView;
    double  _iconLabelAlpha;
    NSString * _iconLocation;
    _UICursorInteraction * _iconViewCursorInteraction;
    unsigned int  _iconWasTappedWhenDisabled;
    unsigned int  _imageLoadingBehavior;
    unsigned int  _inDock;
    unsigned int  _isDragging;
    unsigned int  _isEditing;
    unsigned int  _isGrabbed;
    unsigned int  _isJittering;
    unsigned int  _isOverlapping;
    UIView<SBIconLabelAccessoryView> * _labelAccessoryView;
    UIFont * _labelFont;
    UIView<SBIconLabelView> * _labelView;
    NSDate * _lastTouchDownDate;
    unsigned int  _launchDisabled;
    _UILegibilitySettings * _legibilitySettings;
    <SBIconListLayoutProvider> * _listLayoutProvider;
    NSHashTable * _observers;
    unsigned int  _pauseReasons;
    bool  _paused;
    NSMapTable * _pendingAnimatorCompletionsTable;
    NSString * _presentedWidgetBundleIdentifier;
    SBHRecentsDocumentExtensionProvider * _recentsDocumentExtensionProvider;
    unsigned int  _refusesRecipientStatus;
    UIView * _scalingContainer;
    unsigned int  _showingAccessoryView;
    unsigned int  _showingCloseBox;
    unsigned int  _showsDropGlow;
    unsigned int  _showsSquareCorners;
    unsigned int  _startsDragMoreQuickly;
    unsigned int  _suppressesBlurryBackgroundChanges;
    unsigned int  _suppressesDisabledPresentation;
    UITapGestureRecognizer * _tapGestureRecognizer;
    unsigned int  _touchDownInIcon;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _visibleImageRect;
}

@property (nonatomic, retain) UIColor *accessibilityTintColor;
@property (nonatomic, retain) UIViewPropertyAnimator *accessoryViewAnimator;
@property (nonatomic, retain) UIContextMenuConfiguration *activeContextMenuConfiguration;
@property (nonatomic) bool allIconElementsButLabelHidden;
@property (nonatomic) bool allowsBlockedForScreenTimeExpiration;
@property (nonatomic) bool allowsCloseBox;
@property (nonatomic) bool allowsEditingAnimation;
@property (nonatomic, readonly) bool allowsLabelAccessoryView;
@property (nonatomic) bool allowsLabelArea;
@property (nonatomic) bool allowsPassthroughHitTesting;
@property (nonatomic, readonly) bool allowsTapWhileEditing;
@property (getter=isAnimatingScrolling, nonatomic, readonly) bool animatingScrolling;
@property (nonatomic, readonly, copy) NSString *applicationBundleIdentifierForShortcuts;
@property (nonatomic, readonly, copy) NSURL *applicationBundleURLForShortcuts;
@property (nonatomic, copy) NSArray *applicationShortcutItems;
@property (nonatomic, readonly) SBFParallaxSettings *badgeParallaxSettings;
@property (nonatomic, readonly) double baselineOffsetFromBottom;
@property (nonatomic, readonly) bool canBeginDrags;
@property (nonatomic, readonly) bool canShowCloseBox;
@property (nonatomic, readonly) unsigned long long centerVisibleMiniIconIndex;
@property (nonatomic, readonly) _UICursorInteraction *closeBoxCursorInteraction;
@property (nonatomic) unsigned long long configurationOptions;
@property (nonatomic, readonly) UIView *contentContainerView;
@property (nonatomic, readonly) UIContextMenuInteraction *contextMenuInteraction;
@property (getter=isContextMenuInteractionActive, nonatomic) bool contextMenuInteractionActive;
@property (getter=isContextMenuInteractionPending, nonatomic) bool contextMenuInteractionPending;
@property (nonatomic, copy) id /* block */ contextMenuInteractionPendingCompletion;
@property (nonatomic, readonly) long long continuityBadgeType;
@property (nonatomic, retain) <SBIconContinuityInfo> *continuityInfo;
@property (getter=isCrossfadingImageWithView, readonly) bool crossfadingImageWithView;
@property (nonatomic, readonly) long long currentAccessoryType;
@property (nonatomic, readonly) long long currentLabelAccessoryType;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cursorHitTestPadding;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SBIconViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) long long displayedLabelAccessoryType;
@property (nonatomic, readonly) UIDragInteraction *dragInteraction;
@property (nonatomic, readonly) double dragInteractionLiftDelay;
@property (getter=isEditing, nonatomic) bool editing;
@property (nonatomic, readonly) UILongPressGestureRecognizer *editingModeGestureRecognizer;
@property (nonatomic, readonly, copy) NSArray *effectiveApplicationShortcutItems;
@property (nonatomic, readonly) double effectiveIconImageAlpha;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (nonatomic, readonly) Class expectedIconImageViewClass;
@property (nonatomic, readonly) double firstLineBaseline;
@property (nonatomic, readonly) unsigned long long firstVisibleMiniIconIndex;
@property (nonatomic) unsigned long long folderBackgroundStyle;
@property (nonatomic, retain) SBFolderIcon *folderIcon;
@property (nonatomic, retain) UIView *folderIconBackgroundView;
@property (nonatomic, retain) SBFolderIconImageCache *folderIconImageCache;
@property (getter=isGrabbed, nonatomic) bool grabbed;
@property (readonly) unsigned long long hash;
@property (getter=isHighlighted, nonatomic) bool highlighted;
@property (nonatomic, retain) <BSInvalidatable> *homeButtonPressConsumingAssertion;
@property (nonatomic, retain) SBIcon *icon;
@property (nonatomic) double iconAccessoryAlpha;
@property (nonatomic) double iconContentScale;
@property (getter=isIconContentScalingEnabled, nonatomic) bool iconContentScalingEnabled;
@property (nonatomic) double iconImageAlpha;
@property (nonatomic, retain) SBHIconImageCache *iconImageCache;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } iconImageCenter;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } iconImageFrame;
@property (nonatomic) struct SBIconImageInfo { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; } iconImageInfo;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } iconImageSize;
@property (nonatomic, readonly) UIImage *iconImageSnapshot;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } iconImageVisibleSize;
@property (nonatomic) double iconLabelAlpha;
@property (nonatomic, readonly) _UICursorInteraction *iconViewCursorInteraction;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } iconViewSize;
@property (nonatomic) unsigned long long imageLoadingBehavior;
@property (getter=isInDock, nonatomic) bool inDock;
@property (getter=isLabelAccessoryHidden, nonatomic) bool labelAccessoryHidden;
@property (nonatomic, readonly) double labelAccessoryTotalWidth;
@property (nonatomic, retain) UIFont *labelFont;
@property (getter=isLabelHidden, nonatomic) bool labelHidden;
@property (nonatomic, readonly) UIView<SBIconLabelView> *labelView;
@property (nonatomic, readonly) double lastLineBaseline;
@property (nonatomic, copy) NSDate *lastTouchDownDate;
@property (nonatomic, readonly) unsigned long long lastVisibleMiniIconIndex;
@property (nonatomic, retain) _UILegibilitySettings *legibilitySettings;
@property (nonatomic, readonly) <SBIconListLayout> *listLayout;
@property (nonatomic, retain) <SBIconListLayoutProvider> *listLayoutProvider;
@property (nonatomic, copy) NSString *location;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } maxLabelSize;
@property (getter=isOverlapping, nonatomic) bool overlapping;
@property (getter=isPaused, nonatomic) bool paused;
@property (nonatomic, retain) NSMapTable *pendingAnimatorCompletionsTable;
@property (nonatomic, copy) NSString *presentedWidgetBundleIdentifier;
@property (nonatomic, readonly) long long progressState;
@property (nonatomic) bool refusesRecipientStatus;
@property (nonatomic, readonly, copy) NSString *representedFolderIconLocation;
@property (nonatomic, readonly) bool shouldShowCloseBox;
@property (nonatomic, readonly) bool shouldShowLabelAccessoryView;
@property (getter=isShowingContextMenu, nonatomic, readonly) bool showingContextMenu;
@property (nonatomic, readonly) bool showsDropGlow;
@property (nonatomic) bool showsSquareCorners;
@property (nonatomic) bool startsDragMoreQuickly;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UITapGestureRecognizer *tapGestureRecognizer;
@property (getter=isTouchDownInIcon, nonatomic, readonly) bool touchDownInIcon;
@property (nonatomic, readonly) unsigned long long visibleMiniIconCount;
@property (nonatomic, readonly) unsigned long long visibleMiniIconListIndex;

+ (bool)_alwaysShowsAccessoryOfType:(long long)arg1;
+ (Class)_closeBoxClassForType:(long long)arg1;
+ (double)_defaultDragInteractionLiftDelay;
+ (id)_jitterRotationAnimation;
+ (id)_jitterXTranslationAnimation;
+ (id)_jitterYTranslationAnimation;
+ (double)_labelHeight;
+ (void)activateShortcut:(id)arg1 withBundleIdentifier:(id)arg2 forIconView:(id)arg3;
+ (bool)allowsLabelAccessoryView;
+ (id)componentBackgroundView;
+ (void)configureLabelImageParametersBuilder:(id)arg1 forIcon:(id)arg2 location:(id)arg3;
+ (long long)continuityBadgeTypeForContinuityInfo:(id)arg1;
+ (struct CGPoint { double x1; double x2; })defaultIconImageCenterForIconImageSize:(struct CGSize { double x1; double x2; })arg1;
+ (double)defaultIconImageCornerRadius;
+ (double)defaultIconImageScale;
+ (struct CGSize { double x1; double x2; })defaultIconImageSize;
+ (id)defaultIconLocation;
+ (struct CGSize { double x1; double x2; })defaultIconViewSize;
+ (struct CGSize { double x1; double x2; })defaultIconViewSizeForIconImageSize:(struct CGSize { double x1; double x2; })arg1 configurationOptions:(unsigned long long)arg2;
+ (unsigned long long)defaultImageLoadingBehavior;
+ (double)defaultMaxLabelHeight;
+ (double)defaultMaxLabelWidthDeltaForContentSizeCategory:(id)arg1;
+ (Class)defaultViewClassForAccessoryType:(long long)arg1;
+ (Class)defaultViewClassForLabelAccessoryType:(long long)arg1;
+ (id)dragContextForDragItem:(id)arg1;
+ (id)draggedItemBundleIdentifiersInDrag:(id)arg1;
+ (double)iconLiftAlpha;
+ (bool)isIconTapGestureRecognizer:(id)arg1;
+ (double)labelAccessoryViewAdditionalRightMarginForType:(long long)arg1;
+ (double)labelAccessoryViewBaseRightMargin;
+ (id)labelConfigurationForListLayout:(id)arg1 contentSizeCategory:(id)arg2 options:(unsigned long long)arg3;
+ (struct CGSize { double x1; double x2; })maxLabelSizeForIconImageSize:(struct CGSize { double x1; double x2; })arg1;
+ (struct CGSize { double x1; double x2; })maxLabelSizeForListLayout:(id)arg1 contentSizeCategory:(id)arg2 options:(unsigned long long)arg3;
+ (bool)supportsCursorInteraction;
+ (bool)supportsDragInteraction;
+ (bool)supportsPreviewInteraction;
+ (bool)supportsTapGesture;

- (void).cxx_destruct;
- (void)_acquireHomeButtonPressConsumingAssertionIfNecessary;
- (double)_additionalLiftScale;
- (void)_applyAdditonalLiftScale:(bool)arg1;
- (void)_applyEditingStateAnimated:(bool)arg1;
- (void)_applyIconAccessoryAlpha:(double)arg1;
- (void)_applyIconContentScale:(double)arg1;
- (void)_applyIconImageAlpha:(double)arg1;
- (void)_applyIconLabelAlpha:(double)arg1;
- (void)_applyOverallAlpha:(double)arg1;
- (void)_applyParallaxSettingsToAccessoryViews;
- (id)_automationID;
- (void)_backgroundContrastDidChange:(id)arg1;
- (void)_boldTextStatusDidChange:(id)arg1;
- (struct CGPoint { double x1; double x2; })_centerForAccessoryView;
- (struct CGPoint { double x1; double x2; })_centerForCloseBox;
- (void)_closeBoxTapGestureChanged:(id)arg1;
- (long long)_closeBoxType;
- (void)_configureIconImageView:(id)arg1;
- (void)_configureLabelAccessoryViewForType:(long long)arg1;
- (void)_configureViewAsFolderIconImageView:(id)arg1;
- (void)_contentSizeCategoryDidChange:(id)arg1;
- (id)_contextMenuInteraction:(id)arg1 overrideSuggestedActionsForConfiguration:(id)arg2;
- (id)_contextMenuInteraction:(id)arg1 previewForIconWithConfigurationOptions:(unsigned long long)arg2 highlighted:(bool)arg3;
- (id)_contextMenuInteraction:(id)arg1 styleForMenuWithConfiguration:(id)arg2;
- (bool)_contextMenuInteractionShouldAllowDragAfterDismiss:(id)arg1;
- (void)_createAccessoryViewIfNecessary;
- (void)_createCloseBoxIfNecessary;
- (bool)_delegateTapAllowed;
- (void)_delegateTouchEnded:(bool)arg1;
- (void)_destroyAccessoryView;
- (void)_destroyAccessoryView:(id)arg1;
- (void)_disableContentContainerView;
- (bool)_dragInteraction:(id)arg1 canExcludeCompetingGestureRecognizer:(id)arg2;
- (bool)_dragInteraction:(id)arg1 competingGestureRecognizerShouldDelayLift:(id)arg2;
- (void)_dragInteraction:(id)arg1 liftAnimationDidChangeDirection:(long long)arg2;
- (bool)_dragInteraction:(id)arg1 shouldDelayCompetingGestureRecognizer:(id)arg2;
- (void)_enableContentContainerView;
- (id)_folderIconImageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForImageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForLabel;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForLabelAccessoryViewWithLabelFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 labelImage:(id)arg2 labelImageParameters:(id)arg3 imageFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForVisibleImage;
- (void)_handleAddWidgetRequest:(id)arg1;
- (void)_handleTap;
- (id)_iconImageView;
- (void)_invalidateHomeButtonPressConsumingAssertion;
- (bool)_isCursorInteractionEnabled;
- (bool)_isShowingAccessoryView;
- (bool)_isShowingCloseBox;
- (double)_labelBaselineOffsetFromImage;
- (id)_labelImage;
- (id)_labelImageParameters;
- (double)_labelVerticalOffset;
- (id)_legibilitySettingsWithParameters:(id)arg1;
- (id)_legibilitySettingsWithPrimaryColor:(id)arg1;
- (id)_legibilitySettingsWithStyle:(long long)arg1 primaryColor:(id)arg2;
- (id)_makeIconImageView;
- (void)_recursiveNotifyInteractionTintColorDidChangeForReasons:(unsigned long long)arg1;
- (void)_recursivelyUpdateBackdropMaskFrames;
- (void)_registerForAddWidgetRequestsIfNecessary;
- (void)_removeUnknownSubviews;
- (void)_setShowingAccessoryView:(bool)arg1;
- (void)_setShowingCloseBox:(bool)arg1;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (bool)_shouldHaveContentContainerView;
- (void)_toggleContentContainerViewIfNecessary;
- (void)_unregisterForAddWidgetRequests;
- (void)_updateAccessoryViewWithAnimation:(bool)arg1;
- (void)_updateAllComponentAlphas;
- (void)_updateBrightness;
- (void)_updateCloseBoxAnimated:(bool)arg1;
- (void)_updateConfigurationForIconImageView:(id)arg1;
- (void)_updateCursorInteractionsEnabled;
- (void)_updateDragInteractionLiftDelay;
- (void)_updateFrameToIconViewSize;
- (void)_updateIconImageViewAnimated:(bool)arg1;
- (void)_updateJitter;
- (void)_updateLabel;
- (void)_updateLabelAccessoryView;
- (void)_updateLaunchDisabled;
- (void)_updateProgressAnimated:(bool)arg1;
- (id)accessibilityTintColor;
- (struct CGPoint { double x1; double x2; })accessoryOffset;
- (struct CGSize { double x1; double x2; })accessorySize;
- (id)accessoryViewAnimator;
- (id)activeContextMenuConfiguration;
- (void)addGesturesAndInteractionsIfNecessary;
- (void)addObserver:(id)arg1;
- (void)addPendingAnimatorCompletionForConfiguration:(id)arg1 block:(id /* block */)arg2;
- (bool)allIconElementsButLabelHidden;
- (bool)allowsBlockedForScreenTimeExpiration;
- (bool)allowsCloseBox;
- (bool)allowsEditingAnimation;
- (bool)allowsLabelAccessoryView;
- (bool)allowsLabelArea;
- (bool)allowsPassthroughHitTesting;
- (bool)allowsTapWhileEditing;
- (id)applicationBundleIdentifierForShortcuts;
- (id)applicationBundleURLForShortcuts;
- (id)applicationShortcutItems;
- (id)applicationShortcutWidgetBundleIdentifier;
- (id)badgeParallaxSettings;
- (double)baselineOffsetFromBottom;
- (bool)canBeginDrags;
- (bool)canReceiveGrabbedIcon:(id)arg1;
- (bool)canShowCloseBox;
- (void)cancelDrag;
- (void)cancelDragLift;
- (unsigned long long)centerVisibleMiniIconIndex;
- (void)cleanUpAfterDropAnimation;
- (void)cleanupAfterCrossfade;
- (void)cleanupAfterFloatyFolderCrossfade;
- (void)cleanupAnimatorCompletionForConfiguration:(id)arg1;
- (id)closeBoxCursorInteraction;
- (bool)closeBoxShouldTrack:(id)arg1;
- (unsigned long long)configurationOptions;
- (void)configureForLabelAllowed:(bool)arg1;
- (void)configureLabelImageParametersBuilder:(id)arg1;
- (void)configureMatchingIconView:(id)arg1;
- (void)consumeSinglePressUpForButtonKind:(long long)arg1;
- (id)contentContainerView;
- (id)contentSizeCategory;
- (id)contextMenuInteraction;
- (id)contextMenuInteraction:(id)arg1 configurationForMenuAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (id)contextMenuInteraction:(id)arg1 previewForDismissingMenuWithConfiguration:(id)arg2;
- (id)contextMenuInteraction:(id)arg1 previewForHighlightingMenuWithConfiguration:(id)arg2;
- (void)contextMenuInteraction:(id)arg1 willDisplayMenuForConfiguration:(id)arg2 animator:(id)arg3;
- (void)contextMenuInteraction:(id)arg1 willEndForConfiguration:(id)arg2 animator:(id)arg3;
- (void)contextMenuInteraction:(id)arg1 willPerformPreviewActionForMenuWithConfiguration:(id)arg2 animator:(id)arg3;
- (id /* block */)contextMenuInteractionPendingCompletion;
- (long long)continuityBadgeType;
- (id)continuityInfo;
- (long long)currentAccessoryType;
- (id)currentImageView;
- (long long)currentLabelAccessoryType;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cursorHitTestPadding;
- (id)cursorInteraction:(id)arg1 regionForLocation:(struct CGPoint { double x1; double x2; })arg2 defaultRegion:(id)arg3;
- (id)cursorInteraction:(id)arg1 styleForRegion:(id)arg2 modifiers:(long long)arg3;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (void)didMoveToWindow;
- (bool)disallowCursorInteraction;
- (void)dismissContextMenuWithCompletion:(id /* block */)arg1;
- (long long)displayedLabelAccessoryType;
- (id)displayedLabelFont;
- (id)dragInteraction;
- (void)dragInteraction:(id)arg1 item:(id)arg2 willAnimateCancelWithAnimator:(id)arg3;
- (id)dragInteraction:(id)arg1 itemsForAddingToSession:(id)arg2 withTouchAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (id)dragInteraction:(id)arg1 itemsForBeginningSession:(id)arg2;
- (id)dragInteraction:(id)arg1 previewForCancellingItem:(id)arg2 withDefault:(id)arg3;
- (id)dragInteraction:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;
- (void)dragInteraction:(id)arg1 session:(id)arg2 didEndWithOperation:(unsigned long long)arg3;
- (void)dragInteraction:(id)arg1 session:(id)arg2 willAddItems:(id)arg3 forInteraction:(id)arg4;
- (void)dragInteraction:(id)arg1 session:(id)arg2 willEndWithOperation:(unsigned long long)arg3;
- (id)dragInteraction:(id)arg1 sessionForAddingItems:(id)arg2 withTouchAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (bool)dragInteraction:(id)arg1 sessionIsRestrictedToDraggingApplication:(id)arg2;
- (void)dragInteraction:(id)arg1 sessionWillBegin:(id)arg2;
- (void)dragInteraction:(id)arg1 willAnimateLiftWithAnimator:(id)arg2 session:(id)arg3;
- (double)dragInteractionLiftDelay;
- (id)dragItems;
- (id)dragPreviewForItem:(id)arg1 session:(id)arg2;
- (id)draggingLaunchActions;
- (id)draggingLaunchURL;
- (long long)draggingStartLocation;
- (void)earlyTerminateContextMenuDismissAnimation;
- (id)editingModeGestureRecognizer;
- (void)editingModeGestureRecognizerDidFire:(id)arg1;
- (id)effectiveApplicationShortcutItems;
- (double)effectiveBrightness;
- (double)effectiveIconAccessoryAlpha;
- (double)effectiveIconImageAlpha;
- (double)effectiveIconLabelAlpha;
- (id)effectiveListLayoutProvider;
- (double)effectiveOverallAlpha;
- (void)endForbiddingEditingModeWithReason:(id)arg1;
- (Class)expectedIconImageViewClass;
- (double)firstLineBaseline;
- (unsigned long long)firstVisibleMiniIconIndex;
- (id)folder;
- (unsigned long long)folderBackgroundStyle;
- (id)folderIcon;
- (id)folderIconBackgroundView;
- (id)folderIconImageCache;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForMiniIconAtIndex:(unsigned long long)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)homeButtonPressConsumingAssertion;
- (id)icon;
- (void)iconAccessoriesDidUpdate:(id)arg1;
- (double)iconAccessoryAlpha;
- (double)iconContentScale;
- (double)iconImageAlpha;
- (id)iconImageCache;
- (struct CGPoint { double x1; double x2; })iconImageCenter;
- (double)iconImageCornerRadius;
- (void)iconImageDidUpdate:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })iconImageFrame;
- (struct SBIconImageInfo { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; })iconImageInfo;
- (struct CGSize { double x1; double x2; })iconImageSize;
- (id)iconImageSnapshot;
- (struct CGSize { double x1; double x2; })iconImageVisibleSize;
- (void)iconInteractedWhenDisabled;
- (double)iconLabelAlpha;
- (void)iconLaunchEnabledDidChange:(id)arg1;
- (id)iconViewCursorInteraction;
- (struct CGSize { double x1; double x2; })iconViewSize;
- (unsigned long long)imageLoadingBehavior;
- (id)initWithConfigurationOptions:(unsigned long long)arg1;
- (id)initWithConfigurationOptions:(unsigned long long)arg1 listLayoutProvider:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isAnimatingScrolling;
- (bool)isContextMenuInteractionActive;
- (bool)isContextMenuInteractionActiveOrPending;
- (bool)isContextMenuInteractionPending;
- (bool)isCrossfadingImageWithView;
- (bool)isDragging;
- (bool)isEditing;
- (bool)isEnabled;
- (bool)isFolderIcon;
- (bool)isGrabbed;
- (bool)isHighlighted;
- (bool)isIconContentScalingEnabled;
- (bool)isInDock;
- (bool)isLabelAccessoryHidden;
- (bool)isLabelHidden;
- (bool)isLabelTextBold;
- (bool)isOverlapping;
- (bool)isPaused;
- (bool)isShowingContextMenu;
- (bool)isTimedOut;
- (bool)isTouchDownInIcon;
- (double)labelAccessoryTotalWidth;
- (id)labelConfiguration;
- (id)labelFont;
- (id)labelView;
- (double)lastLineBaseline;
- (id)lastTouchDownDate;
- (unsigned long long)lastVisibleMiniIconIndex;
- (void)layoutSubviews;
- (id)legibilitySettings;
- (id)listLayout;
- (id)listLayoutProvider;
- (id)location;
- (id)matchingIconViewByAddingConfigurationOptions:(unsigned long long)arg1 removingConfigurationOptions:(unsigned long long)arg2;
- (id)matchingIconViewWithConfigurationOptions:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })maxLabelSize;
- (id)newComponentBackgroundView;
- (id)pauseReasonsDescriptions;
- (id /* block */)pendingAnimatorCompletionForConfiguration:(id)arg1;
- (id)pendingAnimatorCompletionsTable;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (bool)pointMostlyInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)prepareForIconDrop;
- (void)prepareForReuse;
- (void)prepareToCrossfadeImageWithView:(id)arg1 maskCorners:(bool)arg2 trueCrossfade:(bool)arg3;
- (void)prepareToCrossfadeImageWithView:(id)arg1 maskCorners:(bool)arg2 trueCrossfade:(bool)arg3 anchorPoint:(struct CGPoint { double x1; double x2; })arg4;
- (void)prepareToCrossfadeWithFloatyFolderView:(id)arg1 allowFolderInteraction:(bool)arg2;
- (id)presentedWidgetBundleIdentifier;
- (void)pressesBegan:(id)arg1 withEvent:(id)arg2;
- (void)pressesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)pressesChanged:(id)arg1 withEvent:(id)arg2;
- (void)pressesEnded:(id)arg1 withEvent:(id)arg2;
- (long long)progressState;
- (bool)refusesRecipientStatus;
- (void)removeAllIconAnimations;
- (void)removeObserver:(id)arg1;
- (id)representedFolderIconLocation;
- (void)scrollToFirstGapAnimated:(bool)arg1;
- (void)scrollToGapOrTopIfFullOfPage:(unsigned long long)arg1 animated:(bool)arg2;
- (void)scrollToTopOfFirstPageAnimated:(bool)arg1;
- (void)scrollToTopOfPage:(unsigned long long)arg1 animated:(bool)arg2;
- (void)setAccessibilityTintColor:(id)arg1;
- (void)setAccessoryViewAnimator:(id)arg1;
- (void)setActiveContextMenuConfiguration:(id)arg1;
- (void)setAllIconElementsButLabelHidden:(bool)arg1;
- (void)setAllowsBlockedForScreenTimeExpiration:(bool)arg1;
- (void)setAllowsCloseBox:(bool)arg1;
- (void)setAllowsEditingAnimation:(bool)arg1;
- (void)setAllowsLabelArea:(bool)arg1;
- (void)setAllowsPassthroughHitTesting:(bool)arg1;
- (void)setApplicationShortcutItems:(id)arg1;
- (void)setBackgroundAndIconGridImageAlpha:(double)arg1;
- (void)setConfigurationOptions:(unsigned long long)arg1;
- (void)setContextMenuInteractionActive:(bool)arg1;
- (void)setContextMenuInteractionPending:(bool)arg1;
- (void)setContextMenuInteractionPendingCompletion:(id /* block */)arg1;
- (void)setContinuityInfo:(id)arg1;
- (void)setContinuityInfo:(id)arg1 animated:(bool)arg2;
- (void)setCrossfadeCornerRadius:(double)arg1;
- (void)setCrossfadeFraction:(double)arg1;
- (void)setCursorHitTestPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisallowCursorInteraction:(bool)arg1;
- (void)setDragging:(bool)arg1;
- (void)setDragging:(bool)arg1 updateImmediately:(bool)arg2;
- (void)setEditing:(bool)arg1;
- (void)setEditing:(bool)arg1 animated:(bool)arg2;
- (void)setEnabled:(bool)arg1;
- (void)setFloatyFolderCrossfadeFraction:(double)arg1;
- (void)setFolderBackgroundStyle:(unsigned long long)arg1;
- (void)setFolderIcon:(id)arg1;
- (void)setFolderIconBackgroundView:(id)arg1;
- (void)setFolderIconImageCache:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGrabbed:(bool)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setHomeButtonPressConsumingAssertion:(id)arg1;
- (void)setIcon:(id)arg1;
- (void)setIcon:(id)arg1 animated:(bool)arg2;
- (void)setIconAccessoryAlpha:(double)arg1;
- (void)setIconContentScale:(double)arg1;
- (void)setIconContentScalingEnabled:(bool)arg1;
- (void)setIconGridImageAlpha:(double)arg1;
- (void)setIconImageAlpha:(double)arg1;
- (void)setIconImageAndAccessoryAlpha:(double)arg1;
- (void)setIconImageCache:(id)arg1;
- (void)setIconImageInfo:(struct SBIconImageInfo { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; })arg1;
- (void)setIconLabelAlpha:(double)arg1;
- (void)setImageLoadingBehavior:(unsigned long long)arg1;
- (void)setInDock:(bool)arg1;
- (void)setLabelAccessoryHidden:(bool)arg1;
- (void)setLabelFont:(id)arg1;
- (void)setLabelHidden:(bool)arg1;
- (void)setLastTouchDownDate:(id)arg1;
- (void)setLegibilitySettings:(id)arg1;
- (void)setListLayoutProvider:(id)arg1;
- (void)setLocation:(id)arg1;
- (void)setMorphFraction:(double)arg1;
- (void)setOverlapping:(bool)arg1;
- (void)setPaused:(bool)arg1;
- (void)setPaused:(bool)arg1 forReason:(unsigned long long)arg2;
- (void)setPendingAnimatorCompletionsTable:(id)arg1;
- (void)setPresentedWidgetBundleIdentifier:(id)arg1;
- (void)setRefusesRecipientStatus:(bool)arg1;
- (void)setShowsDropGlow:(bool)arg1 animator:(id)arg2;
- (void)setShowsSquareCorners:(bool)arg1;
- (void)setStartsDragMoreQuickly:(bool)arg1;
- (void)setTouchDownInIcon:(bool)arg1;
- (void)setUserInteractionEnabled:(bool)arg1;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (bool)shouldActivateApplicationShortcutItem:(id)arg1 atIndex:(unsigned long long)arg2;
- (bool)shouldShowCloseBox;
- (bool)shouldShowLabelAccessoryView;
- (bool)showsDropGlow;
- (bool)showsSquareCorners;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)startForbiddingEditingModeWithReason:(id)arg1;
- (bool)startsDragMoreQuickly;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;
- (void)tapGestureDidChange:(id)arg1;
- (id)tapGestureRecognizer;
- (id)tintColor;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleImageRelativeFrameForMiniIconAtIndex:(unsigned long long)arg1;
- (unsigned long long)visibleMiniIconCount;
- (unsigned long long)visibleMiniIconListIndex;

@end
