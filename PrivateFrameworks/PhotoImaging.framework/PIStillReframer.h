/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/PhotoImaging.framework/PhotoImaging
 */

@interface PIStillReframer : NSObject {
    NSArray * _ANODSubjects;
    PIStillReframerConfiguration * _configuration;
    NSMutableArray * _mutableSubjects;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _overscanBounds;
    PIReframeResult * _result;
    NURuleSystem * _ruleSystem;
    VNSaliencyImageObservation * _saliencyObservation;
    bool  _sceneContainsHuman;
    bool  _sceneContainsMultipleSubjects;
    bool  _sceneContainsPet;
    bool  _shouldAttemptReframe;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _viewBounds;
}

@property (nonatomic, readonly, copy) NSArray *ANODSubjects;
@property (nonatomic, readonly) PIStillReframerConfiguration *configuration;
@property (nonatomic, readonly) NSData *evaluationData;
@property (nonatomic, readonly, copy) NSMutableArray *mutableSubjects;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } overscanBounds;
@property (nonatomic, readonly) PIReframeResult *result;
@property (nonatomic, readonly) NURuleSystem *ruleSystem;
@property (nonatomic, readonly) VNSaliencyImageObservation *saliencyObservation;
@property (nonatomic) bool sceneContainsHuman;
@property (nonatomic) bool sceneContainsMultipleSubjects;
@property (nonatomic) bool sceneContainsPet;
@property (nonatomic, readonly) bool shouldAttemptReframe;
@property (nonatomic, readonly, copy) NSArray *subjects;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } viewBounds;

+ (id)defaultConfiguration;
+ (id)detectedSubjectsForImage:(id)arg1 context:(id)arg2;
+ (id)keyForSubjectWithIndex:(unsigned long long)arg1 prefix:(id)arg2;
+ (unsigned long long)subjectDirectionForImageOrientation:(long long)arg1;

- (void).cxx_destruct;
- (id)ANODSubjects;
- (double)amountOfOverscanUsedByRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })calculateReframedRect;
- (bool)canIncludeSubject:(id)arg1 boundsPercentageInside:(double*)arg2 expandedBoundsPercentageInside:(double*)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })candidateRectForSubject:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clamppedSubjectBoundsForEdgeBleed:(id)arg1;
- (double)confidenceWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)configuration;
- (id)evaluationData;
- (id)initWithConfiguration:(id)arg1 expandedSubjectConfiguration:(id)arg2 overscanBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 viewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 image:(id)arg5;
- (id)initWithConfiguration:(id)arg1 overscanBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 viewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 subjects:(id)arg4;
- (void)invalidateCaches;
- (id)mutableSubjects;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })overscanBounds;
- (id)result;
- (id)ruleSystem;
- (id)saliencyObservation;
- (bool)sceneContainsHuman;
- (bool)sceneContainsMultipleSubjects;
- (bool)sceneContainsPet;
- (void)setSceneContainsHuman:(bool)arg1;
- (void)setSceneContainsMultipleSubjects:(bool)arg1;
- (void)setSceneContainsPet:(bool)arg1;
- (bool)shouldAllowCandidateRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forUnwantedSubjects:(id)arg2;
- (bool)shouldAttemptReframe;
- (id)subjects;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })viewBounds;

@end
