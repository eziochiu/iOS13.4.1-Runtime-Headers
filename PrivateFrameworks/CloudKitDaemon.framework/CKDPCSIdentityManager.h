/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon
 */

@interface CKDPCSIdentityManager : NSObject {
    NSMutableDictionary * _PCSIdentityWrappersByServiceName;
    CKDAccount * _account;
    NSString * _cachedAccountDSID;
    struct _PCSIdentityData { } * _debugIdentity;
    bool  _forceEnableReadOnlyManatee;
    bool  _isSiloed;
    NSString * _serviceName;
}

@property (retain) NSMutableDictionary *PCSIdentityWrappersByServiceName;
@property (retain) CKDAccount *account;
@property (retain) NSString *cachedAccountDSID;
@property (nonatomic, readonly) bool currentServiceIsManatee;
@property (nonatomic) struct _PCSIdentityData { }*debugIdentity;
@property (nonatomic, readonly) bool forceEnableReadOnlyManatee;
@property (nonatomic, readonly) bool isSiloed;
@property (nonatomic, readonly) NSString *serviceName;

+ (struct _PCSIdentitySetData { }*)_copyStingrayIdentitiesForService:(id)arg1 forBackingFakeAccount:(id)arg2 withError:(id*)arg3;
+ (struct _PCSIdentitySetData { }*)_getTestAccountIdentitySetForService:(id)arg1 forBackingFakeAccount:(id)arg2 withError:(id*)arg3;
+ (id)sharedFakeIdentitySetsByServiceByUsername;

- (void).cxx_destruct;
- (id)PCSIdentityWrappersByServiceName;
- (id)PCSServiceStringFromCKServiceType:(unsigned long long)arg1;
- (id)_addIdentitiesFromServiceNamed:(id)arg1 dsid:(id)arg2 toMutableSet:(struct _PCSIdentitySetData { }*)arg3;
- (id)_cacheIdentitySet:(struct _PCSIdentitySetData { }*)arg1 forService:(id)arg2;
- (struct _PCSIdentitySetData { }*)_copyIdentityForService:(id)arg1 useCache:(bool)arg2 validateCurrentKey:(bool)arg3 error:(id*)arg4;
- (id)_copyPublicKeyDataForAllIdentitiesInSet:(struct _PCSIdentitySetData { }*)arg1 withService:(unsigned long long)arg2;
- (id)_copyPublicKeyDataForIdentitySet:(struct _PCSIdentitySetData { }*)arg1 withService:(unsigned long long)arg2 withError:(id*)arg3;
- (struct _PCSIdentitySetData { }*)_copyTestAccountIdentitySetForService:(id)arg1 forBackingFakeAccount:(id)arg2 withError:(id*)arg3;
- (struct _PCSIdentitySetData { }*)_createIdentitySetForService:(id)arg1 dsid:(id)arg2 error:(id*)arg3;
- (struct _PCSIdentitySetData { }*)_createSpecialInMemorySetCombiningLiverpoolWithServiceNamed:(id)arg1 dsid:(id)arg2 error:(id*)arg3;
- (bool)_hasCurrentKeyForService:(id)arg1 inIdentitySet:(struct _PCSIdentitySetData { }*)arg2 withError:(id*)arg3;
- (id)account;
- (id)cachedAccountDSID;
- (id)copyAllPublicKeysForService:(unsigned long long)arg1 withError:(id*)arg2;
- (struct _PCSPublicIdentityData { }*)copyDiversifiedIdentityForService:(unsigned long long)arg1 userIDEntropy:(id)arg2 withError:(id*)arg3;
- (id)copyDiversifiedPublicKeyForService:(unsigned long long)arg1 userIDEntropy:(id)arg2 withError:(id*)arg3;
- (struct _PCSIdentitySetData { }*)copyIdentitySetWithType:(unsigned long long)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)copyPublicKeyForService:(unsigned long long)arg1 withError:(id*)arg2;
- (struct _PCSIdentityData { }*)createCombinedIdentityWithOutOfNetworkPrivateKey:(id)arg1 publicSharingIdentity:(id)arg2;
- (struct _PCSIdentitySetData { }*)createFullKeychainIdentitySetWithError:(id*)arg1;
- (struct _PCSPublicIdentityData { }*)createPublicSharingIdentityFromPublicKey:(id)arg1 error:(id*)arg2;
- (struct _PCSIdentityData { }*)createRandomSharingIdentityWithError:(id*)arg1;
- (struct _PCSIdentityData { }*)createSharingIdentityFromData:(id)arg1 error:(id*)arg2;
- (bool)currentServiceIsManatee;
- (id)dataFromSharingIdentity:(struct _PCSIdentityData { }*)arg1 error:(id*)arg2;
- (void)dealloc;
- (struct _PCSIdentityData { }*)debugIdentity;
- (struct _PCSIdentityData { }*)debugSharingIdentity;
- (bool)forceEnableReadOnlyManatee;
- (void)identitiesChanged;
- (bool)identitySet:(struct _PCSIdentitySetData { }*)arg1 containsPublicKey:(id)arg2 error:(id*)arg3;
- (id)initWithAccount:(id)arg1 serviceName:(id)arg2 isSiloed:(bool)arg3 forceEnableReadOnlyManatee:(bool)arg4;
- (id)internalServicesToCombineWithLiverpoolKey;
- (bool)isSiloed;
- (id)liverpoolPublicKey;
- (bool)manateeIsAvailableWithError:(id*)arg1;
- (bool)serviceIsManatee:(id)arg1;
- (id)serviceName;
- (void)setAccount:(id)arg1;
- (void)setCachedAccountDSID:(id)arg1;
- (void)setDebugIdentity:(struct _PCSIdentityData { }*)arg1;
- (void)setPCSIdentityWrappersByServiceName:(id)arg1;
- (void)updateAccount:(id)arg1;

@end
