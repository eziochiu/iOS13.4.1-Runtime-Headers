/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference
 */

@interface VCAudioStream : VCMediaStream <VCAudioIODelegate, VCAudioIOSink, VCMediaStreamSyncSource> {
    VCAudioIO * _audioIO;
    void * _audioMediaControlInfoGenerator;
    VCAudioTransmitter * _audioTransmitter;
    int  _clientPid;
    bool  _currentDTXEnable;
    VCAudioPowerSpectrumSource * _inputAudioPowerSpectrumSource;
    long long  _inputAudioPowerSpectrumToken;
    bool  _isMuted;
    VCAudioPowerSpectrumSource * _outputAudioPowerSpectrumSource;
    long long  _outputAudioPowerSpectrumToken;
    unsigned int  _pullAudioSamplesCount;
    double  _remoteMediaStallTimeout;
    int  _reportingModuleID;
    unsigned int  _reportingSSRCCount;
    unsigned int * _reportingSSRCList;
    bool  _rtcpEnabledBeforeInterrupt;
    bool  _rtpEnabledBeforeInterrupt;
    bool  _sendActiveVoiceOnly;
    struct _VCAudioStreamSinkContext { 
        struct _METER_INFO { 
            bool frequencyMeteringEnabled; 
            struct opaqueVCFFTMeter {} *fftMeter; 
        } soundMeter; 
    }  _sinkContext;
    struct _VCAudioStreamSourceContext { 
        bool isRemoteMuted; 
        struct _METER_INFO { 
            bool frequencyMeteringEnabled; 
            struct opaqueVCFFTMeter {} *fftMeter; 
        } soundMeter; 
        struct tagVCAudioReceiver {} *audioReceiver; 
        unsigned int framesProcessed; 
        float volume; 
        bool shouldPostProcessSamples; 
        bool isSendOnly; 
        bool isRemoteMediaStalled; 
        double lastReceivedAudioTimestamp; 
        int packetsSinceStallCount; 
        double remoteMediaStallTimeout; 
        unsigned int awdTime; 
        struct _VCSingleLinkedList { 
            struct _VCSingleLinkedListEntry {} *head; 
            bool initialized; 
            int (*compare)(); 
        } transports; 
        <VCMediaStreamDelegate> *delegate; 
        VCAudioStream *self; 
        <VCMediaStreamSyncSourceDelegate> *syncSourceDelegate; 
        <VCMomentsCollectorDelegate> *momentsCollectorDelegate; 
    }  _sourceContext;
    NSNumber * _targetStreamID;
    AVTelephonyInterface * _telephonyInterface;
    NSMutableArray * audioPayloads;
    unsigned int  conferenceID;
    VCAudioPayload * currentAudioPayload;
    VCAudioPayload * currentDTXPayload;
    double  dAudioHostTime;
    int  deviceRole;
    DTMFEventHandler * dtmfEventHandler;
    bool  isValid;
    unsigned int  lastInputAudioTimeStamp;
    unsigned int  lastSentAudioSampleTime;
    bool  lastVoiceActive;
    int  numBufferBytesAvailable;
    NSObject<OS_dispatch_source> * pausedAudioHeartBeat;
    int  preferredAudioCodec;
    long long  sampleRate;
    long long  samplesPerFrame;
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    }  stateLock;
    id  syncSourceDelegate;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        unsigned int mFormatID; 
        unsigned int mFormatFlags; 
        unsigned int mBytesPerPacket; 
        unsigned int mFramesPerPacket; 
        unsigned int mBytesPerFrame; 
        unsigned int mChannelsPerFrame; 
        unsigned int mBitsPerChannel; 
        unsigned int mReserved; 
    }  vpioFormat;
    WRMClient * wrmClient;
}

@property (retain) VCAudioIO *audioIO;
@property (retain) VCAudioTransmitter *audioTransmitter;
@property (readonly) unsigned int conferenceID;
@property (getter=isCurrentDTXEnabled, nonatomic) bool currentDTXEnable;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) int deviceRole;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isValid;
@property (getter=isMuted, nonatomic) bool muted;
@property (nonatomic, readonly) void*realtimeSourceContext;
@property (getter=isRemoteMuted, nonatomic) bool remoteMuted;
@property (nonatomic) bool sendActiveVoiceOnly;
@property (readonly) Class superclass;
@property (nonatomic) NSObject<VCMediaStreamSyncSourceDelegate> *syncSourceDelegate;
@property (nonatomic, retain) NSNumber *targetStreamID;
@property (nonatomic) float volume;

+ (unsigned char)audioIODirectionWithMediaStreamDirection:(long long)arg1;
+ (id)capabilities;
+ (id)supportedAudioPayloads;

- (void)_computeInternalFormatForAudioConfig:(id)arg1;
- (id)addAudioPayload:(int)arg1;
- (id)audioIO;
- (id)audioTransmitter;
- (int)bundlingSchemeForOperatingMode:(int)arg1 payloadType:(int)arg2;
- (bool)canProcessAudio;
- (int)captureMeshMode:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)cleanupAudio;
- (void)cleanupBeforeReconfigure:(id)arg1;
- (unsigned int)codecTypeFromAudioPayload:(int)arg1;
- (void)collectRxChannelMetrics:(struct { unsigned int x1; unsigned int x2; double x3; }*)arg1;
- (void)collectRxChannelMetrics:(struct { unsigned int x1; unsigned int x2; double x3; }*)arg1 interval:(float)arg2;
- (void)collectTxChannelMetrics:(struct { unsigned int x1; unsigned int x2; double x3; }*)arg1;
- (unsigned int)computePacketTimestampWithInputTimestamp:(unsigned int)arg1 numSamples:(int)arg2 hostTime:(double)arg3;
- (unsigned int)conferenceID;
- (id)configForPayloadType:(int)arg1;
- (bool)createAudioReceiver;
- (bool)createAudioTransmitter:(long long)arg1 streamIDs:(id)arg2;
- (void)createReportSSRCListWithStreamConfigs:(id)arg1;
- (id)createTransport;
- (void)dealloc;
- (int)deviceRole;
- (void)didResumeAudioIO:(id)arg1;
- (void)didSuspendAudioIO:(id)arg1;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x1; double x2; }*)arg1;
- (bool)generateReceptionReportList:(struct _RTCP_RECEPTION_REPORT { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned char x9; }*)arg1 reportCount:(char *)arg2;
- (struct __CFDictionary { }*)getClientSpecificUserInfo:(id)arg1;
- (void)getCodecConfigForPayload:(int)arg1 block:(id /* block */)arg2;
- (int)getPacketsPerBundleForStreamConfig:(id)arg1;
- (struct __CFString { }*)getReportingClientName;
- (int)getReportingClientType;
- (id)getReportingServiceID;
- (id)getSupportedPayloads;
- (long long)getSyncSourceSampleRate;
- (void)handleActiveConnectionChange:(id)arg1;
- (void)handleCodecRateModeChange:(int)arg1 payload:(int)arg2;
- (id)initWithClientPid:(int)arg1;
- (id)initWithClientPid:(int)arg1 ssrc:(unsigned int)arg2;
- (id)initWithClientPid:(int)arg1 ssrc:(unsigned int)arg2 transportSessionID:(unsigned int)arg3;
- (unsigned int)internalSampleRateForCodecType:(long long)arg1;
- (bool)isCurrentDTXEnabled;
- (bool)isFrequencyMeteringEnabled:(int)arg1;
- (bool)isMuted;
- (bool)isRemoteMuted;
- (bool)isValid;
- (double)lastReceivedRTCPPacketTime;
- (double)lastReceivedRTPPacketTime;
- (struct _METER_INFO { bool x1; struct opaqueVCFFTMeter {} *x2; }*)meterWithType:(int)arg1;
- (void)onCallIDChanged;
- (bool)onConfigureStreamWithConfiguration:(id)arg1 error:(id*)arg2;
- (void)onPauseWithCompletionHandler:(id /* block */)arg1;
- (void)onRTCPTimeout;
- (void)onRTPTimeout;
- (void)onResumeWithCompletionHandler:(id /* block */)arg1;
- (void)onSendRTCPPacket;
- (void)onStartWithCompletionHandler:(id /* block */)arg1;
- (void)onStopWithCompletionHandler:(id /* block */)arg1;
- (int)operatingModeForAudioStreamMode:(long long)arg1;
- (unsigned int)preferredAudioBitrateForPayload:(int)arg1;
- (void)prepareAudio;
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)pushSamplesOutputPowerSpectrum:(struct opaqueVCAudioBufferList { }*)arg1;
- (void*)realtimeSourceContext;
- (void)redundancyController:(id)arg1 redundancyPercentageDidChange:(unsigned int)arg2;
- (void)registerActiveAudioStreamChangeNotifications;
- (void)registerCodecRateModeChangeNotifications;
- (void)reportingAudioStreamEvent:(unsigned short)arg1;
- (double)rtcpHeartbeatLeeway;
- (bool)sendActiveVoiceOnly;
- (void)sendDTMFEvent:(id)arg1;
- (void)setAudioIO:(id)arg1;
- (void)setAudioTransmitter:(id)arg1;
- (void)setCanProcessAudio:(bool)arg1;
- (void)setCurrentDTXEnable:(bool)arg1;
- (void)setDTXPayload:(id)arg1;
- (void)setDeviceRole:(int)arg1;
- (void)setFrequencyMeteringEnabled:(bool)arg1 meterType:(int)arg2;
- (void)setInputTimestamp:(unsigned int)arg1 packetTimestamp:(int)arg2 hostTime:(double)arg3;
- (void)setIsValid:(bool)arg1;
- (id)setLocalParticipantInfo:(id)arg1 networkSockets:(id)arg2 withError:(id*)arg3;
- (void)setMuted:(bool)arg1;
- (bool)setReceiverPayloads;
- (void)setRemoteMuted:(bool)arg1;
- (void)setSendActiveVoiceOnly:(bool)arg1;
- (void)setState:(int)arg1;
- (void)setStreamDirection:(long long)arg1;
- (void)setStreamIDs:(id)arg1 repairStreamIDs:(id)arg2;
- (void)setSyncSourceDelegate:(id)arg1;
- (void)setTargetStreamID:(id)arg1;
- (void)setVolume:(float)arg1;
- (void)setupAudioPowerSpectrum;
- (bool)setupAudioStreamWithClientPid:(int)arg1;
- (bool)setupPayloads;
- (bool)setupSourceTransport:(id)arg1;
- (void)startAudioWithCompletionHandler:(id /* block */)arg1;
- (void)stateEnter;
- (void)stateExit;
- (void)stopAudioWithCompletionHandler:(id /* block */)arg1;
- (void)stopSendDTMFEvent;
- (id)streamIDsFromTransport;
- (id)supportedPayloads;
- (id)syncSourceDelegate;
- (id)targetStreamID;
- (void)unregisterCodecRateModeChangeNotifications;
- (void)updateSoundMeter:(struct _METER_INFO { bool x1; struct opaqueVCFFTMeter {} *x2; }*)arg1 isInputMeter:(bool)arg2 sampleBuffer:(struct opaqueVCAudioBufferList { }*)arg3;
- (bool)validateAudioStreamConfigurations:(id)arg1;
- (void)vcMediaStreamTransport:(id)arg1 updateSourceNTPTime:(double)arg2 rtpTimeStamp:(unsigned int)arg3;
- (float)volume;

@end
