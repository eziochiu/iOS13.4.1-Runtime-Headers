/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/NotesShared.framework/NotesShared
 */

@interface ICAttachment : ICCloudSyncingObject <DCScanDataDelegate, ICCloudObject, ICSearchIndexable> {
    NSURL * _URL;
    ICAttachmentModel * _attachmentModel;
    short  _attachmentType;
    NSDictionary * _metadata;
    AVAsset * _movie;
    NSURL * _remoteFileURL;
    bool  settingMergeableData;
}

@property (nonatomic, retain) NSURL *URL;
@property (nonatomic, retain) NSString *additionalIndexableText;
@property (nonatomic) bool checkedForLocation;
@property (nonatomic, retain) NSDate *creationDate;
@property (nonatomic, copy) ICDocCamImageQuad *croppingQuad;
@property (nonatomic) double croppingQuadBottomLeftX;
@property (nonatomic) double croppingQuadBottomLeftY;
@property (nonatomic) double croppingQuadBottomRightX;
@property (nonatomic) double croppingQuadBottomRightY;
@property (nonatomic) double croppingQuadTopLeftX;
@property (nonatomic) double croppingQuadTopLeftY;
@property (nonatomic) double croppingQuadTopRightX;
@property (nonatomic) double croppingQuadTopRightY;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) long long docCamPDFVersion;
@property (nonatomic) double duration;
@property (nonatomic, retain) NSData *fallbackImageCryptoInitializationVector;
@property (nonatomic, retain) NSData *fallbackImageCryptoTag;
@property (nonatomic, retain) NSString *fallbackSubtitleIOS;
@property (nonatomic, retain) NSString *fallbackSubtitleMac;
@property (nonatomic, retain) NSString *fallbackTitle;
@property (nonatomic) long long fileSize;
@property (nonatomic, retain) NSString *handwritingSummary;
@property (nonatomic) short handwritingSummaryVersion;
@property (nonatomic, readonly) bool hasCroppingQuad;
@property (nonatomic) bool hasMarkupData;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) UIImage *image;
@property (nonatomic, retain) NSString *imageClassificationSummary;
@property (nonatomic) short imageClassificationSummaryVersion;
@property (nonatomic) short imageFilterType;
@property (nonatomic, readonly) bool isReadOnly;
@property (nonatomic, readonly) bool isUnsupportedOnCurrentPlatform;
@property (nonatomic, retain) ICAttachmentLocation *location;
@property (nonatomic, retain) NSData *markupModelData;
@property (nonatomic, retain) ICMedia *media;
@property (nonatomic, retain) NSData *mergeableData;
@property (nonatomic, retain) NSDictionary *metadata;
@property (nonatomic, retain) NSData *metadataData;
@property (nonatomic) long long minimumSupportedNotesVersion;
@property (nonatomic, retain) NSDate *modificationDate;
@property (nonatomic, readonly) NSString *modificationDateForSpeaking;
@property (nonatomic, retain) AVAsset *movie;
@property (nonatomic, readonly) NSString *movieDurationForSpeaking;
@property (nonatomic, retain) ICNote *note;
@property (nonatomic, retain) ICNote *noteUsingTitleForNoteTitle;
@property (nonatomic, retain) NSString *ocrSummary;
@property (nonatomic) short ocrSummaryVersion;
@property (nonatomic) short orientation;
@property (nonatomic) double originX;
@property (nonatomic) double originY;
@property (nonatomic, retain) ICAttachment *parentAttachment;
@property (nonatomic, readonly) ICNotePasteboardData *pasteboardData;
@property (nonatomic, retain) NSSet *previewImages;
@property (nonatomic, retain) NSDate *previewUpdateDate;
@property (nonatomic, retain) NSURL *remoteFileURL;
@property (nonatomic, retain) NSString *remoteFileURLString;
@property (nonatomic, readonly) ICAttachment *rootParentAttachment;
@property (nonatomic) short section;
@property (getter=isSettingMergeableData, nonatomic) bool settingMergeableData;
@property (nonatomic) double sizeHeight;
@property (nonatomic) double sizeWidth;
@property (nonatomic, retain) NSSet *subAttachments;
@property (nonatomic, retain) NSString *summary;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSString *title;
@property (nonatomic, retain) NSString *typeUTI;
@property (nonatomic, readonly) UIImage *unprocessedDocumentImage;
@property (nonatomic, retain) NSString *urlString;
@property (nonatomic, retain) NSString *userTitle;

// Image: /System/Library/PrivateFrameworks/NotesShared.framework/NotesShared

+ (void)addPreviewImages:(id)arg1 toRecord:(id)arg2;
+ (id)allAttachmentsInContext:(id)arg1;
+ (id)attachmentIdentifiersForAccount:(id)arg1;
+ (id)attachmentSectionSortOrder;
+ (id)attachmentTypeUTIsToHideFromAttachmentBrowser;
+ (id)attachmentWithIdentifier:(id)arg1 context:(id)arg2;
+ (id)attachmentWithIdentifier:(id)arg1 includeDeleted:(bool)arg2 context:(id)arg3;
+ (id)attachmentsMatchingPredicate:(id)arg1 context:(id)arg2;
+ (unsigned long long)countOfAttachmentsMatchingPredicate:(id)arg1 context:(id)arg2;
+ (id)defaultTitleForAttachmentType:(short)arg1;
+ (void)deleteAttachment:(id)arg1;
+ (void)ensureFallbackImageDirectoryExistsForAccount:(id)arg1;
+ (id)existingCloudObjectForRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;
+ (id)fallbackImageDirectoryURL;
+ (id)fallbackImageEncryptedURLForIdentifier:(id)arg1 account:(id)arg2;
+ (id)fallbackImageURLForIdentifier:(id)arg1 account:(id)arg2;
+ (id)filenameExtensionForUTI:(id)arg1;
+ (id)filenameFromUTI:(id)arg1;
+ (void)initialize;
+ (id)internalImageCache;
+ (id)isBeingEditedLocallyOnDeviceSet;
+ (bool)isPathExtensionSupportedForPasswordProtectedNotes:(id)arg1;
+ (bool)isTypeUTISupportedForPasswordProtectedNotes:(id)arg1;
+ (id)keyPathsForValuesAffectingIsSharedViaICloud;
+ (id)keyPathsForValuesAffectingParentCloudObject;
+ (id)mimeTypeFromUTI:(id)arg1;
+ (id)newAttachmentWithIdentifier:(id)arg1 note:(id)arg2;
+ (id)newCloudObjectForRecord:(id)arg1 accountID:(id)arg2 context:(id)arg3;
+ (id)newFetchRequestForAttachments;
+ (id)notDeletedPredicate;
+ (id)noteFromAttachmentRecord:(id)arg1 accountID:(id)arg2 context:(id)arg3;
+ (id)predicateForAttachmentBrowser;
+ (id)predicateForInlineDrawing;
+ (id)predicateForPasswordProtected:(bool)arg1;
+ (id)predicateForSearchableAttachments;
+ (id)predicateForVisibleAttachments;
+ (id)predicateForVisibleAttachmentsIncludingTrash;
+ (id)predicateForVisibleAttachmentsIncludingTrash:(bool)arg1;
+ (id)predicateForVisibleObjects;
+ (void)purgeAllAttachmentsInContext:(id)arg1;
+ (void)purgeAttachment:(id)arg1;
+ (void)purgeAttachmentFilesForIdentifiers:(id)arg1 account:(id)arg2;
+ (short)sectionFromTypeUTI:(id)arg1 url:(id)arg2;
+ (bool)typeUTIIsDrawing:(id)arg1;
+ (bool)typeUTIIsImage:(id)arg1;
+ (bool)typeUTIIsInlineDrawing:(id)arg1;
+ (bool)typeUTIIsPlayableAudio:(id)arg1;
+ (bool)typeUTIIsPlayableMovie:(id)arg1;
+ (void)undeleteAttachment:(id)arg1;
+ (id)visibleAttachmentsInContext:(id)arg1;

- (void).cxx_destruct;
- (id)URL;
- (void)accountWillChangeToAccount:(id)arg1;
- (void)addLocationIfNeeded;
- (id)addLocationWithLatitude:(double)arg1 longitude:(double)arg2;
- (id)addMediaWithData:(id)arg1 filename:(id)arg2;
- (id)addMediaWithData:(id)arg1 filename:(id)arg2 updateFileBasedAttributes:(bool)arg3;
- (id)addMediaWithFileWrapper:(id)arg1;
- (id)addMediaWithURL:(id)arg1;
- (id)addMediaWithURL:(id)arg1 updateFileBasedAttributes:(bool)arg2;
- (id)additionalIndexableText;
- (unsigned long long)approximateArchiveSizeIncludingPreviews:(bool)arg1;
- (void)attachmentDidChange;
- (id)attachmentModel;
- (id)attachmentPreviewImageCreatingIfNecessaryWithWidth:(double)arg1 height:(double)arg2 scale:(double)arg3 appearanceType:(unsigned long long)arg4 scaleWhenDrawing:(bool)arg5 metadata:(id)arg6;
- (id)attachmentPreviewImageWithMinSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2;
- (id)attachmentPreviewImageWithMinSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 appearanceType:(unsigned long long)arg3;
- (id)attachmentPreviewImageWithMinSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 appearanceType:(unsigned long long)arg3 matchScale:(bool)arg4 matchAppearance:(bool)arg5;
- (id)attachmentPreviewImageWithMinSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 appearanceType:(unsigned long long)arg3 requireAppearance:(bool)arg4;
- (short)attachmentType;
- (id)authorsExcludingCurrentUser;
- (void)awakeFromFetch;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (bool)checkPreviewImagesIntegrity;
- (id)childCloudObjects;
- (id)childCloudObjectsForMinimumSupportedVersionPropagation;
- (void)clearCachedImages;
- (id)contentIdentifier;
- (id)dataForTypeIdentifier:(id)arg1;
- (void)dealloc;
- (id)defaultTitle;
- (void)deleteAttachmentPreviewImages;
- (void)deleteFromLocalDatabase;
- (id)description;
- (void)didRefresh:(bool)arg1;
- (void)didTurnIntoFault;
- (id)drawingModel;
- (id)fallbackImageData;
- (id)fallbackImageEncryptedURL;
- (id)fallbackImageURL;
- (id)fallbackImageUTI;
- (id)fallbackSubtitleIOS;
- (id)fallbackSubtitleMac;
- (id)fallbackTitle;
- (id)fileSizeString;
- (id)fileURLForTypeIdentifier:(id)arg1;
- (void)fixBrokenReferences;
- (void)fixMarkedForDeletionForScannedDocuments;
- (id)galleryModel;
- (id)handwritingSummary;
- (bool)hasAllMandatoryFields;
- (bool)hasAnyPNGPreviewImageFiles;
- (bool)hasCroppingQuad;
- (bool)hasFallbackImage;
- (bool)hasMetadata;
- (id)ic_loggingValues;
- (id)imageCacheKey;
- (id)imageClassificationSummary;
- (id)inlineDrawingModel;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (long long)intrinsicNotesVersion;
- (void)invalidateAttachmentPreviewImages;
- (bool)isAppStore;
- (bool)isBeingEditedLocallyOnDevice;
- (bool)isChildOfDocumentGallery;
- (bool)isDrawing;
- (bool)isEncryptableKeyBinaryData:(id)arg1;
- (bool)isFolder;
- (bool)isHiddenFromSearch;
- (bool)isInICloudAccount;
- (bool)isInNoteTitleOrSnippet;
- (bool)isLoadingFromCloud;
- (bool)isMap;
- (bool)isMovable;
- (bool)isNews;
- (bool)isReadOnly;
- (bool)isSettingMergeableData;
- (bool)isTable;
- (bool)isURL;
- (bool)isUnsupported;
- (bool)isVisible;
- (bool)isiTunes;
- (void)loadFromArchive:(const struct Attachment { int (**x1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; unsigned int x3[2]; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x5; float x6; float x7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x8; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x9; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x10; }*)arg1 dataPersister:(id)arg2 withIdentifierMap:(id)arg3;
- (void)loadPreviewArchive:(const struct PreviewImage { int (**x1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; unsigned int x3[1]; int x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x5; float x6; bool x7; bool x8; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x9; int x10; int x11; long long x12; }*)arg1 previewDataIdentifier:(id)arg2 dataPersister:(id)arg3;
- (bool)locationNeedsUpdate;
- (void)markForDeletion;
- (id)markupModelData;
- (void)mergeDataFromRecord:(id)arg1 accountID:(id)arg2;
- (void)mergeDataFromRecord:(id)arg1 accountID:(id)arg2 newAttachment:(bool)arg3;
- (id)mergeDecryptedValue:(id)arg1 withOldValue:(id)arg2 forKey:(id)arg3;
- (id)mergeableData;
- (id)metadata;
- (id)movie;
- (bool)needsToBePushedToCloud;
- (bool)needsToBeRequested;
- (id)newlyCreatedRecord;
- (id)newlyCreatedRecordWithObfuscator:(id)arg1;
- (void)objectWasFetchedFromCloudWithRecord:(id)arg1 accountID:(id)arg2;
- (id)objectsToBeDeletedBeforeThisObject;
- (id)ocrSummary;
- (id)parentAttachmentFromRecord:(id)arg1 accountID:(id)arg2 context:(id)arg3;
- (id)parentCloudObject;
- (id)parentCloudObjectForMinimumSupportedVersionPropagation;
- (id)parentEncryptableObject;
- (bool)preferLocalPreviewImages;
- (void)prepareForDeletion;
- (id)previewImageCacheKey;
- (id)previewItemTitle;
- (id)previewItemURL;
- (bool)previewsSupportMultipleAppearances;
- (void)purgeAttachmentPreviewImages;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeInNote;
- (id)recordType;
- (id)recordZoneName;
- (void)recursivelyAddSubAttachments:(id)arg1;
- (void)regenerateTitle;
- (id)remoteFileURL;
- (void)resetUniqueIdentifier;
- (id)rootParentAttachment;
- (void)saveAndClearDecryptedData;
- (void)saveMergeableDataIfNeeded;
- (void)savePreview:(id)arg1 toArchive:(struct PreviewImage { int (**x1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; unsigned int x3[1]; int x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x5; float x6; bool x7; bool x8; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x9; int x10; int x11; long long x12; }*)arg2 previewDataIdentifier:(id)arg3 dataPersister:(id)arg4;
- (void)saveToArchive:(struct Attachment { int (**x1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; unsigned int x3[2]; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x5; float x6; float x7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x8; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x9; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x10; }*)arg1 dataPersister:(id)arg2 stripImageMarkupMetadata:(bool)arg3;
- (id)searchDomainIdentifier;
- (id)searchIndexingIdentifier;
- (bool)searchResultCanBeDeletedFromNoteContext;
- (unsigned long long)searchResultType;
- (unsigned long long)searchResultsSection;
- (id)searchableItemAttributeSet;
- (id)searchableTextContent;
- (id)searchableTextContentWithoutTitle;
- (void)setAdditionalIndexableText:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFallbackSubtitleIOS:(id)arg1;
- (void)setFallbackSubtitleMac:(id)arg1;
- (void)setFallbackTitle:(id)arg1;
- (void)setHandwritingSummary:(id)arg1;
- (void)setImageClassificationSummary:(id)arg1;
- (void)setImageFilterType:(short)arg1;
- (void)setIsBeingEditedLocallyOnDevice:(bool)arg1;
- (void)setMarkupModelData:(id)arg1;
- (void)setMergeableData:(id)arg1;
- (void)setMetadata:(id)arg1;
- (void)setMovie:(id)arg1;
- (void)setNote:(id)arg1;
- (void)setOcrSummary:(id)arg1;
- (void)setOrientation:(short)arg1;
- (void)setParentAttachment:(id)arg1;
- (void)setRemoteFileURL:(id)arg1;
- (void)setSettingMergeableData:(bool)arg1;
- (void)setSummary:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTypeUTI:(id)arg1;
- (void)setURL:(id)arg1;
- (void)setUrlString:(id)arg1;
- (void)setUserTitle:(id)arg1;
- (bool)shouldEmbedMarkupDataInMedia;
- (bool)shouldSyncMinimumSupportedNotesVersion;
- (id)summary;
- (bool)supportsDeletionByTTL;
- (bool)supportsQuickLook;
- (bool)supportsRenaming;
- (bool)supportsSavingAttachmentToExternalFile;
- (id)tableModel;
- (id)title;
- (void)undeleteAttachmentPreviewImages;
- (void)unmarkForDeletion;
- (id)unsupportedAttachmentSubtitle;
- (id)unsupportedAttachmentTitle;
- (void)updateAfterMediaChange;
- (id)updateAttachmentPreviewImageWithImageData:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3 appearanceType:(unsigned long long)arg4 scaleWhenDrawing:(bool)arg5 metadata:(id)arg6 sendNotification:(bool)arg7;
- (id)updateAttachmentPreviewImageWithImageSrc:(struct CGImageSource { }*)arg1 maxDimension:(double)arg2 scale:(double)arg3 appearanceType:(unsigned long long)arg4 scaleWhenDrawing:(bool)arg5 metadata:(id)arg6 sendNotification:(bool)arg7;
- (void)updateAttachmentSectionWithTypeUTI:(id)arg1;
- (void)updateCombinedSummary;
- (void)updateMarkedForDeletionStateAttachmentIsInNote:(bool)arg1;
- (void)updateParentReferenceIfNecessary;
- (void)updatePlaceInLocationIfNeededHandler:(id /* block */)arg1;
- (void)updatePreviewsFromRecord:(id)arg1;
- (id)urlString;
- (id)userActivityContentAttributeSet;
- (id)userTitle;
- (long long)visibilityTestingType;
- (void)willRefresh:(bool)arg1;
- (void)willSave;
- (void)willTurnIntoFault;
- (void)writeFallbackImageData:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NotesUI.framework/NotesUI

+ (id)imageCache;
+ (id)imageLoadingOperationQueue;
+ (id)thumbnailOperationQueue;

- (id)activityItems;
- (id)attributedString;
- (id)cachedImage;
- (id)croppingQuad;
- (id)dataForTypeIdentifier:(id)arg1;
- (id)deviceInfosWithoutPreviewImagesFromDeviceInfos:(id)arg1;
- (long long)docCamPDFVersion;
- (bool)fetchThumbnailImageWithMinSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 appearanceInfo:(id)arg3 cache:(id)arg4 cacheKey:(id)arg5 processingBlock:(id /* block */)arg6 completionBlock:(id /* block */)arg7 fallbackBlock:(id /* block */)arg8 aboutToLoadHandler:(id /* block */)arg9;
- (id)fileURLForTypeIdentifier:(id)arg1;
- (id)image;
- (bool)isUnsupportedOnCurrentPlatform;
- (id /* block */)loadImage:(id /* block */)arg1;
- (id /* block */)loadImage:(id /* block */)arg1 aboutToLoadHandler:(id /* block */)arg2 forceFullSizeImage:(bool)arg3;
- (id)modificationDateForSpeaking;
- (id)movieDurationForSpeaking;
- (void)notifyDocCamFrameworkAttachmentWasDeleted;
- (id)pasteboardData;
- (void)setCachedImage:(id)arg1;
- (void)setCroppingQuad:(id)arg1;
- (bool)thumbnailImage:(id*)arg1 minSize:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3 appearanceType:(unsigned long long)arg4 requireAppearance:(bool)arg5 imageScaling:(unsigned long long*)arg6 showAsFileIcon:(bool*)arg7 isMovie:(bool*)arg8 movieDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg9;
- (bool)thumbnailImage:(id*)arg1 minSize:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3 imageScaling:(unsigned long long*)arg4 showAsFileIcon:(bool*)arg5 isMovie:(bool*)arg6 movieDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg7;
- (id)unprocessedDocumentImage;
- (id)updateAttachmentPreviewImageWithImage:(id)arg1 scale:(double)arg2 appearanceType:(unsigned long long)arg3 scaleWhenDrawing:(bool)arg4 metadata:(id)arg5 sendNotification:(bool)arg6;
- (id)updateAttachmentPreviewImageWithImage:(id)arg1 scale:(double)arg2 scaleWhenDrawing:(bool)arg3 metadata:(id)arg4 sendNotification:(bool)arg5;

@end
