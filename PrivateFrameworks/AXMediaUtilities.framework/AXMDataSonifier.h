/* Generated by EzioChiu
   Image: /System/Library/PrivateFrameworks/AXMediaUtilities.framework/AXMediaUtilities
 */

@interface AXMDataSonifier : NSObject {
    AXMADSREnvelope * _ampEnvelope;
    struct OpaqueAudioComponentInstance { } * _audioUnit;
    AXMLiveContinuousTone * _continuousScrubbingTone;
    int  _dataMode;
    id /* block */  _function;
    int  _interpolationMode;
    bool  _isEndingScrubbing;
    bool  _isInLiveContinuousToneSession;
    AXMAudioDataSource * _liveContinuousAudioDataSource;
    AXMLiveContinuousTone * _liveContinuousDataTone;
    AXMAudioDataSourceMixer * _liveContinuousMixerDataSource;
    struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; } * _liveTonePlaybackCallbackRenderingContext;
    double  _maximumPlaybackFrequency;
    double  _minimumPlaybackFrequency;
    bool  _paused;
    AXMAudioDataSource * _playbackChartDataAudioDataSource;
    double  _playbackDuration;
    AXMAudioDataSourceMixer * _playbackMixerDataSource;
    NSTimer * _playbackObserverUpdateTimer;
    NSPointerArray * _playbackObservers;
    unsigned long long  _playbackSampleCount;
    AXMAudioDataSource * _playbackTrendlineAudioDataSource;
    bool  _playing;
    bool  _scrubbing;
    AXMAudioDataSource * _scrubbingContinuousAudioDataSource;
    AXMAudioDataSource * _scrubbingDiscreteAudioDataSource;
    struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; } * _scrubbingDiscreteDataRenderingContext;
    AXMAudioDataSourceMixer * _scrubbingMixerDataSource;
    struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; } * _scrubbingPlaybackCallbackRenderingContext;
    AXMAudioDataSource * _scrubbingTrendlineAudioDataSource;
    unsigned long long  _toneWaveform;
    id /* block */  _trendlineFunction;
    AXMLiveContinuousTone * _trendlineScrubbingTone;
    bool  _usesBinauralPanning;
    struct { 
        double *values; 
        double scaleMinimum; 
        double scaleMaximum; 
        double valueMinimum; 
        double valueMaximum; 
        double count; 
    }  _xData;
    struct { 
        double *values; 
        double scaleMinimum; 
        double scaleMaximum; 
        double valueMinimum; 
        double valueMaximum; 
        double count; 
    }  _yData;
}

@property (nonatomic, retain) AXMADSREnvelope *ampEnvelope;
@property (nonatomic, readonly) AXMLiveContinuousTone *continuousScrubbingTone;
@property (nonatomic, readonly) double currentPlaybackPosition;
@property (nonatomic, readonly) int dataMode;
@property (nonatomic, readonly) id /* block */ function;
@property (nonatomic, readonly) int interpolationMode;
@property (nonatomic, readonly) bool isEndingScrubbing;
@property (nonatomic, readonly) bool isInLiveContinuousToneSession;
@property (nonatomic, readonly) bool isPaused;
@property (nonatomic, readonly) bool isPlaying;
@property (nonatomic, readonly) bool isScrubbing;
@property (nonatomic, retain) AXMAudioDataSource *liveContinuousAudioDataSource;
@property (nonatomic, readonly) AXMLiveContinuousTone *liveContinuousDataTone;
@property (nonatomic, retain) AXMAudioDataSourceMixer *liveContinuousMixerDataSource;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<int' */ struct *liveTonePlaybackCallbackRenderingContext; /* unknown property attribute:  std::__1::allocator<int> >=^i}} */
@property (nonatomic) double maximumPlaybackFrequency;
@property (nonatomic) double minimumPlaybackFrequency;
@property (nonatomic, retain) AXMAudioDataSource *playbackChartDataAudioDataSource;
@property (nonatomic) double playbackDuration;
@property (nonatomic, retain) AXMAudioDataSourceMixer *playbackMixerDataSource;
@property (nonatomic, retain) NSTimer *playbackObserverUpdateTimer;
@property (nonatomic, retain) NSPointerArray *playbackObservers;
@property (nonatomic, readonly) unsigned long long playbackSampleCount;
@property (nonatomic, retain) AXMAudioDataSource *playbackTrendlineAudioDataSource;
@property (nonatomic, retain) AXMAudioDataSource *scrubbingContinuousAudioDataSource;
@property (nonatomic, retain) AXMAudioDataSource *scrubbingDiscreteAudioDataSource;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<int' */ struct *scrubbingDiscreteDataRenderingContext; /* unknown property attribute:  std::__1::allocator<int> >=^i}} */
@property (nonatomic, retain) AXMAudioDataSourceMixer *scrubbingMixerDataSource;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<int' */ struct *scrubbingPlaybackCallbackRenderingContext; /* unknown property attribute:  std::__1::allocator<int> >=^i}} */
@property (nonatomic, retain) AXMAudioDataSource *scrubbingTrendlineAudioDataSource;
@property (nonatomic) unsigned long long toneWaveform;
@property (nonatomic, copy) id /* block */ trendlineFunction;
@property (nonatomic, readonly) AXMLiveContinuousTone *trendlineScrubbingTone;
@property (nonatomic) bool usesBinauralPanning;

+ (id)sharedInstance;

- (void).cxx_destruct;
- (void)_initializeAXMAudioDataSources;
- (bool)_initializeAudioComponent;
- (bool)_initializeAudioUnit;
- (void)_initializeLiveToneDataSource;
- (id)_newContinuousToneEnvelope;
- (void)_peakNormalizeBuffer:(struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)arg1 length:(unsigned long long)arg2 level:(double)arg3;
- (void)_renderContinuousAudio;
- (void)_renderDiscreteAudio;
- (void)_renderUnivariateFunctionAudio;
- (bool)_setAudioFormat;
- (bool)_setOutputCallback;
- (bool)_uninitializeAudioUnit;
- (void)addPlaybackObserver:(id)arg1;
- (id)ampEnvelope;
- (void)beginLiveContinuousToneSession;
- (void)beginScrubbing;
- (id)continuousScrubbingTone;
- (double)currentPlaybackPosition;
- (int)dataMode;
- (void)dealloc;
- (void)endLiveContinuousToneSession;
- (void)endScrubbing;
- (double)frequencyForYAxisValue:(double)arg1;
- (id /* block */)function;
- (bool)hasContinuousDataForXPosition:(double)arg1;
- (id)init;
- (double)interpolatedYAxisValueForNormalizedPosition:(double)arg1;
- (int)interpolationMode;
- (bool)isEndingScrubbing;
- (bool)isInLiveContinuousToneSession;
- (bool)isPaused;
- (bool)isPlaying;
- (bool)isScrubbing;
- (id)liveContinuousAudioDataSource;
- (id)liveContinuousDataTone;
- (id)liveContinuousMixerDataSource;
- (struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)liveTonePlaybackCallbackRenderingContext;
- (void)loadDataAndRenderAudioForXAxis:(double*)arg1 yAxis:(double*)arg2 numValues:(unsigned long long)arg3 axisMinimumX:(double)arg4 axisMaximumX:(double)arg5 axisMinimumY:(double)arg6 axisMaximumY:(double)arg7 interpolationMode:(int)arg8 trendline:(id /* block */)arg9;
- (double)maximumPlaybackFrequency;
- (double)minimumPlaybackFrequency;
- (double)normalizedXAxisValueForValue:(double)arg1;
- (double)normalizedYAxisValueForValue:(double)arg1;
- (void)pause;
- (void)play;
- (id)playbackChartDataAudioDataSource;
- (double)playbackDuration;
- (id)playbackMixerDataSource;
- (id)playbackObserverUpdateTimer;
- (id)playbackObservers;
- (unsigned long long)playbackSampleCount;
- (id)playbackTrendlineAudioDataSource;
- (void)removePlaybackObserver:(id)arg1;
- (unsigned long long)sampleIndexForTimeOffset:(double)arg1;
- (unsigned long long)sampleIndexForXAxisValue:(double)arg1;
- (void)scrubToPlaybackFrame:(unsigned long long)arg1;
- (id)scrubbingContinuousAudioDataSource;
- (id)scrubbingDiscreteAudioDataSource;
- (struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)scrubbingDiscreteDataRenderingContext;
- (id)scrubbingMixerDataSource;
- (struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)scrubbingPlaybackCallbackRenderingContext;
- (id)scrubbingTrendlineAudioDataSource;
- (void)setAmpEnvelope:(id)arg1;
- (void)setLiveContinuousAudioDataSource:(id)arg1;
- (void)setLiveContinuousMixerDataSource:(id)arg1;
- (void)setLiveContinuousToneNormalizedFrequency:(double)arg1;
- (void)setMaximumPlaybackFrequency:(double)arg1;
- (void)setMinimumPlaybackFrequency:(double)arg1;
- (void)setPlaybackChartDataAudioDataSource:(id)arg1;
- (void)setPlaybackDuration:(double)arg1;
- (void)setPlaybackMixerDataSource:(id)arg1;
- (void)setPlaybackObserverUpdateTimer:(id)arg1;
- (void)setPlaybackObservers:(id)arg1;
- (void)setPlaybackPosition:(double)arg1;
- (void)setPlaybackTrendlineAudioDataSource:(id)arg1;
- (void)setScrubbingContinuousAudioDataSource:(id)arg1;
- (void)setScrubbingDiscreteAudioDataSource:(id)arg1;
- (void)setScrubbingMixerDataSource:(id)arg1;
- (void)setScrubbingTrendlineAudioDataSource:(id)arg1;
- (void)setToneWaveform:(unsigned long long)arg1;
- (void)setTrendlineFunction:(id /* block */)arg1;
- (void)setUsesBinauralPanning:(bool)arg1;
- (void)stopPlaying;
- (void)stopScrubbing;
- (double)timeOffsetForXAxisValue:(double)arg1;
- (unsigned long long)toneWaveform;
- (id /* block */)trendlineFunction;
- (id)trendlineScrubbingTone;
- (bool)usesBinauralPanning;
- (double)xAxisValueForPosition:(double)arg1;

@end
