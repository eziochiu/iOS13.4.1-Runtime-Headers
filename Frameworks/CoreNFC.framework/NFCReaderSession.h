/* Generated by EzioChiu
   Image: /System/Library/Frameworks/CoreNFC.framework/CoreNFC
 */

@interface NFCReaderSession : NSObject <NFCHardwareManagerCallbacks, NFCReaderSession, NFCSessionCallbacks, NFReaderSessionCallbacks> {
    NSString * _alertMessage;
    <NFTag> * _connectedTag;
    NFWeakReference * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    long long  _delegateType;
    bool  _invalidated;
    long long  _invalidationCode;
    unsigned long long  _pollMethod;
    NSObject<NFReaderSessionInterface><NSXPCProxyCreating> * _proxy;
    unsigned long long  _sessionConfig;
    NSNumber * _sessionId;
    NSObject<OS_dispatch_queue> * _sessionQueue;
    NSObject<OS_dispatch_group> * _sessionStartInProgress;
    bool  _started;
}

@property (nonatomic, copy) NSString *alertMessage;
@property (nonatomic, readonly) <NFTag> *connectedTag;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) id delegate;
@property (nonatomic, readonly) long long delegateType;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=isInvalidated, nonatomic, readonly) bool invalidated;
@property (nonatomic) unsigned long long pollMethod;
@property (nonatomic, readonly, retain) NSObject<NFReaderSessionInterface><NSXPCProxyCreating> *readerProxy;
@property (getter=isReady, nonatomic, readonly) bool ready;
@property (nonatomic) unsigned long long sessionConfig;
@property (nonatomic, readonly) NSNumber *sessionId;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *sessionQueue;
@property (readonly) Class superclass;

+ (bool)featureAvailable:(unsigned long long)arg1;
+ (bool)readingAvailable;

- (void)_callbackDidBecomeActive;
- (void)_callbackDidInvalidateWithError:(id)arg1;
- (bool)_connectTag:(id)arg1 error:(id*)arg2;
- (id)_convertMessageToInternal:(id)arg1;
- (void)_invalidateSessionWithCode:(long long)arg1 callbackOnQueue:(bool)arg2;
- (void)_invalidateSessionWithCode:(long long)arg1 message:(id)arg2 finalUIState:(long long)arg3 callbackOnQueue:(bool)arg4;
- (void)_restartPollingWithCompletionHandler:(id /* block */)arg1;
- (void)_startPollingWithMethod:(unsigned long long)arg1 sessionConfig:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (void)_stopPollingWithCompletionHandler:(id /* block */)arg1;
- (id)alertMessage;
- (void)beginSession;
- (void)beginSessionWithConfig:(id)arg1;
- (bool)checkPresenceWithError:(id*)arg1;
- (void)connectTag:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)connectTag:(id)arg1 error:(id*)arg2;
- (id)connectedTag;
- (void)dealloc;
- (id)delegate;
- (long long)delegateType;
- (void)didDetectExternalReaderWithNotification:(id)arg1;
- (void)didDetectTags:(id)arg1;
- (void)didInvalidate;
- (void)didStartSession:(id)arg1;
- (void)didTerminate:(id)arg1;
- (bool)disconnectTagWithError:(id*)arg1;
- (void)hardwareFailedToLoad;
- (id)initWithDelegate:(id)arg1 queue:(id)arg2 pollMethod:(unsigned long long)arg3;
- (id)initWithDelegate:(id)arg1 sessionDelegateType:(long long)arg2 queue:(id)arg3 pollMethod:(unsigned long long)arg4 sessionConfig:(unsigned long long)arg5;
- (void)invalidateSession;
- (void)invalidateSessionWithErrorMessage:(id)arg1;
- (void)invalidateSessionWithReason:(long long)arg1;
- (bool)isInvalidated;
- (bool)isReady;
- (id)ndefStatus:(long long*)arg1 maxMessageLength:(unsigned long long*)arg2;
- (unsigned long long)pollMethod;
- (id)readNdefMessageWithError:(id*)arg1;
- (id)readerProxy;
- (void)restartPolling;
- (unsigned long long)sessionConfig;
- (id)sessionId;
- (id)sessionQueue;
- (void)setAlertMessage:(id)arg1;
- (void)setPollMethod:(unsigned long long)arg1;
- (void)setSessionConfig:(unsigned long long)arg1;
- (void)submitBlockOnDelegateQueue:(id /* block */)arg1;
- (void)submitBlockOnSessionQueue:(id /* block */)arg1;
- (id)transceive:(id)arg1 tagUpdate:(id*)arg2 error:(id*)arg3;
- (bool)validateDelegate:(id)arg1 expectedType:(long long)arg2;
- (id)writeLockNdef;
- (bool)writeNdefMessage:(id)arg1 error:(id*)arg2;

@end
