/* Generated by EzioChiu
   Image: /System/Library/Frameworks/Metal.framework/Metal
 */

@interface _MTLDevice : NSObject {
    bool  _collectAllLibraries;
    int  _commandQueueCount;
    MTLCompiler * _compiler;
    NSObject<OS_dispatch_queue> * _concurrentQueue;
    unsigned long long  _currentUtilityBufferIndex;
    MTLDeviceFeatureQueries * _featureQueries;
    unsigned long long  _globalTraceObjectID;
    bool  _gpuAssertionsEnabled;
    bool  _hasInitSerializationPaths;
    NSString * _librariesOutputDirectory;
    struct MTLLibraryBuilder { id x1; struct map<MTLLibraryIdentifier, MTLLibraryContainer *, std::__1::less<MTLLibraryIdentifier>, std::__1::allocator<std::__1::pair<const MTLLibraryIdentifier, MTLLibraryContainer *> > > { struct __tree<std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, std::__1::__map_value_compare<MTLLibraryIdentifier, std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, std::__1::less<MTLLibraryIdentifier>, true>, std::__1::allocator<std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<MTLLibraryIdentifier, std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, std::__1::less<MTLLibraryIdentifier>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; } * _libraryBuilder;
    struct { 
        unsigned int maxColorAttachments; 
        unsigned int maxVertexAttributes; 
        unsigned int maxVertexBuffers; 
        unsigned int maxVertexTextures; 
        unsigned int maxVertexSamplers; 
        unsigned int maxVertexInlineDataSize; 
        unsigned int maxInterpolants; 
        unsigned int maxFragmentBuffers; 
        unsigned int maxFragmentTextures; 
        unsigned int maxFragmentSamplers; 
        unsigned int maxFragmentInlineDataSize; 
        unsigned int maxComputeBuffers; 
        unsigned int maxComputeTextures; 
        unsigned int maxComputeSamplers; 
        unsigned int maxComputeInlineDataSize; 
        unsigned int maxComputeLocalMemorySizes; 
        unsigned int maxTotalComputeThreadsPerThreadgroup; 
        unsigned int maxComputeThreadgroupMemory; 
        float maxLineWidth; 
        float maxPointSize; 
        unsigned int maxVisibilityQueryOffset; 
        unsigned int padmaxBufferLength; 
        unsigned int minConstantBufferAlignmentBytes; 
        unsigned int minBufferNoCopyAlignmentBytes; 
        unsigned int maxTextureWidth1D; 
        unsigned int maxTextureWidth2D; 
        unsigned int maxTextureHeight2D; 
        unsigned int maxTextureWidth3D; 
        unsigned int maxTextureHeight3D; 
        unsigned int maxTextureDepth3D; 
        unsigned int maxTextureDimensionCube; 
        unsigned int maxTextureLayers; 
        unsigned int linearTextureAlignmentBytes; 
        unsigned int iosurfaceTextureAlignmentBytes; 
        unsigned int iosurfaceReadOnlyTextureAlignmentBytes; 
        unsigned int deviceLinearTextureAlignmentBytes; 
        unsigned int deviceLinearReadOnlyTextureAlignmentBytes; 
        unsigned int maxFunctionConstantIndices; 
        unsigned int maxComputeThreadgroupMemoryAlignmentBytes; 
        unsigned int maxInterpolatedComponents; 
        unsigned int maxTessellationFactor; 
        unsigned int maxIndirectBuffers; 
        unsigned int maxIndirectTextures; 
        unsigned int maxIndirectSamplers; 
        unsigned int maxIndirectSamplersPerDevice; 
        unsigned int maxViewportCount; 
        unsigned int maxCustomSamplePositions; 
        unsigned int maxVertexAmplificationFactor; 
        unsigned int maxVertexAmplificationCount; 
        unsigned int maxTextureBufferWidth; 
        unsigned int maxComputeAttributes; 
        unsigned int maxFramebufferStorageBits; 
        unsigned int linearTextureArrayAlignmentBytes; 
        unsigned int linearTextureArrayAlignmentSlice; 
        unsigned int maxTileBuffers; 
        unsigned int maxTileTextures; 
        unsigned int maxTileSamplers; 
        unsigned int maxTileInlineDataSize; 
        unsigned int minTilePixels; 
        unsigned long long maxBufferLength; 
    }  _limits;
    struct MTLPipelineCollection { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; struct unordered_map<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *, std::__1::hash<MTLLibraryContainer *>, std::__1::equal_to<MTLLibraryContainer *>, std::__1::allocator<std::__1::pair<MTLLibraryContainer *const, MTLPipelineLibrarySerializer::LibraryDescriptor *> > > { struct __hash_table<std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::__unordered_map_hasher<MTLLibraryContainer *, std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::hash<MTLLibraryContainer *>, true>, std::__1::__unordered_map_equal<MTLLibraryContainer *, std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::equal_to<MTLLibraryContainer *>, true>, std::__1::allocator<std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLLibraryContainer *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; } * _pipelineCollection;
    NSString * _pipelineDescriptorsOutputFile;
    struct MTLPipelineLibraryBuilder { id x1; id x2; } * _pipelineLibraryBuilder;
    NSObject<OS_dispatch_queue> * _pipelineSerializationQueue;
    bool  _resourceIndirectionEnabled;
    NSObject<OS_dispatch_queue> * _serialQueue;
    void * _supportedGPUFamilies;
    bool  _utilityBufferRequired;
    NSArray * _utilityBuffers;
}

@property (readonly) unsigned int acceleratorPort;
@property (readonly) unsigned long long argumentBuffersSupport;
@property (readonly) MTLCompiler *compiler;
@property (readonly) NSObject<OS_dispatch_queue> *concurrentQueue;
@property unsigned long long currentUtilityBufferIndex;
@property (readonly) unsigned long long deviceLinearReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearTextureAlignmentBytes;
@property (readonly) unsigned long long globalTraceObjectID;
@property (getter=areGPUAssertionsEnabled, setter=setGPUAssertionsEnabled:) bool gpuAssertionsEnabled;
@property (readonly) struct IndirectArgumentBufferCapabilities { unsigned int x1 : 1; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 29; } indirectArgumentBufferCapabilities;
@property (readonly) unsigned long long iosurfaceReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceTextureAlignmentBytes;
@property (readonly) const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; float x19; float x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned int x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; unsigned int x47; unsigned int x48; unsigned int x49; unsigned int x50; unsigned int x51; unsigned int x52; unsigned int x53; unsigned int x54; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; unsigned int x59; }*limits;
@property (readonly) unsigned long long linearTextureAlignmentBytes;
@property (readonly) unsigned long long linearTextureArrayAlignmentBytes;
@property (readonly) unsigned long long linearTextureArrayAlignmentSlice;
@property (readonly) unsigned long long maxArgumentBufferSamplerCount;
@property (readonly) unsigned long long maxBufferLength;
@property (readonly) unsigned long long maxColorAttachments;
@property (readonly) unsigned long long maxComputeAttributes;
@property (readonly) unsigned long long maxComputeBuffers;
@property (readonly) unsigned long long maxComputeInlineDataSize;
@property (readonly) unsigned long long maxComputeLocalMemorySizes;
@property (readonly) unsigned long long maxComputeSamplers;
@property (readonly) unsigned long long maxComputeTextures;
@property (readonly) unsigned long long maxComputeThreadgroupMemory;
@property (readonly) unsigned long long maxComputeThreadgroupMemoryAlignmentBytes;
@property (readonly) unsigned long long maxCustomSamplePositions;
@property (readonly) unsigned long long maxFragmentBuffers;
@property (readonly) unsigned long long maxFragmentInlineDataSize;
@property (readonly) unsigned long long maxFragmentSamplers;
@property (readonly) unsigned long long maxFragmentTextures;
@property (readonly) unsigned long long maxFramebufferStorageBits;
@property (readonly) unsigned long long maxFunctionConstantIndices;
@property (readonly) unsigned long long maxIndirectBuffers;
@property (readonly) unsigned long long maxIndirectSamplers;
@property (readonly) unsigned long long maxIndirectSamplersPerDevice;
@property (readonly) unsigned long long maxIndirectTextures;
@property (readonly) unsigned long long maxInterpolants;
@property (readonly) unsigned long long maxInterpolatedComponents;
@property (readonly) float maxLineWidth;
@property (readonly) float maxPointSize;
@property (readonly) unsigned long long maxRasterizationRateLayerCount;
@property (readonly) unsigned long long maxTessellationFactor;
@property (readonly) unsigned long long maxTextureBufferWidth;
@property (readonly) unsigned long long maxTextureDepth3D;
@property (readonly) unsigned long long maxTextureDimensionCube;
@property (readonly) unsigned long long maxTextureHeight2D;
@property (readonly) unsigned long long maxTextureHeight3D;
@property (readonly) unsigned long long maxTextureLayers;
@property (readonly) unsigned long long maxTextureWidth1D;
@property (readonly) unsigned long long maxTextureWidth2D;
@property (readonly) unsigned long long maxTextureWidth3D;
@property (readonly) unsigned long long maxTileBuffers;
@property (readonly) unsigned long long maxTileInlineDataSize;
@property (readonly) unsigned long long maxTileSamplers;
@property (readonly) unsigned long long maxTileTextures;
@property (readonly) unsigned long long maxTotalComputeThreadsPerThreadgroup;
@property (readonly) unsigned long long maxVertexAmplificationCount;
@property (readonly) unsigned long long maxVertexAmplificationFactor;
@property (readonly) unsigned long long maxVertexAttributes;
@property (readonly) unsigned long long maxVertexBuffers;
@property (readonly) unsigned long long maxVertexInlineDataSize;
@property (readonly) unsigned long long maxVertexSamplers;
@property (readonly) unsigned long long maxVertexTextures;
@property (readonly) unsigned long long maxViewportCount;
@property (readonly) unsigned long long maxVisibilityQueryOffset;
@property (readonly) unsigned long long minBufferNoCopyAlignmentBytes;
@property (readonly) unsigned long long minConstantBufferAlignmentBytes;
@property (readonly) unsigned long long minTilePixels;
@property (readonly) NSString *name;
@property (getter=isPlacementHeapSupported, readonly) bool placementHeapSupported;
@property (getter=areRasterOrderGroupsSupported, readonly) bool rasterOrderGroupsSupported;
@property (readonly) unsigned long long readWriteTextureSupport;
@property (getter=isResourceIndirectionEnabled) bool resourceIndirectionEnabled;
@property (readonly) NSObject<OS_dispatch_queue> *serialQueue;
@property (readonly) unsigned long long sparseTexturesSupport;
@property (readonly) unsigned long long sparseTileSizeInBytes;
@property (nonatomic, readonly) bool supports2DLinearTexArraySPI;
@property (nonatomic, readonly) bool supports32bpcMSAATextures;
@property (nonatomic, readonly) bool supports3DASTCTextures;
@property (nonatomic, readonly) bool supports3DBCTextures;
@property (nonatomic, readonly) bool supportsASTCHDRTextureCompression;
@property (nonatomic, readonly) bool supportsASTCTextureCompression;
@property (nonatomic, readonly) bool supportsAlphaYUVFormats;
@property (nonatomic, readonly) bool supportsArgumentBuffersTier2;
@property (nonatomic, readonly) bool supportsArrayOfSamplers;
@property (nonatomic, readonly) bool supportsArrayOfTextures;
@property (nonatomic, readonly) bool supportsBCTextureCompression;
@property (nonatomic, readonly) bool supportsBaseVertexInstanceDrawing;
@property (nonatomic, readonly) bool supportsBlackOrWhiteSamplerBorderColors;
@property (nonatomic, readonly) bool supportsBufferWithIOSurface;
@property (nonatomic, readonly) bool supportsBufferlessClientStorageTexture;
@property (nonatomic, readonly) bool supportsCMPIndirectCommandBuffers;
@property (nonatomic, readonly) bool supportsCombinedMSAAStoreAndResolveAction;
@property (nonatomic, readonly) bool supportsConcurrentComputeDispatch;
@property (nonatomic, readonly) bool supportsCountingOcclusionQuery;
@property (nonatomic, readonly) bool supportsCustomBorderColor;
@property (nonatomic, readonly) bool supportsDepthClipMode;
@property (nonatomic, readonly) bool supportsDepthClipModeClampExtended;
@property (nonatomic, readonly) bool supportsExtendedXR10Formats;
@property (nonatomic, readonly) bool supportsExtendedYUVFormats;
@property (nonatomic, readonly) bool supportsFP32TessFactors;
@property (nonatomic, readonly) bool supportsFastMathInfNaNPropagation;
@property (nonatomic, readonly) bool supportsFloat16BCubicFiltering;
@property (nonatomic, readonly) bool supportsForceSeamsOnCubemaps;
@property (nonatomic, readonly) bool supportsFragmentBufferWrites;
@property (nonatomic, readonly) bool supportsFragmentOnlyEncoders;
@property (nonatomic, readonly) bool supportsGFXIndirectCommandBuffers;
@property (nonatomic, readonly) bool supportsGPUStatistics;
@property (nonatomic, readonly) bool supportsImageBlockSampleCoverageControl;
@property (nonatomic, readonly) bool supportsImageBlocks;
@property (nonatomic, readonly) bool supportsIndirectDrawAndDispatch;
@property (nonatomic, readonly) bool supportsIndirectStageInRegion;
@property (nonatomic, readonly) bool supportsIndirectTessellation;
@property (nonatomic, readonly) bool supportsIndirectTextures;
@property (nonatomic, readonly) bool supportsInvariantVertexPosition;
@property (nonatomic, readonly) bool supportsLargeFramebufferConfigs;
@property (nonatomic, readonly) bool supportsLayeredRendering;
@property (nonatomic, readonly) bool supportsLimitedYUVFormats;
@property (nonatomic, readonly) bool supportsLinearTexture2DArray;
@property (nonatomic, readonly) bool supportsLinearTextureFromSharedBuffer;
@property (nonatomic, readonly) bool supportsMSAADepthResolve;
@property (nonatomic, readonly) bool supportsMSAADepthResolveFilter;
@property (nonatomic, readonly) bool supportsMSAAStencilResolve;
@property (nonatomic, readonly) bool supportsMSAAStencilResolveFilter;
@property (nonatomic, readonly) bool supportsMemoryOrderAtomics;
@property (nonatomic, readonly) bool supportsMemorylessRenderTargets;
@property (nonatomic, readonly) bool supportsMipLevelsSmallerThanBlockSize;
@property (nonatomic, readonly) bool supportsMirrorClampToEdgeSamplerMode;
@property (nonatomic, readonly) bool supportsMutableTier1ArgumentBuffers;
@property (nonatomic, readonly) bool supportsNativeHardwareFP16;
@property (nonatomic, readonly) bool supportsNonPrivateDepthStencilTextures;
@property (nonatomic, readonly) bool supportsNonPrivateMSAATextures;
@property (nonatomic, readonly) bool supportsNonSquareTileShaders;
@property (nonatomic, readonly) bool supportsNonUniformThreadgroupSize;
@property (nonatomic, readonly) bool supportsNorm16BCubicFiltering;
@property (nonatomic, readonly) bool supportsOpenCLTextureWriteSwizzles;
@property (nonatomic, readonly) bool supportsPacked32TextureBufferWrites;
@property (nonatomic, readonly) bool supportsPipelineLibraries;
@property (nonatomic, readonly) bool supportsPlacementHeaps;
@property (nonatomic, readonly) bool supportsPostDepthCoverage;
@property (nonatomic, readonly) bool supportsProgrammableBlending;
@property (nonatomic, readonly) bool supportsProgrammableSamplePositions;
@property (nonatomic, readonly) bool supportsPublicXR10Formats;
@property (nonatomic, readonly) bool supportsQuadGroup;
@property (nonatomic, readonly) bool supportsQuadReduction;
@property (nonatomic, readonly) bool supportsQuadShufflesAndBroadcast;
@property (nonatomic, readonly) bool supportsRasterOrderGroups;
@property (nonatomic, readonly) bool supportsReadWriteBufferArguments;
@property (nonatomic, readonly) bool supportsReadWriteTextureArguments;
@property (nonatomic, readonly) bool supportsReadWriteTextureArgumentsTier2;
@property (nonatomic, readonly) bool supportsReadWriteTextureCubeArguments;
@property (nonatomic, readonly) bool supportsRelaxedTextureViewRequirements;
@property (nonatomic, readonly) bool supportsRenderPassWithoutRenderTarget;
@property (nonatomic, readonly) bool supportsRenderTextureWrites;
@property (nonatomic, readonly) bool supportsRenderToLinearTextures;
@property (nonatomic, readonly) bool supportsSIMDGroup;
@property (nonatomic, readonly) bool supportsSIMDReduction;
@property (nonatomic, readonly) bool supportsSIMDShufflesAndBroadcast;
@property (nonatomic, readonly) bool supportsSRGBwrites;
@property (nonatomic, readonly) bool supportsSamplerAddressModeClampToHalfBorder;
@property (nonatomic, readonly) bool supportsSamplerCompareFunction;
@property (nonatomic, readonly) bool supportsSeparateDepthStencil;
@property (nonatomic, readonly) bool supportsSeparateVisibilityAndShadingRate;
@property (nonatomic, readonly) bool supportsShaderLODAverage;
@property (nonatomic, readonly) bool supportsShaderMinLODClamp;
@property (nonatomic, readonly) bool supportsSparseTextures;
@property (nonatomic, readonly) bool supportsStencilFeedback;
@property (nonatomic, readonly) bool supportsTessellation;
@property (nonatomic, readonly) bool supportsTexture2DMultisampleArray;
@property (nonatomic, readonly) bool supportsTextureCubeArray;
@property (nonatomic, readonly) bool supportsTextureOutOfBoundsReads;
@property (nonatomic, readonly) bool supportsTextureSwizzle;
@property (nonatomic, readonly) bool supportsTileShaders;
@property (nonatomic, readonly) bool supportsVariableRateRasterization;
@property (nonatomic, readonly) bool supportsVertexAmplification;
@property (nonatomic, readonly) bool supportsViewportAndScissorArray;
@property (nonatomic, readonly) bool supportsYCBCRFormats;
@property (nonatomic, readonly) bool supportsYCBCRFormats12;
@property (nonatomic, readonly) bool supportsYCBCRFormatsPQ;
@property (nonatomic, readonly) bool supportsYCBCRFormatsXR;
@property (getter=isUtilityBufferRequired) bool utilityBufferRequired;
@property (nonatomic, readonly) NSArray *utilityBuffers;

+ (bool)featureProfile:(unsigned long long)arg1 supportsFeatureSet:(unsigned long long)arg2;
+ (bool)useNewPrimitiveRestartBehavior;

- (void)_decrementCommandQueueCount;
- (id)_deviceWrapper;
- (void)_incrementCommandQueueCount;
- (void)_purgeDevice;
- (void)_setDeviceWrapper:(id)arg1;
- (unsigned int)acceleratorPort;
- (void)addBufferToGlobalResourceTable:(id)arg1;
- (void)addComputePipelineStateToGlobalResourceTable:(id)arg1;
- (void)addIndirectCommandBufferToGlobalResourceTable:(id)arg1;
- (void)addRenderPipelineStateToGlobalResourceTable:(id)arg1;
- (void)addSamplerStateToGlobalResourceTable:(id)arg1;
- (void)addTextureToGlobalResourceTable:(id)arg1;
- (void)allowLibrariesFromOtherPlatforms;
- (bool)areGPUAssertionsEnabled;
- (bool)areProgrammableSamplePositionsSupported;
- (bool)areRasterOrderGroupsSupported;
- (unsigned long long)argumentBuffersSupport;
- (id)compiler;
- (void)compilerPropagatesThreadPriority:(bool)arg1;
- (void*)computeFunctionKeyWithComputePipelineDescriptor:(id)arg1 keySize:(unsigned long long*)arg2;
- (void*)computeFunctionKeyWithComputePipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 keySize:(unsigned long long*)arg3;
- (id)computeVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (id)concurrentQueue;
- (void)convertSparsePixelRegions:(const struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; }*)arg1 toTileRegions:(struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; }*)arg2 withTileSize:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg3 alignmentMode:(unsigned long long)arg4 numRegions:(unsigned long long)arg5;
- (void)convertSparseTileRegions:(const struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; }*)arg1 toPixelRegions:(struct { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; } x1; struct { unsigned long long x_2_1_1; unsigned long long x_2_1_2; unsigned long long x_2_1_3; } x2; }*)arg2 withTileSize:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg3 numRegions:(unsigned long long)arg4;
- (bool)copyShaderCacheToPath:(id)arg1;
- (unsigned long long)createNewUtilityBuffer;
- (unsigned long long)currentUtilityBufferIndex;
- (void)dealloc;
- (id)description;
- (unsigned long long)deviceLinearReadOnlyTextureAlignmentBytes;
- (unsigned long long)deviceLinearTextureAlignmentBytes;
- (bool)deviceOrFeatureProfileSupportsFeatureSet:(unsigned long long)arg1;
- (bool)deviceSupportsFeatureSet:(unsigned long long)arg1;
- (void)dumpPipelineDescriptorsIfRequested;
- (id)endCollectingPipelineDescriptors;
- (id)familyName;
- (Class)featureQueryClass;
- (id)formattedDescription:(unsigned long long)arg1;
- (void*)fragmentFunctionKeyWithRenderPipelineDescriptor:(id)arg1 fragmentKeySize:(unsigned long long*)arg2 previousStateVariant:(id)arg3;
- (void*)fragmentFunctionKeyWithRenderPipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 previousStateVariant:(id)arg3 fragmentKeySize:(unsigned long long*)arg4;
- (id)fragmentVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (void)freeComputeFunctionKey:(void*)arg1 keySize:(unsigned long long)arg2;
- (void)freeFragmentFunctionKey:(void*)arg1 fragmentKeySize:(unsigned long long)arg2;
- (void)freeVertexFunctionKey:(void*)arg1 vertexKeySize:(unsigned long long)arg2;
- (void)getConstantSamplersBitmasks:(unsigned long long**)arg1 uniqueIdentifiers:(unsigned long long**)arg2 constantSamplerCount:(unsigned long long*)arg3 forComputeVariant:(id)arg4;
- (void)getConstantSamplersBitmasks:(unsigned long long**)arg1 uniqueIdentifiers:(unsigned long long**)arg2 constantSamplerCount:(unsigned long long*)arg3 forVertexVariant:(id)arg4 fragmentVariant:(id)arg5;
- (void)getDefaultSamplePositions:(struct { float x1; float x2; }*)arg1 count:(unsigned long long)arg2;
- (void*)getShaderCacheKeys;
- (unsigned long long)globalTraceObjectID;
- (struct IndirectArgumentBufferCapabilities { unsigned int x1 : 1; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 29; })indirectArgumentBufferCapabilities;
- (unsigned long long)indirectBufferAddressForResourceIndex:(unsigned long long)arg1 offset:(unsigned long long)arg2;
- (id)init;
- (void)initFeatureQueries;
- (void)initGPUFamilySupport;
- (void)initLimits;
- (void)initSerializationPaths;
- (unsigned long long)iosurfaceReadOnlyTextureAlignmentBytes;
- (unsigned long long)iosurfaceTextureAlignmentBytes;
- (bool)isCollectingLibraries;
- (bool)isCollectingPipelines;
- (bool)isPlacementHeapSupported;
- (bool)isQuadDataSharingSupported;
- (bool)isResourceIndirectionEnabled;
- (bool)isUtilityBufferRequired;
- (struct { unsigned int x1; unsigned int x2; })libraryCacheStats;
- (const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; float x19; float x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned int x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; unsigned int x47; unsigned int x48; unsigned int x49; unsigned int x50; unsigned int x51; unsigned int x52; unsigned int x53; unsigned int x54; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; unsigned int x59; }*)limits;
- (unsigned long long)linearTextureAlignmentBytes;
- (unsigned long long)linearTextureArrayAlignmentBytes;
- (unsigned long long)linearTextureArrayAlignmentSlice;
- (unsigned long long)maxArgumentBufferSamplerCount;
- (unsigned long long)maxColorAttachments;
- (unsigned long long)maxComputeAttributes;
- (unsigned long long)maxComputeBuffers;
- (unsigned long long)maxComputeInlineDataSize;
- (unsigned long long)maxComputeLocalMemorySizes;
- (unsigned long long)maxComputeSamplers;
- (unsigned long long)maxComputeTextures;
- (unsigned long long)maxComputeThreadgroupMemory;
- (unsigned long long)maxComputeThreadgroupMemoryAlignmentBytes;
- (unsigned long long)maxCustomSamplePositions;
- (unsigned long long)maxFragmentBuffers;
- (unsigned long long)maxFragmentInlineDataSize;
- (unsigned long long)maxFragmentSamplers;
- (unsigned long long)maxFragmentTextures;
- (unsigned long long)maxFramebufferStorageBits;
- (unsigned long long)maxFunctionConstantIndices;
- (unsigned long long)maxIndirectBuffers;
- (unsigned long long)maxIndirectSamplers;
- (unsigned long long)maxIndirectSamplersPerDevice;
- (unsigned long long)maxIndirectTextures;
- (unsigned long long)maxInterpolants;
- (unsigned long long)maxInterpolatedComponents;
- (float)maxLineWidth;
- (float)maxPointSize;
- (unsigned long long)maxRasterizationRateLayerCount;
- (unsigned long long)maxTessellationFactor;
- (unsigned long long)maxTextureBufferWidth;
- (unsigned long long)maxTextureDepth3D;
- (unsigned long long)maxTextureDimensionCube;
- (unsigned long long)maxTextureHeight2D;
- (unsigned long long)maxTextureHeight3D;
- (unsigned long long)maxTextureLayers;
- (unsigned long long)maxTextureWidth1D;
- (unsigned long long)maxTextureWidth2D;
- (unsigned long long)maxTextureWidth3D;
- (unsigned long long)maxTileBuffers;
- (unsigned long long)maxTileInlineDataSize;
- (unsigned long long)maxTileSamplers;
- (unsigned long long)maxTileTextures;
- (unsigned long long)maxTotalComputeThreadsPerThreadgroup;
- (unsigned long long)maxVertexAmplificationCount;
- (unsigned long long)maxVertexAmplificationFactor;
- (unsigned long long)maxVertexAttributes;
- (unsigned long long)maxVertexBuffers;
- (unsigned long long)maxVertexInlineDataSize;
- (unsigned long long)maxVertexSamplers;
- (unsigned long long)maxVertexTextures;
- (unsigned long long)maxViewportCount;
- (unsigned long long)maxVisibilityQueryOffset;
- (unsigned long long)minBufferNoCopyAlignmentBytes;
- (unsigned long long)minConstantBufferAlignmentBytes;
- (unsigned long long)minLinearTextureAlignmentForPixelFormat:(unsigned long long)arg1;
- (unsigned long long)minTilePixels;
- (unsigned long long)minimumLinearTextureAlignmentForPixelFormat:(unsigned long long)arg1;
- (id)name;
- (id)newArgumentEncoderWithArguments:(id)arg1;
- (id)newArgumentEncoderWithArguments:(id)arg1 structType:(id*)arg2;
- (id)newArgumentEncoderWithLayout:(id)arg1;
- (id)newBufferWithBytes:(const void*)arg1 length:(unsigned long long)arg2 options:(unsigned long long)arg3 atResourceIndex:(unsigned long long)arg4;
- (id)newBufferWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 options:(unsigned long long)arg3 atResourceIndex:(unsigned long long)arg4 deallocator:(id /* block */)arg5;
- (id)newBufferWithLength:(unsigned long long)arg1 options:(unsigned long long)arg2 atResourceIndex:(unsigned long long)arg3;
- (id)newCommandQueue;
- (id)newCommandQueueWithDescriptor:(id)arg1;
- (id)newCommandQueueWithMaxCommandBufferCount:(unsigned long long)arg1;
- (id)newComputePipelineDescriptorWithSerializedData:(id)arg1 deserializationContext:(id)arg2;
- (void)newComputePipelineStateWithFunction:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)newComputePipelineStateWithFunction:(id)arg1 error:(id*)arg2;
- (void)newComputePipelineStateWithFunction:(id)arg1 options:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (id)newComputePipelineStateWithFunction:(id)arg1 options:(unsigned long long)arg2 reflection:(id*)arg3 error:(id*)arg4;
- (id)newComputePipelineStateWithImageFilterFunctionsSPI:(id)arg1 imageFilterFunctionInfo:(const struct { bool x1; unsigned long long x2; struct { /* ? */ } *x3; }*)arg2 error:(id*)arg3;
- (id)newComputePipelineWithDescriptor:(id)arg1 variant:(id)arg2;
- (id)newComputePipelineWithDescriptor:(id)arg1 variant:(id)arg2 errorMessage:(id*)arg3;
- (id)newComputeVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (id)newDefaultLibrary;
- (id)newDefaultLibraryWithBundle:(id)arg1 error:(id*)arg2;
- (id)newEvent;
- (id)newFragmentVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (id)newFunctionWithGLIR:(void*)arg1 functionType:(unsigned long long)arg2;
- (id)newFunctionWithGLIR:(void*)arg1 inputsDescription:(id)arg2 functionType:(unsigned long long)arg3;
- (id)newLibraryWithCIFilters:(id)arg1 imageFilterFunctionInfo:(const struct { bool x1; unsigned long long x2; struct { /* ? */ } *x3; }*)arg2 error:(id*)arg3;
- (id)newLibraryWithData:(id)arg1 error:(id*)arg2;
- (id)newLibraryWithFile:(id)arg1 error:(id*)arg2;
- (id)newLibraryWithImageFilterFunctionsSPI:(id)arg1 imageFilterFunctionInfo:(const struct { bool x1; unsigned long long x2; struct { /* ? */ } *x3; }*)arg2 error:(id*)arg3;
- (void)newLibraryWithSource:(id)arg1 options:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)newLibraryWithSource:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (id)newLibraryWithURL:(id)arg1 error:(id*)arg2;
- (id)newPipelineLibraryWithFilePath:(id)arg1 error:(id*)arg2;
- (id)newRasterizationRateMapWithDescriptor:(id)arg1;
- (id)newRasterizationRateMapWithScreenSize:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; })arg1 layerCount:(unsigned long long)arg2 layers:(const id*)arg3;
- (id)newRenderPipelineDescriptorWithSerializedData:(id)arg1 deserializationContext:(id)arg2;
- (id)newRenderPipelineWithDescriptor:(id)arg1 vertexVariant:(id)arg2 fragmentVariant:(id)arg3;
- (id)newRenderPipelineWithDescriptor:(id)arg1 vertexVariant:(id)arg2 fragmentVariant:(id)arg3 errorMessage:(id*)arg4;
- (id)newSharedEvent;
- (id)newSharedEventWithHandle:(id)arg1;
- (id)newSharedEventWithMachPort:(unsigned int)arg1;
- (id)newSharedTextureWithDescriptor:(id)arg1;
- (id)newSharedTextureWithHandle:(id)arg1;
- (id)newVertexVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;
- (unsigned long long)offsetFromIndirectBufferAddress:(unsigned long long)arg1;
- (struct { unsigned int x1; unsigned int x2; })pipelineCacheStats;
- (struct { unsigned int x1 : 1; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 60; })pipelineFlagsWithComputeVariant:(id)arg1;
- (struct { unsigned int x1 : 1; unsigned int x2 : 1; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 1; unsigned int x6 : 1; unsigned int x7 : 1; unsigned int x8 : 1; unsigned int x9 : 1; unsigned int x10 : 55; })pipelineFlagsWithVertexVariant:(id)arg1 fragmentVariant:(id)arg2;
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)arg1;
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)arg1 compileTimeOutput:(id)arg2;
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)arg1 fragmentVariant:(id)arg2;
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)arg1 fragmentVariant:(id)arg2 vertexCompileTimeOutput:(id)arg3 fragmentCompileTimeOutput:(id)arg4;
- (id)productName;
- (unsigned long long)readWriteTextureSupport;
- (void)registerCompiler:(id)arg1;
- (void)registerComputePipelineDescriptor:(id)arg1;
- (void)registerRenderPipelineDescriptor:(id)arg1;
- (void)registerTileRenderPipelineDescriptor:(id)arg1;
- (void)releaseCacheEntry:(struct MTLLibraryContainer { struct MTLPipelineCollection {} *x1; int x2; struct { unsigned char x_3_1_1[32]; } x3; struct MTLLibraryData {} *x4; id x5; id x6; id x7; id x8; id x9; }*)arg1;
- (void)removeResourceFromGlobalResourceTable:(unsigned long long)arg1 resourceType:(unsigned long long)arg2;
- (bool)requiresIndirectionForAllResourceTypes;
- (void)reserveResourceIndicesForResourceType:(unsigned long long)arg1 indices:(unsigned long long*)arg2 indexCount:(unsigned long long)arg3;
- (unsigned long long)resourceIndexFromIndirectBufferAddress:(unsigned long long)arg1;
- (id)serialQueue;
- (id)serializeComputePipelineDescriptor:(id)arg1;
- (id)serializeRenderPipelineDescriptor:(id)arg1;
- (id)serializeStructType:(id)arg1;
- (id)serializeStructType:(id)arg1 version:(unsigned int)arg2;
- (void)setCurrentUtilityBufferIndex:(unsigned long long)arg1;
- (void)setGPUAssertionsEnabled:(bool)arg1;
- (void)setResourceIndirectionEnabled:(bool)arg1;
- (void)setUtilityBufferRequired:(bool)arg1;
- (void)setUtilityBuffers:(id)arg1;
- (unsigned long long)sparseTexturesSupport;
- (unsigned long long)sparseTileSizeInBytes;
- (void)startCollectingPipelineDescriptors;
- (void)startCollectingPipelineDescriptorsFromLibrary:(id)arg1 filePath:(id)arg2;
- (void)startCollectingPipelineDescriptorsUsingPrefixForNames:(id)arg1;
- (bool)supports2DLinearTexArraySPI;
- (bool)supports32bpcMSAATextures;
- (bool)supports3DASTCTextures;
- (bool)supports3DBCTextures;
- (bool)supportsASTCHDRTextureCompression;
- (bool)supportsASTCTextureCompression;
- (bool)supportsAlphaYUVFormats;
- (bool)supportsArgumentBuffersTier2;
- (bool)supportsArrayOfSamplers;
- (bool)supportsArrayOfTextures;
- (bool)supportsBCTextureCompression;
- (bool)supportsBaseVertexInstanceDrawing;
- (bool)supportsBlackOrWhiteSamplerBorderColors;
- (bool)supportsBufferWithIOSurface;
- (bool)supportsBufferlessClientStorageTexture;
- (bool)supportsCMPIndirectCommandBuffers;
- (bool)supportsCombinedMSAAStoreAndResolveAction;
- (bool)supportsConcurrentComputeDispatch;
- (bool)supportsCountingOcclusionQuery;
- (bool)supportsCustomBorderColor;
- (bool)supportsDepthClipMode;
- (bool)supportsDepthClipModeClampExtended;
- (bool)supportsExtendedXR10Formats;
- (bool)supportsExtendedYUVFormats;
- (bool)supportsFP32TessFactors;
- (bool)supportsFamily:(long long)arg1;
- (bool)supportsFastMathInfNaNPropagation;
- (bool)supportsFeatureSet:(unsigned long long)arg1;
- (bool)supportsFloat16BCubicFiltering;
- (bool)supportsForceSeamsOnCubemaps;
- (bool)supportsFragmentBufferWrites;
- (bool)supportsFragmentOnlyEncoders;
- (bool)supportsGFXIndirectCommandBuffers;
- (bool)supportsGPUStatistics;
- (bool)supportsImageBlockSampleCoverageControl;
- (bool)supportsImageBlocks;
- (bool)supportsIndirectDrawAndDispatch;
- (bool)supportsIndirectStageInRegion;
- (bool)supportsIndirectTessellation;
- (bool)supportsIndirectTextures;
- (bool)supportsInvariantVertexPosition;
- (bool)supportsLargeFramebufferConfigs;
- (bool)supportsLayeredRendering;
- (bool)supportsLimitedYUVFormats;
- (bool)supportsLinearTexture2DArray;
- (bool)supportsLinearTextureFromSharedBuffer;
- (bool)supportsMSAADepthResolve;
- (bool)supportsMSAADepthResolveFilter;
- (bool)supportsMSAAStencilResolve;
- (bool)supportsMSAAStencilResolveFilter;
- (bool)supportsMemoryOrderAtomics;
- (bool)supportsMemorylessRenderTargets;
- (bool)supportsMipLevelsSmallerThanBlockSize;
- (bool)supportsMirrorClampToEdgeSamplerMode;
- (bool)supportsMutableTier1ArgumentBuffers;
- (bool)supportsNativeHardwareFP16;
- (bool)supportsNonPrivateDepthStencilTextures;
- (bool)supportsNonPrivateMSAATextures;
- (bool)supportsNonSquareTileShaders;
- (bool)supportsNonUniformThreadgroupSize;
- (bool)supportsNorm16BCubicFiltering;
- (bool)supportsOpenCLTextureWriteSwizzles;
- (bool)supportsPacked32TextureBufferWrites;
- (bool)supportsPipelineLibraries;
- (bool)supportsPlacementHeaps;
- (bool)supportsPostDepthCoverage;
- (bool)supportsProgrammableBlending;
- (bool)supportsProgrammableSamplePositions;
- (bool)supportsPublicXR10Formats;
- (bool)supportsQuadGroup;
- (bool)supportsQuadReduction;
- (bool)supportsQuadShufflesAndBroadcast;
- (bool)supportsRasterOrderGroups;
- (bool)supportsRasterizationRateMapWithLayerCount:(unsigned long long)arg1;
- (bool)supportsReadWriteBufferArguments;
- (bool)supportsReadWriteTextureArguments;
- (bool)supportsReadWriteTextureArgumentsTier2;
- (bool)supportsReadWriteTextureCubeArguments;
- (bool)supportsRelaxedTextureViewRequirements;
- (bool)supportsRenderPassWithoutRenderTarget;
- (bool)supportsRenderTextureWrites;
- (bool)supportsRenderToLinearTextures;
- (bool)supportsSIMDGroup;
- (bool)supportsSIMDReduction;
- (bool)supportsSIMDShufflesAndBroadcast;
- (bool)supportsSRGBwrites;
- (bool)supportsSamplerAddressModeClampToHalfBorder;
- (bool)supportsSamplerCompareFunction;
- (bool)supportsSeparateDepthStencil;
- (bool)supportsSeparateVisibilityAndShadingRate;
- (bool)supportsShaderLODAverage;
- (bool)supportsShaderMinLODClamp;
- (bool)supportsSparseTextures;
- (bool)supportsStencilFeedback;
- (bool)supportsTessellation;
- (bool)supportsTexture2DMultisampleArray;
- (bool)supportsTextureCubeArray;
- (bool)supportsTextureOutOfBoundsReads;
- (bool)supportsTextureSampleCount:(unsigned long long)arg1;
- (bool)supportsTextureSwizzle;
- (bool)supportsTileShaders;
- (bool)supportsVariableRateRasterization;
- (bool)supportsVertexAmplification;
- (bool)supportsViewportAndScissorArray;
- (bool)supportsYCBCRFormats;
- (bool)supportsYCBCRFormats12;
- (bool)supportsYCBCRFormatsPQ;
- (bool)supportsYCBCRFormatsXR;
- (void)unloadShaderCaches;
- (bool)useDeviceResourceTableForType:(unsigned long long)arg1;
- (id)utilityBufferForComputeCommandEncoder:(id)arg1;
- (id)utilityBufferForRenderCommandEncoder:(id)arg1;
- (id)utilityBuffers;
- (id)vendorName;
- (void*)vertexFunctionKeyWithRenderPipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 nextStageVariant:(id)arg3 vertexKeySize:(unsigned long long*)arg4;
- (void*)vertexFunctionKeyWithRenderPipelineDescriptor:(id)arg1 vertexKeySize:(unsigned long long*)arg2 nextStageVariant:(id)arg3;
- (id)vertexVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;

@end
