/* Generated by EzioChiu
   Image: /System/Library/Frameworks/CoreHaptics.framework/CoreHaptics
 */

@interface CHMetricsManager : NSObject {
    struct unordered_map<AVHapticPlayerEventType, NSString *, std::__1::hash<AVHapticPlayerEventType>, std::__1::equal_to<AVHapticPlayerEventType>, std::__1::allocator<std::__1::pair<const AVHapticPlayerEventType, NSString *> > > { 
        struct __hash_table<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::__unordered_map_hasher<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::hash<AVHapticPlayerEventType>, true>, std::__1::__unordered_map_equal<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::equal_to<AVHapticPlayerEventType>, true>, std::__1::allocator<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *> > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::hash<AVHapticPlayerEventType>, true> > { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<AVHapticPlayerEventType, std::__1::__hash_value_type<AVHapticPlayerEventType, NSString *>, std::__1::equal_to<AVHapticPlayerEventType>, true> > { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _CHMetricTransientEventTypeStringMap;
    float  _CHMetricsIntensityBin1To2Value;
    float  _CHMetricsIntensityBin2To3Value;
    <CHHapticDeviceCapability> * _defaultDeviceCaps;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    NSMutableDictionary * _enginePlayerData;
    NSMutableDictionary * _engineReporter;
    NSMutableDictionary * _engineSPI;
    bool  _metricsDisabled;
    NSMutableDictionary * _testData;
    bool  _testMode;
}

+ (void)createSharedManagerWithEngine:(id)arg1 audioSessionID:(unsigned int)arg2 SPI:(bool)arg3 sessionIsShared:(bool)arg4;
+ (double)currentTime;
+ (void)destroySharedManagerWithEngine:(id)arg1;
+ (struct CAMutex { int (**x1)(); char *x2; struct _opaque_pthread_t {} *x3; struct _opaque_pthread_mutex_t { long long x_4_1_1; BOOL x_4_1_2[56]; } x4; }*)getLock;
+ (id)sharedManager;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addForEngine:(id)arg1 audioSessionID:(unsigned int)arg2 sessionIsShared:(bool)arg3 SPI:(bool)arg4;
- (void)addToTestDataForPlayer:(id)arg1 transientData:(id)arg2 continuousData:(id)arg3;
- (id)continousDictionary:(id)arg1 slot:(unsigned long long)arg2 intensity:(float)arg3;
- (id)continuousSharpnessSlotKeyFromSlotValue:(unsigned long long)arg1;
- (id)copyDataForDictionary:(id)arg1;
- (void)dealloc;
- (void)destroyForEngine:(id)arg1;
- (void)dispatchOnLocal:(id /* block */)arg1;
- (id)getKeyForEngine:(id)arg1;
- (id)getKeyForPlayer:(id)arg1;
- (id)getMetricsForPlayer:(id)arg1;
- (void)handleEngineStart:(id)arg1;
- (void)handleEngineStop:(id)arg1;
- (void)handleParamCurveEncountered:(id)arg1;
- (void)handlePlayerAction:(id)arg1 player:(id)arg2 action:(long long)arg3 time:(float)arg4 isAdvanced:(bool)arg5;
- (void)handlePlayerDealloc:(id)arg1 player:(id)arg2;
- (void)handlePlayerFinish:(id)arg1 endTime:(float)arg2;
- (void)handlePlayerInit:(id)arg1 player:(id)arg2 events:(id)arg3 isAdvanced:(bool)arg4;
- (void)handleServerRecovery:(id)arg1 audioSessionID:(unsigned int)arg2 sessionIsShared:(bool)arg3;
- (id)init;
- (id)intensityBinKeyFromValue:(float)arg1;
- (void)logMetricForEngine:(id)arg1 metric:(id)arg2 value:(id)arg3;
- (void)logPlaybackMetricForEngine:(id)arg1 playerKey:(id)arg2 endTime:(float)arg3;
- (void)markAdvancedPlaybackAction:(id)arg1 player:(id)arg2 action:(long long)arg3 time:(float)arg4;
- (void)markPlaybackAction:(id)arg1 player:(id)arg2 action:(long long)arg3 time:(float)arg4;
- (void)multiplyAdvancedPlaybackMetricsDictionary:(id)arg1 transientData:(id)arg2 continuousData:(id)arg3 endTime:(double)arg4;
- (void)multiplyContinuousData:(id)arg1 by:(float)arg2;
- (void)multiplyPlaybackMetricsDictionary:(id)arg1 transientData:(id)arg2 continuousData:(id)arg3 endTime:(double)arg4;
- (void)multiplyTransientData:(id)arg1 by:(float)arg2;
- (void)prepareAdvancedPlaybackData:(id)arg1 player:(id)arg2 events:(id)arg3;
- (void)prepareData:(id)arg1 events:(id)arg2;
- (void)preparePlaybackData:(id)arg1 player:(id)arg2 events:(id)arg3;
- (void)removePlaybackData:(id)arg1 player:(id)arg2;
- (void)resetAdvancedPlaybackData:(id)arg1;
- (void)resetPlaybackData:(id)arg1;
- (void)setMetricsDisabledByDefault;
- (void)setMetricsEnabledByDefault;
- (void)setMetricsTestModeEnabled;
- (id)setReporterForEngine:(id)arg1 audioSessionID:(unsigned int)arg2 sessionIsShared:(bool)arg3;
- (void)startReporter:(id)arg1;
- (void)stopReporter:(id)arg1;
- (id)transientDictionary:(id)arg1 eventType:(unsigned long long)arg2 intensity:(float)arg3;
- (id)transientEventTypeKeyWithEventType:(unsigned long long)arg1;

@end
