/* Generated by EzioChiu
   Image: /System/Library/Frameworks/GameplayKit.framework/GameplayKit
 */

@interface GKMinmaxStrategist : NSObject <GKStrategist> {
    struct GKCMinmaxStrategist { struct vector<id<GKGameModel>, std::__1::allocator<id<GKGameModel> > > { id *x_1_1_1; id *x_1_1_2; struct __compressed_pair<__strong id<GKGameModel> *, std::__1::allocator<id<GKGameModel> > > { id *x_3_2_1; } x_1_1_3; } x1; struct list<GKCMoveData, std::__1::allocator<GKCMoveData> > { struct __list_node_base<GKCMoveData, void *> { struct __list_node_base<GKCMoveData, void *> {} *x_1_2_1; struct __list_node_base<GKCMoveData, void *> {} *x_1_2_2; } x_2_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<GKCMoveData, void *> > > { unsigned long long x_2_2_1; } x_2_1_2; } x2; struct vector<std::__1::vector<long, std::__1::allocator<long> >, std::__1::allocator<std::__1::vector<long, std::__1::allocator<long> > > > { struct vector<long, std::__1::allocator<long> > {} *x_3_1_1; struct vector<long, std::__1::allocator<long> > {} *x_3_1_2; struct __compressed_pair<std::__1::vector<long, std::__1::allocator<long> > *, std::__1::allocator<std::__1::vector<long, std::__1::allocator<long> > > > { struct vector<long, std::__1::allocator<long> > {} *x_3_2_1; } x_3_1_3; } x3; } * _cppMinmax;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) <GKGameModel> *gameModel;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long maxLookAheadDepth;
@property (nonatomic, retain) <GKRandom> *randomSource;
@property (readonly) Class superclass;

- (id)bestMoveForActivePlayer;
- (id)bestMoveForPlayer:(id)arg1;
- (void)dealloc;
- (id)gameModel;
- (id)init;
- (long long)maxLookAheadDepth;
- (id)randomMoveForPlayer:(id)arg1 fromNumberOfBestMoves:(long long)arg2;
- (id)randomSource;
- (void)setGameModel:(id)arg1;
- (void)setMaxLookAheadDepth:(long long)arg1;
- (void)setRandomSource:(id)arg1;

@end
