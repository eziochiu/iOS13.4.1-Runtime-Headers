/* Generated by EzioChiu
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork
 */

@interface __NSURLSessionEffectiveConfiguration_Base : NSObject <NSCopying, NSSecureCoding> {
    NSURLSessionConfiguration * _config;
}

@property (readonly, copy) NSDictionary *HTTPAdditionalHeaders;
@property (readonly, retain) NSHTTPCookieStorage *HTTPCookieStorage;
@property (readonly, retain) NSURLCache *URLCache;
@property (readonly, retain) NSURLCredentialStorage *URLCredentialStorage;
@property (readonly, copy) NSString *_CTDataConnectionServiceType;
@property (readonly) unsigned long long _TCPAdaptiveReadTimeout;
@property (readonly) unsigned long long _TCPAdaptiveWriteTimeout;
@property (readonly) bool _allowsConstrainedNetworkAccess;
@property (readonly) bool _allowsExpensiveAccess;
@property (readonly) bool _allowsIndefiniteConnections;
@property (readonly) bool _allowsMultipathTCP;
@property (readonly) bool _allowsPowerNapScheduling;
@property (readonly) bool _allowsResponseMonitoringDuringBodyTranmission;
@property (readonly) bool _allowsTCPFastOpen;
@property (readonly) bool _allowsTLSFalseStart;
@property (readonly) bool _allowsTLSSessionResumption;
@property (readonly) bool _allowsTLSSessionTickets;
@property (readonly) bool _allowsWCA;
@property (readonly) bool _alwaysPerformDefaultTrustEvaluation;
@property (readonly, copy) <NSURLSessionAppleIDContext> *_appleIDContext;
@property (readonly, copy) NSSet *_authenticatorStatusCodes;
@property (readonly) bool _clientIsNotExplicitlyDiscretionary;
@property (readonly, copy) NSString *_companionAppBundleIdentifier;
@property (readonly, copy) NSString *_connectionPoolName;
@property (readonly) unsigned long long _customReadBufferSize;
@property (readonly) double _customReadBufferTimeout;
@property (readonly, copy) NSURL *_directoryForDownloadedFiles;
@property (readonly) bool _duetPreauthorized;
@property (readonly) long long _expiredDNSBehavior;
@property (readonly) unsigned long long _forcedNetworkServiceType;
@property (readonly) bool _forcesNewConnections;
@property (readonly, copy) NSNumber *_maximumWatchCellularTransferSize;
@property (readonly) unsigned long long _multipathAlternatePort;
@property (readonly) bool _onBehalfOfPairedDevice;
@property (readonly) bool _preventsAppSSO;
@property (readonly) bool _preventsIdleSleepOnceConnected;
@property (readonly) bool _preventsSystemHTTPProxyAuthentication;
@property (readonly) bool _reportsDataStalls;
@property (readonly) bool _requiresPowerPluggedIn;
@property (readonly) bool _requiresSecureHTTPSProxyConnection;
@property (readonly) bool _requiresSustainedDataDelivery;
@property (readonly) bool _respectsAllowsCellularAccessForDiscretionaryTasks;
@property (readonly) bool _shouldSkipPreferredClientCertificateLookup;
@property (readonly, copy) NSData *_sourceApplicationAuditTokenData;
@property (readonly, copy) NSString *_sourceApplicationBundleIdentifier;
@property (readonly, copy) NSString *_sourceApplicationSecondaryIdentifier;
@property (readonly, copy) NSSet *_suppressedAutoAddedHTTPHeaders;
@property (readonly, copy) NSString *_tcpConnectionPoolName;
@property (readonly) long long _timingDataOptions;
@property (readonly, copy) NSString *_tlsTrustPinningPolicyName;
@property (readonly) bool allowsCellularAccess;
@property (readonly) bool allowsConstrainedNetworkAccess;
@property (readonly) bool allowsExpensiveNetworkAccess;
@property (getter=isDiscretionary, readonly) bool discretionary;
@property (readonly) long long multipathServiceType;
@property (readonly, copy) NSArray *protocolClasses;
@property (readonly) bool shouldUseExtendedBackgroundIdleMode;
@property (readonly) double timeoutIntervalForResource;
@property (readonly) bool waitsForConnectivity;

+ (bool)supportsSecureCoding;

- (const void*)_copyAttribute:(struct __CFString { }*)arg1;
- (id)_initWithConfiguration:(id)arg1;
- (id)_initWithMeOther:(id)arg1;
- (id)_sessionConfiguration;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (bool)isEqual:(id)arg1;
- (id)mutableCopy;

@end
