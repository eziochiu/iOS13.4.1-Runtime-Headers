/* Generated by EzioChiu
   Image: /System/Library/Frameworks/Vision.framework/Vision
 */

@interface VNRequest : NSObject <NSCopying, VNSequencedRequestSupporting, VNWarningRecorder> {
    NSObject<OS_dispatch_queue> * _cancellationQueue;
    NSObject<OS_dispatch_semaphore> * _cancellationSemaphore;
    bool  _cancellationTriggered;
    VNCanceller * _canceller;
    id /* block */  _completionHandler;
    VNRequestConfiguration * _configuration;
    NSDictionary * _options;
    NSArray * _results;
    unsigned long long  _revision;
    VNWarningRecorder * _warningRecorder;
}

@property (retain) NSObject<OS_dispatch_semaphore> *cancellationSemaphore;
@property (readonly) bool cancellationTriggered;
@property (nonatomic, readonly, copy) id /* block */ completionHandler;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long detectionLevel;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long metalContextPriority;
@property (nonatomic) unsigned long long modelFileBackingStore;
@property (nonatomic, readonly, copy) NSDictionary *options;
@property (nonatomic) bool preferBackgroundProcessing;
@property (nonatomic, retain) <MTLDevice> *preferredMetalContext;
@property (nonatomic, copy) VNProcessingDevice *processingDevice;
@property (nonatomic, readonly, copy) NSArray *results;
@property (nonatomic) unsigned long long revision;
@property (readonly) Class superclass;
@property (nonatomic) bool usesCPUOnly;

+ (unsigned long long)_defaultRevisionForBuildVersion:(int)arg1;
+ (id)_introspectionBuiltSupportedRevisions;
+ (unsigned long long)compatibleRevisionForDependentRequestOfClass:(Class)arg1 beingPerformedByRevision:(unsigned long long)arg2;
+ (Class)configurationClass;
+ (unsigned long long)currentRevision;
+ (id)defaultProcessingDeviceForRevision:(unsigned long long)arg1;
+ (bool)defaultRequestInstanceWarmUpPerformer:(id)arg1 error:(id*)arg2;
+ (unsigned long long)defaultRevision;
+ (const struct { unsigned long long x1; Class x2; unsigned long long x3; }*)dependentRequestCompatability;
+ (id)descriptionForPrivateRevision:(unsigned long long)arg1;
+ (bool)getDoubleValue:(double*)arg1 forKey:(id)arg2 inOptions:(id)arg3 error:(id*)arg4;
+ (bool)getDoubleValue:(double*)arg1 forKey:(id)arg2 inOptions:(id)arg3 withDefaultValue:(double)arg4 error:(id*)arg5;
+ (bool)getFloatValue:(float*)arg1 forKey:(id)arg2 inOptions:(id)arg3 error:(id*)arg4;
+ (bool)getFloatValue:(float*)arg1 forKey:(id)arg2 inOptions:(id)arg3 withDefaultValue:(float)arg4 error:(id*)arg5;
+ (bool)getOptionalArray:(id*)arg1 forKey:(id)arg2 inOptions:(id)arg3 withElementsOfClass:(Class)arg4 error:(id*)arg5;
+ (bool)getOptionalInputFacesArray:(id*)arg1 inOptions:(id)arg2 error:(id*)arg3;
+ (bool)getOptionalObject:(id*)arg1 ofClass:(Class)arg2 forKey:(id)arg3 inOptions:(id)arg4 error:(id*)arg5;
+ (bool)getRequiredObject:(id*)arg1 ofClass:(Class)arg2 forKey:(id)arg3 inOptions:(id)arg4 error:(id*)arg5;
+ (void)initialize;
+ (id)newConfigurationInstance;
+ (void)recordDefaultOptionsInDictionary:(id)arg1;
+ (unsigned long long)resolvedRevisionForRevision:(unsigned long long)arg1;
+ (const struct { unsigned long long x1; struct { int x_2_1_1; int x_2_1_2; } x2; struct { int x_3_1_1; int x_3_1_2; } x3; struct { int x_4_1_1; int x_4_1_2; } x4; }*)revisionAvailability;
+ (id)supportedRevisions;
+ (bool)supportsPrivateRevision:(unsigned long long)arg1;
+ (bool)warmUpRequestPerformer:(id)arg1 error:(id*)arg2;

- (void).cxx_destruct;
- (id)_defaultProcessingDevice;
- (void)_setResolvedRevision:(unsigned long long)arg1;
- (void)_updateProcessingDeviceOption;
- (bool)allowsCachingOfResults;
- (void)applyConfigurationOfRequest:(id)arg1;
- (void)cancel;
- (id)cancellationSemaphore;
- (bool)cancellationTriggered;
- (bool)cancellationTriggeredAndReturnError:(id*)arg1;
- (id)cancellerAndReturnError:(id*)arg1;
- (unsigned long long)compatibleRevisionForDependentRequest:(id)arg1;
- (id /* block */)completionHandler;
- (id)configuration;
- (void)copyStateOfRequest:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (long long)dependencyProcessingOrdinality;
- (id)description;
- (unsigned long long)detectionLevel;
- (bool)hasCancellationHook;
- (id)init;
- (id)initWithCompletionHandler:(id /* block */)arg1;
- (bool)internalCancelInContext:(id)arg1 error:(id*)arg2;
- (bool)internalPerformInContext:(id)arg1 error:(id*)arg2;
- (bool)internalPerformRevision:(unsigned long long)arg1 inContext:(id)arg2 error:(id*)arg3;
- (unsigned long long)metalContextPriority;
- (unsigned long long)modelFileBackingStore;
- (id)newDefaultDetectorOptions;
- (id)newDefaultDetectorOptionsForRequestRevision:(unsigned long long)arg1;
- (id)newDefaultRequestInstance;
- (id)options;
- (bool)performInContext:(id)arg1 error:(id*)arg2;
- (bool)preferBackgroundProcessing;
- (id)preferredMetalContext;
- (id)processingDevice;
- (void)recordWarning:(id)arg1 value:(id)arg2;
- (unsigned long long)resolvedRevision;
- (id)results;
- (id /* block */)resultsSortingComparator;
- (unsigned long long)revision;
- (id)sequencedRequestPreviousObservationsKey;
- (void)setCancellationSemaphore:(id)arg1;
- (void)setDetectionLevel:(unsigned long long)arg1;
- (void)setMetalContextPriority:(unsigned long long)arg1;
- (void)setModelFileBackingStore:(unsigned long long)arg1;
- (void)setPreferBackgroundProcessing:(bool)arg1;
- (void)setPreferredMetalContext:(id)arg1;
- (bool)setPrivateRevision:(unsigned long long)arg1 error:(id*)arg2;
- (void)setProcessingDevice:(id)arg1;
- (void)setResults:(id)arg1;
- (void)setRevision:(unsigned long long)arg1;
- (void)setSortedResults:(id)arg1;
- (void)setUsesCPUOnly:(bool)arg1;
- (void)setValue:(id)arg1 forPrivateOption:(id)arg2;
- (void)setValue:(id)arg1 forRequestOption:(id)arg2;
- (bool)usesCPUOnly;
- (bool)validateConfigurationAndReturnError:(id*)arg1;
- (bool)validateImageBuffer:(id)arg1 ofNonZeroWidth:(unsigned long long*)arg2 andHeight:(unsigned long long*)arg3 error:(id*)arg4;
- (id)valueForPrivateOption:(id)arg1;
- (id)valueForWarning:(id)arg1;
- (bool)wantsSequencedRequestObservationsRecording;
- (bool)warmUpRequestPerformer:(id)arg1 error:(id*)arg2;
- (id)warnings;
- (bool)willAcceptCachedResultsFromRequestWithConfiguration:(id)arg1;

@end
