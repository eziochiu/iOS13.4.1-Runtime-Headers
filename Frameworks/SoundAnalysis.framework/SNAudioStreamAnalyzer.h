/* Generated by EzioChiu
   Image: /System/Library/Frameworks/SoundAnalysis.framework/SoundAnalysis
 */

@interface SNAudioStreamAnalyzer : NSObject <SNResultsGating, SNTimeConverting> {
    NSMutableArray * _analyzerInfos;
    NSObject<OS_dispatch_queue> * _analyzerQueue;
    AVAudioFormat * _currentFormat;
    bool  _isInErrorState;
    struct list<SoundAnalysis::ProcessingContext, std::__1::allocator<SoundAnalysis::ProcessingContext> > { 
        struct __list_node_base<SoundAnalysis::ProcessingContext, void *> { 
            struct __list_node_base<SoundAnalysis::ProcessingContext, void *> {} *__prev_; 
            struct __list_node_base<SoundAnalysis::ProcessingContext, void *> {} *__next_; 
        } __end_; 
        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::ProcessingContext, void *> > > { 
            unsigned long long __value_; 
        } __size_alloc_; 
    }  _processingContexts;
    struct ProcessingTree { 
        struct shared_ptr<DSPGraph::Graph> { 
            struct Graph {} *__ptr_; 
            struct __shared_weak_count {} *__cntrl_; 
        } mGraph; 
        struct list<SoundAnalysis::ProcessingContext, std::__1::allocator<SoundAnalysis::ProcessingContext> > { 
            struct __list_node_base<SoundAnalysis::ProcessingContext, void *> { 
                struct __list_node_base<SoundAnalysis::ProcessingContext, void *> {} *__prev_; 
                struct __list_node_base<SoundAnalysis::ProcessingContext, void *> {} *__next_; 
            } __end_; 
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::ProcessingContext, void *> > > { 
                unsigned long long __value_; 
            } __size_alloc_; 
        } mProcessingContexts; 
        struct list<SoundAnalysis::FormatMatchingNode, std::__1::allocator<SoundAnalysis::FormatMatchingNode> > { 
            struct __list_node_base<SoundAnalysis::FormatMatchingNode, void *> { 
                struct __list_node_base<SoundAnalysis::FormatMatchingNode, void *> {} *__prev_; 
                struct __list_node_base<SoundAnalysis::FormatMatchingNode, void *> {} *__next_; 
            } __end_; 
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::FormatMatchingNode, void *> > > { 
                unsigned long long __value_; 
            } __size_alloc_; 
        } mFormatMatchingNodes; 
        struct list<SoundAnalysis::SharedProcessingNode, std::__1::allocator<SoundAnalysis::SharedProcessingNode> > { 
            struct __list_node_base<SoundAnalysis::SharedProcessingNode, void *> { 
                struct __list_node_base<SoundAnalysis::SharedProcessingNode, void *> {} *__prev_; 
                struct __list_node_base<SoundAnalysis::SharedProcessingNode, void *> {} *__next_; 
            } __end_; 
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::SharedProcessingNode, void *> > > { 
                unsigned long long __value_; 
            } __size_alloc_; 
        } mSharedProcessingNodes; 
        struct list<SoundAnalysis::AnalyzerNode, std::__1::allocator<SoundAnalysis::AnalyzerNode> > { 
            struct __list_node_base<SoundAnalysis::AnalyzerNode, void *> { 
                struct __list_node_base<SoundAnalysis::AnalyzerNode, void *> {} *__prev_; 
                struct __list_node_base<SoundAnalysis::AnalyzerNode, void *> {} *__next_; 
            } __end_; 
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::AnalyzerNode, void *> > > { 
                unsigned long long __value_; 
            } __size_alloc_; 
        } mAnalyzerNodes; 
        struct RootNode { 
            int (**_vptr$ProcessingNode)(); 
            struct ProcessingNode {} *mUpstreamNode; 
            struct list<SoundAnalysis::ProcessingNode *, std::__1::allocator<SoundAnalysis::ProcessingNode *> > { 
                struct __list_node_base<SoundAnalysis::ProcessingNode *, void *> { 
                    struct __list_node_base<SoundAnalysis::ProcessingNode *, void *> {} *__prev_; 
                    struct __list_node_base<SoundAnalysis::ProcessingNode *, void *> {} *__next_; 
                } __end_; 
                struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::ProcessingNode *, void *> > > { 
                    unsigned long long __value_; 
                } __size_alloc_; 
            } mDownstreamNodes; 
            struct Box {} *mProcessingBox; 
            struct FormatAndBlockSize { 
                struct AudioStreamBasicDescription { 
                    double mSampleRate; 
                    unsigned int mFormatID; 
                    unsigned int mFormatFlags; 
                    unsigned int mBytesPerPacket; 
                    unsigned int mFramesPerPacket; 
                    unsigned int mBytesPerFrame; 
                    unsigned int mChannelsPerFrame; 
                    unsigned int mBitsPerChannel; 
                    unsigned int mReserved; 
                } mFormat; 
                int mBlockSize; 
            } mUpstreamFormat; 
            struct FormatAndBlockSize { 
                struct AudioStreamBasicDescription { 
                    double mSampleRate; 
                    unsigned int mFormatID; 
                    unsigned int mFormatFlags; 
                    unsigned int mBytesPerPacket; 
                    unsigned int mFramesPerPacket; 
                    unsigned int mBytesPerFrame; 
                    unsigned int mChannelsPerFrame; 
                    unsigned int mBitsPerChannel; 
                    unsigned int mReserved; 
                } mFormat; 
                int mBlockSize; 
            } mDownstreamFormat; 
        } mRootNode; 
        int mMaxFramesPerSlice; 
    }  _processingTree;
    SNAudioProcessorCache * _processorCache;
    NSArray * _requests;
    bool  _shouldProduceResults;
    bool  _shouldRebuildProcessingTree;
}

@property (nonatomic, readonly) double clientSampleRate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool shouldProduceResults;
@property (readonly) Class superclass;

+ (void)validateFormatIsPCM:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)_addRequest:(id)arg1 withObserver:(id)arg2 error:(id*)arg3;
- (void)_analyzeAudioBuffer:(id)arg1 atAudioFramePosition:(long long)arg2;
- (void)_removeRequest:(id)arg1;
- (bool)addRequest:(id)arg1 withObserver:(id)arg2 error:(id*)arg3;
- (void)analyzeAudioBuffer:(id)arg1 atAudioFramePosition:(long long)arg2;
- (void)analyzeAudioBufferList:(struct AudioBufferList { unsigned int x1; struct AudioBuffer { unsigned int x_2_1_1; unsigned int x_2_1_2; void *x_2_1_3; } x2[1]; }*)arg1 withAudioFrameCount:(unsigned int)arg2 atAudioFramePosition:(long long)arg3;
- (id)analyzerInfoForRequest:(id)arg1;
- (double)clientSampleRate;
- (long long)clientSampleTimeFromSampleTime:(long long)arg1 fromBox:(struct Box { int (**x1)(); struct Graph {} *x2; struct IsoGroup {} *x3; struct Subset {} *x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_5_1_1; } x5; long long x6; struct vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> > { struct InputPort {} *x_7_1_1; struct InputPort {} *x_7_1_2; struct __compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> > { struct InputPort {} *x_3_2_1; } x_7_1_3; } x7; struct vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> > { struct OutputPort {} *x_8_1_1; struct OutputPort {} *x_8_1_2; struct __compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> > { struct OutputPort {} *x_3_2_1; } x_8_1_3; } x8; }*)arg2;
- (void)completeAnalysis;
- (bool)configureAnalysisTreeWithFormat:(id)arg1;
- (bool)configureAnalyzer:(id)arg1 withFormat:(id)arg2;
- (id)createAnalyzerInfoForRequest:(id)arg1 resultsObserver:(id)arg2;
- (id)detailedDescription;
- (void)enterErrorState:(id)arg1;
- (void)handleAnalyzeAudioBufferError;
- (id)initWithFormat:(id)arg1;
- (void)removeAllRequests;
- (void)removeAnalyzerInfoForRequest:(id)arg1;
- (void)removeRequest:(id)arg1;
- (void)sendErrorToAllRequests:(id)arg1;
- (bool)shouldProduceResults;
- (void)updateProcessingTreeFormat:(id)arg1;
- (bool)updateTreeProcessingContexts;
- (void)writeDSPGraphDotFilesToDirectory:(id)arg1;

@end
