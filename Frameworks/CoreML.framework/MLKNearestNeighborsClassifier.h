/* Generated by EzioChiu
   Image: /System/Library/Frameworks/CoreML.framework/CoreML
 */

@interface MLKNearestNeighborsClassifier : MLModel <MLCompiledModelLoader, MLSpecificationCompiler, MLUpdatable, NSSecureCoding> {
    bool  _continueWithUpdate;
    NSObject * _defaultLabel;
    <MLNearestNeighborsIndex> * _index;
    long long  _indexType;
    long long  _labelType;
    NSArray * _labelsForDataPoints;
    NSOrderedSet * _labelsSet;
    NSString * _nearestDistancesFeatureName;
    NSString * _nearestLabelsFeatureName;
    unsigned long long  _numberOfDimensions;
    MLParameterContainer * _parameterContainer;
    MLUpdateProgressHandlers * _progressHandlers;
    NSObject<OS_dispatch_queue> * _progressHandlersDispatchQueue;
    NSDictionary * _updateParameters;
    long long  _weightingScheme;
}

@property (nonatomic) bool continueWithUpdate;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSObject *defaultLabel;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) <MLNearestNeighborsIndex> *index;
@property (nonatomic) long long indexType;
@property (nonatomic) long long labelType;
@property (nonatomic, retain) NSArray *labelsForDataPoints;
@property (nonatomic, retain) NSOrderedSet *labelsSet;
@property (nonatomic, retain) NSString *nearestDistancesFeatureName;
@property (nonatomic, retain) NSString *nearestLabelsFeatureName;
@property (nonatomic) unsigned long long numberOfDimensions;
@property (nonatomic, retain) MLParameterContainer *parameterContainer;
@property (nonatomic, retain) MLUpdateProgressHandlers *progressHandlers;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *progressHandlersDispatchQueue;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSDictionary *updateParameters;
@property (nonatomic) long long weightingScheme;

+ (id)compileSpecification:(struct _MLModelSpecification { struct shared_ptr<CoreML::Specification::Model> { struct Model {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg1 toArchive:(struct _MLModelOutputArchiver { struct OArchive { bool x_1_1_1; struct shared_ptr<Archiver::_OArchiveImpl> { struct _OArchiveImpl {} *x_2_2_1; struct __shared_weak_count {} *x_2_2_2; } x_1_1_2; struct map<std::__1::basic_string<char>, OArchive, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, OArchive> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, OArchive>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, OArchive>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, OArchive> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, OArchive>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, OArchive>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_1_1_3; } x1; }*)arg2 options:(id)arg3 error:(id*)arg4;
+ (id)compiledVersionForSpecification:(struct _MLModelSpecification { struct shared_ptr<CoreML::Specification::Model> { struct Model {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg1 options:(id)arg2 error:(id*)arg3;
+ (id)loadModelFromCompiledArchive:(struct _MLModelInputArchiver { struct IArchive { struct shared_ptr<Archiver::_IArchiveImpl> { struct _IArchiveImpl {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_1_1_1; struct map<std::__1::basic_string<char>, IArchive, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, IArchive> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, IArchive>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, IArchive>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, IArchive> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, IArchive>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, IArchive>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_1_1_2; } x1; }*)arg1 modelVersionInfo:(id)arg2 compilerVersionInfo:(id)arg3 configuration:(id)arg4 error:(id*)arg5;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)cancelUpdate;
- (void)computeClassProbabilities:(id*)arg1 from:(struct vector<std::__1::pair<unsigned long, float>, std::__1::allocator<std::__1::pair<unsigned long, float> > > { struct pair<unsigned long, float> {} *x1; struct pair<unsigned long, float> {} *x2; struct __compressed_pair<std::__1::pair<unsigned long, float> *, std::__1::allocator<std::__1::pair<unsigned long, float> > > { struct pair<unsigned long, float> {} *x_3_1_1; } x3; }*)arg2;
- (struct vector<std::__1::pair<unsigned long, float>, std::__1::allocator<std::__1::pair<unsigned long, float> > > { struct pair<unsigned long, float> {} *x1; struct pair<unsigned long, float> {} *x2; struct __compressed_pair<std::__1::pair<unsigned long, float> *, std::__1::allocator<std::__1::pair<unsigned long, float> > > { struct pair<unsigned long, float> {} *x_3_1_1; } x3; })computeKClosestLabels:(id)arg1;
- (bool)continueWithUpdate;
- (id)defaultLabel;
- (void)encodeWithCoder:(id)arg1;
- (void)extractNearestNeighborLabels:(id*)arg1 distances:(id*)arg2 from:(struct vector<std::__1::pair<unsigned long, float>, std::__1::allocator<std::__1::pair<unsigned long, float> > > { struct pair<unsigned long, float> {} *x1; struct pair<unsigned long, float> {} *x2; struct __compressed_pair<std::__1::pair<unsigned long, float> *, std::__1::allocator<std::__1::pair<unsigned long, float> > > { struct pair<unsigned long, float> {} *x_3_1_1; } x3; })arg3;
- (id)index;
- (long long)indexType;
- (id)initWithCoder:(id)arg1;
- (id)initWithDescription:(id)arg1 configuration:(id)arg2 parameters:(id)arg3 dataPoints:(struct vector<float, std::__1::allocator<float> > { float *x1; float *x2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_1_1; } x3; }*)arg4 labels:(id)arg5 error:(id*)arg6;
- (id)inputMultiArray:(id)arg1 error:(id*)arg2;
- (long long)labelType;
- (id)labelsForDataPoints;
- (id)labelsSet;
- (id)nearestDistancesFeatureName;
- (id)nearestLabelsFeatureName;
- (unsigned long long)numberOfDimensions;
- (id)packageOutputWithPredictedLabel:(id)arg1 classProbabilities:(id)arg2 nearestLabels:(id)arg3 nearestDistances:(id)arg4;
- (id)parameterContainer;
- (id)parameterValueForKey:(id)arg1 error:(id*)arg2;
- (id)predictionFromFeatures:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (id)progressHandlers;
- (id)progressHandlersDispatchQueue;
- (void)resumeUpdate;
- (void)resumeUpdateWithParameters:(id)arg1;
- (void)setContinueWithUpdate:(bool)arg1;
- (void)setDefaultLabel:(id)arg1;
- (void)setIndex:(id)arg1;
- (void)setIndexType:(long long)arg1;
- (void)setLabelType:(long long)arg1;
- (void)setLabelsForDataPoints:(id)arg1;
- (void)setLabelsSet:(id)arg1;
- (void)setNearestDistancesFeatureName:(id)arg1;
- (void)setNearestLabelsFeatureName:(id)arg1;
- (void)setNumberOfDimensions:(unsigned long long)arg1;
- (void)setParameterContainer:(id)arg1;
- (void)setProgressHandlers:(id)arg1;
- (void)setProgressHandlersDispatchQueue:(id)arg1;
- (void)setUpdateParameters:(id)arg1;
- (void)setUpdateProgressHandlers:(id)arg1 dispatchQueue:(id)arg2;
- (void)setWeightingScheme:(long long)arg1;
- (void)updateModelWithData:(id)arg1;
- (id)updateParameters;
- (long long)weightingScheme;
- (bool)writeToURL:(id)arg1 error:(id*)arg2;

@end
