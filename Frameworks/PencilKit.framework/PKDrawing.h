/* Generated by EzioChiu
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKDrawing : NSObject <CHQueryDelegate, CHRecognitionSessionDataSource, NSCopying, NSSecureCoding> {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  __bounds;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  __canvasBounds;
    NSMutableArray * _allStrokes;
    struct _PKStrokeID { 
        unsigned int clock; 
        unsigned char replicaUUID[16]; 
        unsigned int subclock; 
    }  _boundsVersion;
    NSArray * _forcedRecognitionLocales;
    NSMapTable * _ongoingQueries;
    bool  _recognitionEnabled;
    CHRecognitionSession * _recognitionSession;
    NSUUID * _replicaUUID;
    struct shared_ptr<PKProtobufUnknownFields> { 
        struct PKProtobufUnknownFields {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _unknownFields;
    NSUUID * _uuid;
    PKVectorTimestamp * _version;
    NSMutableArray * _visibleStrokes;
    PKVisualizationManager * _visualizationManager;
}

@property (nonatomic, retain) NSMutableArray *_allStrokes;
@property (nonatomic, readonly) bool _hasReplicaUUID;
@property (nonatomic) long long _orientation;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic) struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; } boundsVersion;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSMapTable *ongoingQueries;
@property (nonatomic, retain) CHRecognitionSession *recognitionSession;
@property (nonatomic, readonly) NSUUID *replicaUUID;
@property (readonly) Class superclass;
@property (setter=_setUUID:, nonatomic, retain) NSUUID *uuid;
@property (nonatomic, retain) PKVectorTimestamp *version;
@property (nonatomic, retain) PKVisualizationManager *visualizationManager;

+ (long long)_currentSerializationVersion;
+ (id)_defaultConversionQueue;
+ (id)_enabledLocales;
+ (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_orientationTransform:(long long)arg1 size:(struct CGSize { double x1; double x2; })arg2;
+ (id)_upgradeDrawingData:(id)arg1 queue:(id)arg2 completionBlock:(id /* block */)arg3;
+ (id)drawingWithData:(id)arg1;
+ (struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })newStrokeIDGreaterThan:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg1 forUUID:(id)arg2;
+ (void)sortStrokes:(id)arg1;
+ (bool)supportsSecureCoding;
+ (id)visibleStrokesFromStrokes:(id)arg1 inDrawing:(id)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)CHDrawing;
- (id)_addStroke:(id)arg1;
- (void)_addTestDataToUnknownFields;
- (id)_allStrokes;
- (id)_ascii;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_bounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_canvasBounds;
- (id)_clipAgainstLegacyCanvas:(id)arg1;
- (id)_clipStroke:(id)arg1;
- (double)_conversionScaleFactor;
- (id)_copyAndAddStroke:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (id)_copyAndAddStroke:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 ink:(id)arg3 isSequentialCopy:(bool)arg4;
- (id)_data;
- (id)_dataInUnknownFields;
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })_drawingStrokeInfo;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_eraserStrokeBounds;
- (bool)_hasReplicaUUID;
- (void)_imageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 scale:(double)arg2 completionHandler:(id /* block */)arg3;
- (id)_initWithData:(id)arg1 loadNonInkingStrokes:(bool)arg2 error:(id*)arg3;
- (id)_initWithUnzippedData:(id)arg1 error:(id*)arg2;
- (id)_initWithUnzippedData:(id)arg1 loadNonInkingStrokes:(bool)arg2 error:(id*)arg3;
- (void)_mergeStroke:(id)arg1;
- (long long)_minimumSerializationVersion;
- (bool*)_newAsciiBitfield;
- (id)_newStroke:(id)arg1 withInk:(id)arg2;
- (long long)_orientation;
- (struct CGSize { double x1; double x2; })_orientedDrawingSize;
- (void)_removeHiddenAndEraserStrokes;
- (void)_removeInvisibleStrokes;
- (void)_removeStroke:(id)arg1;
- (void)_setUUID:(id)arg1;
- (id)_stroke:(id)arg1 transformed:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 concat:(bool)arg3;
- (id)_strokes;
- (id)_strokesIntersectedByPoint:(struct CGPoint { double x1; double x2; })arg1 prevPoint:(struct CGPoint { double x1; double x2; })arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3;
- (void)_teardownRecognitionObjects;
- (void)_transformAllStrokes:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformForImageWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_unclippedStroke:(id)arg1;
- (struct CGSize { double x1; double x2; })_unscaledOrientedDrawingSize;
- (void)_updateRecognitionSession;
- (void)_updateStrokes:(id)arg1 updateBlock:(id /* block */)arg2;
- (void)_upgradeLegacyPenInks;
- (id)_upgradeOnQueue:(id)arg1 completionBlock:(id /* block */)arg2;
- (id)_visibleStrokes;
- (void)addNewStroke:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })boundsVersion;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })calculateStrokeBounds;
- (void)cancelOngoingRecognitionRequests;
- (id)copyAndAddStroke:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)data;
- (id)dataRepresentation;
- (id)dataRepresentationForStrokeIdentifier:(id)arg1;
- (id)dataRepresentationForStrokeProviderVersion:(id)arg1;
- (void)dealloc;
- (id)debugQuickLookObject;
- (id)description;
- (void)didMergeWithDrawing:(id)arg1;
- (id)drawingByAppendingDrawing:(id)arg1;
- (id)drawingByApplyingTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)forcedRecognitionLocales;
- (unsigned long long)hash;
- (id)imageFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 scale:(double)arg2;
- (id)indexableContent;
- (id)init;
- (id)initWithArchive:(const struct Drawing { int (**x1)(); struct unique_ptr<drawing::Rectangle, std::__1::default_delete<drawing::Rectangle> > { struct __compressed_pair<drawing::Rectangle *, std::__1::default_delete<drawing::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_2_1_1; } x2; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID {} *x_1_2_1; } x_3_1_1; } x3; struct PtrVector<drawing::Ink> { struct vector<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> >, std::__1::allocator<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > > > { struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > {} *x_1_2_1; struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > *, std::__1::allocator<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > > > { struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > {} *x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 loadNonInkingStrokes:(bool)arg2 error:(id*)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithData:(id)arg1 error:(id*)arg2;
- (id)initWithDrawing:(id)arg1;
- (id)initWithLegacyArchive:(const struct Drawing { int (**x1)(); struct PtrVector<legacy_drawing::Command> { struct vector<std::__1::unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> >, std::__1::allocator<std::__1::unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > > > { struct unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > {} *x_1_2_1; struct unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > *, std::__1::allocator<std::__1::unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > > > { struct unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > {} *x_3_3_1; } x_1_2_3; } x_2_1_1; } x2; double x3; struct unique_ptr<legacy_drawing::VectorTimestamp, std::__1::default_delete<legacy_drawing::VectorTimestamp> > { struct __compressed_pair<legacy_drawing::VectorTimestamp *, std::__1::default_delete<legacy_drawing::VectorTimestamp> > { struct VectorTimestamp {} *x_1_2_1; } x_4_1_1; } x4; }*)arg1;
- (id)initWithLegacyData:(id)arg1;
- (id)initWithStrokes:(id)arg1 fromDrawing:(id)arg2;
- (id)initWithV1Archive:(const struct Drawing { int (**x1)(); struct unique_ptr<drawingV1::Rectangle, std::__1::default_delete<drawingV1::Rectangle> > { struct __compressed_pair<drawingV1::Rectangle *, std::__1::default_delete<drawingV1::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_2_1_1; } x2; struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > { struct __compressed_pair<drawingV1::StrokeID *, std::__1::default_delete<drawingV1::StrokeID> > { struct StrokeID {} *x_1_2_1; } x_3_1_1; } x3; struct PtrVector<drawingV1::Ink> { struct vector<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> >, std::__1::allocator<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > > > { struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > {} *x_1_2_1; struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > *, std::__1::allocator<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > > > { struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > {} *x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 loadNonInkingStrokes:(bool)arg2;
- (id)initWithV1Data:(id)arg1 loadNonInkingStrokes:(bool)arg2;
- (id)insertNewTestStroke;
- (void)invalidateStrokeBounds;
- (void)invalidateVisibleStrokes;
- (bool)isEqual:(id)arg1;
- (unsigned long long)mergeWithDrawing:(id)arg1;
- (struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })newStrokeIDGreaterThan:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg1;
- (id)ongoingQueries;
- (void)performSearchQuery:(id)arg1 withBlock:(id /* block */)arg2;
- (void)queryDidUpdateResult:(id)arg1;
- (bool)recognitionEnabled;
- (id)recognitionSession;
- (id)replicaUUID;
- (void)saveToArchive:(struct Drawing { int (**x1)(); struct unique_ptr<drawing::Rectangle, std::__1::default_delete<drawing::Rectangle> > { struct __compressed_pair<drawing::Rectangle *, std::__1::default_delete<drawing::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_2_1_1; } x2; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID {} *x_1_2_1; } x_3_1_1; } x3; struct PtrVector<drawing::Ink> { struct vector<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> >, std::__1::allocator<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > > > { struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > {} *x_1_2_1; struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > *, std::__1::allocator<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > > > { struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > {} *x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 withPathData:(bool)arg2;
- (unsigned int)saveToV1Archive:(struct Drawing { int (**x1)(); struct unique_ptr<drawingV1::Rectangle, std::__1::default_delete<drawingV1::Rectangle> > { struct __compressed_pair<drawingV1::Rectangle *, std::__1::default_delete<drawingV1::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_2_1_1; } x2; struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > { struct __compressed_pair<drawingV1::StrokeID *, std::__1::default_delete<drawingV1::StrokeID> > { struct StrokeID {} *x_1_2_1; } x_3_1_1; } x3; struct PtrVector<drawingV1::Ink> { struct vector<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> >, std::__1::allocator<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > > > { struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > {} *x_1_2_1; struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > *, std::__1::allocator<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > > > { struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > {} *x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 withPathData:(bool)arg2;
- (id)serialize;
- (id)serializeTransiently;
- (id)serializeWithVersion:(long long)arg1;
- (void)setBoundsVersion:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg1;
- (void)setForcedRecognitionLocales:(id)arg1;
- (void)setNeedsRecognitionUpdate;
- (void)setOngoingQueries:(id)arg1;
- (void)setRecognitionEnabled:(bool)arg1;
- (void)setRecognitionSession:(id)arg1;
- (id)setStroke:(id)arg1 hidden:(bool)arg2;
- (id)setStroke:(id)arg1 ink:(id)arg2;
- (id)setStroke:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 concat:(bool)arg3;
- (void)setStrokeSortIDForInsertion:(id)arg1;
- (void)setStrokeSubstrokes:(id)arg1;
- (void)setStrokes:(id)arg1 hidden:(bool)arg2;
- (void)setStrokes:(id)arg1 inks:(id)arg2;
- (void)setStrokes:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 concat:(bool)arg3;
- (void)setVersion:(id)arg1;
- (void)setVisualizationManager:(id)arg1;
- (void)set_allStrokes:(id)arg1;
- (void)set_canvasBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)set_orientation:(long long)arg1;
- (id)sliceWithEraseStroke:(id)arg1;
- (void)sortStrokes;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })strokeBounds;
- (id)strokeForIdentifier:(id)arg1;
- (id)strokeIdentifierFromData:(id)arg1;
- (id)strokeProviderSnapshot;
- (id)strokeProviderVersionFromData:(id)arg1;
- (struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })strokeVersionForUpdatedStroke:(id)arg1;
- (id)strokes;
- (id)strokesIntersectedByPoint:(struct CGPoint { double x1; double x2; })arg1 prevPoint:(struct CGPoint { double x1; double x2; })arg2 minThreshold:(double)arg3 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 onscreenVisibleStrokes:(id)arg5;
- (id)strokesIntersectedByPoint:(struct CGPoint { double x1; double x2; })arg1 prevPoint:(struct CGPoint { double x1; double x2; })arg2 onscreenVisibleStrokes:(id)arg3;
- (id)updateStroke:(id)arg1 updater:(id /* block */)arg2;
- (void)updateStrokes:(id /* block */)arg1;
- (id)uuid;
- (id)v1SerializeWithPathData:(bool)arg1;
- (id)v1SerializeWithPathData:(bool)arg1 toVersion:(unsigned int*)arg2;
- (id)version;
- (id)visibleStrokeForInsertingStroke:(id)arg1;
- (id)visibleStrokeForInsertingStroke:(id)arg1 ink:(id)arg2;
- (id)visibleStrokeForInsertingStroke:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 ink:(id)arg3;
- (id)visibleStrokes;
- (id)visualizationManager;
- (void)willMergeWithDrawing:(id)arg1;

@end
