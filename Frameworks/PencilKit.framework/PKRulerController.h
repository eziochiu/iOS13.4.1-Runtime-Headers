/* Generated by EzioChiu
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKRulerController : NSObject <UIGestureRecognizerDelegate> {
    bool  _canRulerSnapToAngle;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _defaultRulerTransform;
    <PKRulerDelegate> * _delegate;
    bool  _isInteractingWithRuler;
    bool  _lastTouchWasMaskedByRuler;
    struct { 
        int arcType; 
        bool before; 
        double snapAngle; 
    }  _previousRulerState;
    PKRulerGestureRecognizer * _rulerGestureRecognizer;
    <PKRulerHostingDelegate> * _rulerHostingDelegate;
    UIView * _rulerHostingView;
    bool  _rulerIsRotating;
    PKRulerLayer * _rulerLayer;
    bool  _rulerSnappedToAngle;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _rulerStartTransform;
    struct { 
        int arcType; 
        bool before; 
        double snapAngle; 
    }  _rulerState;
    PKRulerView * _rulerView;
    bool  _rulerWasShownViaGesture;
    UIImpactFeedbackGenerator * _snapImpactBehavior;
    bool  _wantsSharedRuler;
}

@property (nonatomic) bool canRulerSnapToAngle;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } defaultRulerTransform;
@property (nonatomic) <PKRulerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isInteractingWithRuler;
@property (nonatomic) bool lastTouchWasMaskedByRuler;
@property (nonatomic) struct { int x1; bool x2; double x3; } previousRulerState;
@property (nonatomic, retain) PKRulerGestureRecognizer *rulerGestureRecognizer;
@property (nonatomic) <PKRulerHostingDelegate> *rulerHostingDelegate;
@property (nonatomic) bool rulerIsRotating;
@property (nonatomic, retain) PKRulerLayer *rulerLayer;
@property (nonatomic, readonly) bool rulerSelected;
@property (nonatomic) bool rulerSnappedToAngle;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } rulerStartTransform;
@property (nonatomic) struct { int x1; bool x2; double x3; } rulerState;
@property (nonatomic, retain) PKRulerView *rulerView;
@property (nonatomic) bool rulerWasShownViaGesture;
@property (nonatomic, retain) UIImpactFeedbackGenerator *snapImpactBehavior;
@property (readonly) Class superclass;

+ (id)sharedRulerView;

- (void).cxx_destruct;
- (void)_adjustViewForHostingRulerView;
- (void)_configureRuler;
- (bool)_enableRulerOnCanvasIfSharedRulerIsVisible;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rulerFrame;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformFromRulerViewToTiledView;
- (id)_viewForHostingRuler;
- (void)adjustFrames;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })angleSnapRulerTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 aroundOrigin:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGPoint { double x1; double x2; })applyTransformToTouchLocation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)canRulerSnapToAngle;
- (void)cancelNonDrawingGestures;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })canvasTransform;
- (void)dealloc;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })defaultRulerTransform;
- (id)delegate;
- (void)drawingBegan:(id)arg1;
- (void)drawingCancelled:(id /* block */)arg1;
- (void)drawingEnded:(id)arg1;
- (void)drawingMoved:(id)arg1 withEvent:(id)arg2;
- (void)eatPencilGesture:(id)arg1;
- (void)endRulerDrawing;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })ensureRulerFullyOnscreen:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (double)getRulerCenterTValueOnScreenForTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)hideRuler;
- (void)hideRulerAnimated:(bool)arg1;
- (void)hideUI;
- (bool)hitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)initWithDelegate:(id)arg1;
- (bool)isInteractingWithRuler;
- (bool)lastTouchWasMaskedByRuler;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })pixelSnapRulerTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct { int x1; bool x2; double x3; })previousRulerState;
- (void)resetRuler;
- (void)resetRulerTouches;
- (void)resetRulerTransform;
- (id)rulerGestureRecognizer;
- (id)rulerHostingDelegate;
- (bool)rulerIsRotating;
- (id)rulerLayer;
- (void)rulerMoveGesture:(id)arg1;
- (bool)rulerSelected;
- (bool)rulerSnappedToAngle;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })rulerStartTransform;
- (struct { int x1; bool x2; double x3; })rulerState;
- (id)rulerView;
- (bool)rulerWasShownViaGesture;
- (void)setCanRulerSnapToAngle:(bool)arg1;
- (void)setDefaultRulerTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setIsInteractingWithRuler:(bool)arg1;
- (void)setLastTouchWasMaskedByRuler:(bool)arg1;
- (void)setPreviousRulerState:(struct { int x1; bool x2; double x3; })arg1;
- (void)setRulerGestureRecognizer:(id)arg1;
- (void)setRulerHostingDelegate:(id)arg1;
- (void)setRulerIsRotating:(bool)arg1;
- (void)setRulerLayer:(id)arg1;
- (void)setRulerSnappedToAngle:(bool)arg1;
- (void)setRulerStartTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setRulerState:(struct { int x1; bool x2; double x3; })arg1;
- (void)setRulerView:(id)arg1;
- (void)setRulerWasShownViaGesture:(bool)arg1;
- (void)setSnapImpactBehavior:(id)arg1;
- (void)setupGestures;
- (void)showRuler;
- (id)snapImpactBehavior;
- (void)startRulerDrawing;
- (void)updateAngle:(id)arg1;
- (void)updateRuler:(id)arg1;

@end
