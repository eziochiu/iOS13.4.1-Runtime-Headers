/* Generated by EzioChiu
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKTiledView : UIView <PKDrawableView, PKRulerDelegate, PKRulerHostingDelegate, PKTiledCanvasViewDelegate, UIDropInteractionDelegate_Private, UIGestureRecognizerDelegate, UIScrollViewDelegate, _UIScrollViewLayoutObserver, _UIScrollViewScrollObserver> {
    long long  __maxFileFormatVersion;
    long long  _aggd_cachedVisibleStrokeCount;
    bool  _aggd_didMergeWithCollaborator;
    UIView * _attachmentContainerView;
    NSArray * _cachedAdditionalStrokes;
    NSUUID * _cachedDrawingUUIDForAdditionalStrokes;
    PKVectorTimestamp * _cachedDrawingVersionForAdditionalStrokes;
    NSArray * _cachedVisibleStrokesWithAdditionalStrokesForDirtyDrawing;
    PKTiledCanvasView * _canvasView;
    UITapGestureRecognizer * _clearSelectionGestureRecognizer;
    PKDrawing * _createdDrawingForTouchThatHitNothing;
    PKDrawing * _currentDrawingBeingCopiedToCanvas;
    NSObject<PKTiledViewDelegate> * _delegate;
    id /* block */  _didScrollBlock;
    PKDrawing * _dirtyDrawing;
    UITouch * _drawingTouchThatHitNothing;
    SEL  _drawingUndoSelector;
    id  _drawingUndoTarget;
    UIDropInteraction * _dropInteraction;
    bool  _fingerDrawingEnabled;
    UIView * _gestureView;
    bool  _isLayingOut;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastContentOffset;
    double  _lastZoomScale;
    PKLinedPaper * _linedPaper;
    PKAttachmentView * _liveAttachment;
    struct CGPoint { 
        double x; 
        double y; 
    }  _liveStrokeContentOffset;
    PKRulerController * _rulerController;
    bool  _rulerEnabled;
    <PKRulerHostingDelegate> * _rulerHostingDelegate;
    UIScrollView * _scrollView;
    PKSelectionController * _selectionController;
    bool  _shouldHideCanvasAfterScroll;
    bool  _showDebugOutlines;
    PKController * _tileController;
    long long  _tileLevel;
    double  _tileScale;
    double  _tileSize;
    NSMutableArray * _undoManagersRegisteredWith;
}

@property (nonatomic, readonly) bool _hasSelection;
@property (nonatomic) long long _maxFileFormatVersion;
@property (nonatomic) long long aggd_cachedVisibleStrokeCount;
@property (nonatomic) bool aggd_didMergeWithCollaborator;
@property (nonatomic) UIView *attachmentContainerView;
@property (nonatomic, copy) NSArray *cachedAdditionalStrokes;
@property (nonatomic, copy) NSUUID *cachedDrawingUUIDForAdditionalStrokes;
@property (nonatomic, copy) PKVectorTimestamp *cachedDrawingVersionForAdditionalStrokes;
@property (nonatomic, copy) NSArray *cachedVisibleStrokesWithAdditionalStrokesForDirtyDrawing;
@property (nonatomic, retain) PKTiledCanvasView *canvasView;
@property (nonatomic, readonly) UITapGestureRecognizer *clearSelectionGestureRecognizer;
@property (nonatomic, retain) PKDrawing *createdDrawingForTouchThatHitNothing;
@property (nonatomic) PKDrawing *currentDrawingBeingCopiedToCanvas;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) NSObject<PKTiledViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) id /* block */ didScrollBlock;
@property (nonatomic, retain) UITouch *drawingTouchThatHitNothing;
@property (nonatomic) SEL drawingUndoSelector;
@property (nonatomic) id drawingUndoTarget;
@property (getter=isFingerDrawingEnabled, nonatomic) bool fingerDrawingEnabled;
@property (nonatomic, retain) UIView *gestureView;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) PKInk *ink;
@property (nonatomic) bool insertSpaceEnabled;
@property (nonatomic) bool isLayingOut;
@property (nonatomic) struct CGPoint { double x1; double x2; } lastContentOffset;
@property (nonatomic) double lastZoomScale;
@property (nonatomic, copy) PKLinedPaper *linedPaper;
@property (nonatomic, retain) PKAttachmentView *liveAttachment;
@property (nonatomic) struct CGPoint { double x1; double x2; } liveStrokeContentOffset;
@property (nonatomic, retain) UIImage *paperTexture;
@property (nonatomic, readonly) PKRulerController *rulerController;
@property (nonatomic) bool rulerEnabled;
@property (nonatomic) <PKRulerHostingDelegate> *rulerHostingDelegate;
@property (nonatomic) UIScrollView *scrollView;
@property (nonatomic, readonly) PKSelectionController *selectionController;
@property (nonatomic) bool shouldHideCanvasAfterScroll;
@property (nonatomic) bool showDebugOutlines;
@property (readonly) Class superclass;
@property (nonatomic, retain) PKController *tileController;
@property (nonatomic) long long tileLevel;
@property (nonatomic) double tileScale;
@property (nonatomic) double tileSize;
@property (nonatomic, retain) NSMutableArray *undoManagersRegisteredWith;

+ (id)newInlineDrawing;
+ (bool)showDebugOutlines;

- (void).cxx_destruct;
- (void)_addGestureToClearSelection;
- (void)_canvasView:(id)arg1 didFinishRenderingStrokeOnRenderQueue:(id)arg2 inDrawing:(id)arg3;
- (void)_canvasView:(id)arg1 showEditMenuFromLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)_canvasViewDidEraseStrokes:(id)arg1;
- (void)_canvasViewWillBeginDrawing:(id)arg1;
- (void)_clearSelectionIfNecessary;
- (void)_copyFromCanvas:(id)arg1 intoAttachment:(id)arg2 hideCanvas:(bool)arg3 stroke:(id)arg4;
- (id)_currentStroke;
- (void)_didAddDrawingAttachmentView;
- (id)_drawingForUUID:(id)arg1;
- (long long)_dropInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (void)_flushCaches;
- (bool)_hasSelection;
- (void)_hideCanvas;
- (bool)_isValidDropPointForStrokes:(struct CGPoint { double x1; double x2; })arg1;
- (void)_layoutSubviews;
- (void)_layoutSubviewsUpdateTilesForRendering:(bool)arg1;
- (long long)_maxFileFormatVersion;
- (void)_observeScrollViewDidScroll:(id)arg1;
- (void)_resetDrawingState;
- (void)_resetSelectedStrokeStateForRenderer;
- (void)_scrollViewDidLayoutSubviews:(id)arg1;
- (void)_selectionRefreshWithChangeToDrawings:(id)arg1 completion:(id /* block */)arg2;
- (void)_setAdditionalStrokes:(id)arg1 inDrawing:(id)arg2 completion:(id /* block */)arg3;
- (bool)_shouldUpdateHeightOfAttachments;
- (id)_tilesForAttachment:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 invert:(bool)arg3;
- (void)_toggleDebugPane:(id)arg1;
- (long long)_totalVisibleStrokes;
- (void)_transientlyUpdateHeightOfAttachment:(id)arg1 delta:(double)arg2;
- (void)_updateAllowedTouchesForDrawingGestureRecognizer;
- (void)_updateAttachmentHeightIfNecessaryForDrawing:(id)arg1;
- (bool)_updateHeightOfAttachmentIfNecessary:(id)arg1;
- (id)_visibleTilesForAttachment:(id)arg1 includePartiallyVisible:(bool)arg2;
- (long long)aggd_cachedVisibleStrokeCount;
- (bool)aggd_didMergeWithCollaborator;
- (id)attachmentContainerView;
- (id)attachmentForUUID:(id)arg1;
- (id)attachments;
- (void)blitOldTilesIntoNewTiles;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForDrawing:(id)arg1;
- (id)cachedAdditionalStrokes;
- (id)cachedDrawingUUIDForAdditionalStrokes;
- (id)cachedDrawingVersionForAdditionalStrokes;
- (id)cachedVisibleStrokesWithAdditionalStrokesForDirtyDrawing;
- (bool)canAddStroke;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)cancelSelection;
- (void)cancelTileGenerationInvalidateTiles:(bool)arg1;
- (id)canvasView;
- (void)canvasView:(id)arg1 beganStroke:(id)arg2;
- (void)canvasView:(id)arg1 cancelledStroke:(id)arg2;
- (void)canvasView:(id)arg1 drawingDidChange:(id)arg2;
- (void)canvasView:(id)arg1 endedStroke:(id)arg2;
- (void)canvasView:(id)arg1 registerUndoCommand:(id)arg2;
- (bool)canvasView:(id)arg1 shouldBeginDrawingWithTouch:(id)arg2;
- (void)canvasViewDidBeginDrawing:(id)arg1;
- (void)canvasViewDidEndDrawing:(id)arg1;
- (void)canvasViewWillBeginNewStroke:(id)arg1 withTouch:(id)arg2;
- (id)clearSelectionGestureRecognizer;
- (void)copy:(id)arg1;
- (id)createdDrawingForTouchThatHitNothing;
- (id)currentDrawingBeingCopiedToCanvas;
- (void)cut:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (void)delete:(id)arg1;
- (id /* block */)didScrollBlock;
- (id)drawingController;
- (id)drawingGestureRecognizer;
- (double)drawingScale;
- (id)drawingTouchThatHitNothing;
- (SEL)drawingUndoSelector;
- (id)drawingUndoTarget;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (void)duplicate:(id)arg1;
- (id)generateTile:(struct CGPoint { double x1; double x2; })arg1 inAttachment:(id)arg2 rendering:(bool)arg3 offscreen:(bool)arg4;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)gestureView;
- (void)getAttachment:(id)arg1 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg3 paperTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg4;
- (void)getAttachment:(id)arg1 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2 strokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg3 paperTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg4 scrollViewContentOffset:(struct CGPoint { double x1; double x2; })arg5;
- (id)hitAttachment:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitAttachment:(struct CGPoint { double x1; double x2; })arg1 includeStandinAttachment:(bool)arg2;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initInScrollView:(id)arg1;
- (id)ink;
- (bool)insertAttachmentIfInBlankSpace:(struct CGPoint { double x1; double x2; })arg1;
- (void)insertCanvasView:(id)arg1 intoScrollView:(id)arg2;
- (bool)insertSpaceEnabled;
- (bool)invertColors;
- (bool)isDrawing;
- (bool)isFingerDrawingEnabled;
- (bool)isLayingOut;
- (struct CGPoint { double x1; double x2; })lastContentOffset;
- (double)lastZoomScale;
- (void)layoutSubviews;
- (id)linedPaper;
- (id)liveAttachment;
- (struct CGPoint { double x1; double x2; })liveStrokeContentOffset;
- (bool)needToUpdateViewFrame;
- (void)newCanvasView;
- (id)paperTexture;
- (void)paste:(id)arg1;
- (void)performUndo:(id)arg1;
- (struct CGPoint { double x1; double x2; })pointInStrokeSpace:(struct CGPoint { double x1; double x2; })arg1 inDrawing:(id)arg2;
- (void)purgeNonVisibleTiles;
- (void)registerUndoCommand:(id)arg1;
- (void)renderAttachment:(id)arg1 intoCanvas:(id)arg2 showing:(bool)arg3;
- (void)replaceInkTexture:(id)arg1 image:(struct CGImage { }*)arg2;
- (void)resizeTiles;
- (id)rulerController;
- (bool)rulerEnabled;
- (bool)rulerHostWantsSharedRuler;
- (id)rulerHostingDelegate;
- (id)rulerHostingView;
- (id)rulerView;
- (id)scrollView;
- (id)selectionController;
- (void)setAggd_cachedVisibleStrokeCount:(long long)arg1;
- (void)setAggd_didMergeWithCollaborator:(bool)arg1;
- (void)setAttachmentContainerView:(id)arg1;
- (void)setCachedAdditionalStrokes:(id)arg1;
- (void)setCachedDrawingUUIDForAdditionalStrokes:(id)arg1;
- (void)setCachedDrawingVersionForAdditionalStrokes:(id)arg1;
- (void)setCachedVisibleStrokesWithAdditionalStrokesForDirtyDrawing:(id)arg1;
- (void)setCanvasView:(id)arg1;
- (void)setCreatedDrawingForTouchThatHitNothing:(id)arg1;
- (void)setCurrentDrawingBeingCopiedToCanvas:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDidScrollBlock:(id /* block */)arg1;
- (void)setDrawingTouchThatHitNothing:(id)arg1;
- (void)setDrawingUndoSelector:(SEL)arg1;
- (void)setDrawingUndoTarget:(id)arg1;
- (void)setFingerDrawingEnabled:(bool)arg1;
- (void)setGestureView:(id)arg1;
- (void)setInk:(id)arg1;
- (void)setInsertSpaceEnabled:(bool)arg1;
- (void)setIsLayingOut:(bool)arg1;
- (void)setLastContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLastZoomScale:(double)arg1;
- (void)setLinedPaper:(id)arg1;
- (void)setLiveAttachment:(id)arg1;
- (void)setLiveStrokeContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setPaperTexture:(id)arg1;
- (void)setRulerEnabled:(bool)arg1;
- (void)setRulerHostingDelegate:(id)arg1;
- (void)setScrollView:(id)arg1;
- (void)setSelectedStrokesColor:(id)arg1;
- (void)setShouldHideCanvasAfterScroll:(bool)arg1;
- (void)setShowDebugOutlines:(bool)arg1;
- (void)setTileController:(id)arg1;
- (void)setTileLevel:(long long)arg1;
- (void)setTileScale:(double)arg1;
- (void)setTileSize:(double)arg1;
- (void)setUndoManagersRegisteredWith:(id)arg1;
- (void)set_maxFileFormatVersion:(long long)arg1;
- (bool)shouldHideCanvasAfterScroll;
- (bool)showDebugOutlines;
- (id)standInAttachmentView;
- (void)startedDrawingInBlankSpaceWithTouch:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })strokeTransform;
- (void)swapOffscreenCallback:(id /* block */)arg1;
- (id)tileController;
- (id)tileForOffset:(struct CGPoint { double x1; double x2; })arg1 inAttachment:(id)arg2 offscreen:(bool)arg3;
- (bool)tileIsVisibleForOffset:(struct CGPoint { double x1; double x2; })arg1 inAttachment:(id)arg2 distanceToMiddle:(double*)arg3;
- (long long)tileLevel;
- (double)tileScale;
- (double)tileSize;
- (id)topView;
- (void)traitCollectionDidChange:(id)arg1;
- (id)undoManagersRegisteredWith;
- (void)updateTilesForVisibleRect;
- (void)updateTilesForVisibleRectForceIfZooming:(bool)arg1;
- (void)updateTilesForVisibleRectOffscreenWithCallback:(id /* block */)arg1;
- (void)updateTilesForVisibleRectRendering:(bool)arg1 offscreen:(bool)arg2;
- (id)visibleAttachments;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleOnscreenBoundsForDrawing:(id)arg1;
- (id)visibleStrokesOnscreen:(id)arg1 forDrawing:(id)arg2;

@end
