/* Generated by EzioChiu
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKInkingTool : PKTool

@property (nonatomic, readonly) UIColor *color;
@property (nonatomic, readonly) NSString *inkType;
@property (nonatomic, readonly) double width;

+ (double)_calculateEdgeWidthForWeight:(double)arg1 type:(id)arg2;
+ (double)_calculateWidthForWeight:(double)arg1 type:(id)arg2;
+ (void)_computeWeightToWidthMapFor:(id)arg1 in:(struct unordered_map<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; } x1; }*)arg2;
+ (struct { struct _PKStrokePoint { double x_1_1_1; struct CGPoint { double x_2_2_1; double x_2_2_2; } x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; double x_1_1_7; double x_1_1_8; double x_1_1_9; } x1; bool x2; long long x3; double x4; double x5; double x6; double x7; id x8; })_contextForStroke:(id)arg1 weight:(double)arg2 type:(id)arg3;
+ (double)_weightForWidth:(double)arg1 type:(id)arg2;
+ (struct unordered_map<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, PKFunctionPiecewiseSimpleLinear>, void *> *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; } x1; }*)_weightToWidthMap;
+ (double)_widthForWeight:(double)arg1 type:(id)arg2;
+ (id)convertColor:(id)arg1 fromUserInterfaceStyle:(long long)arg2 to:(long long)arg3;
+ (double)defaultWidthForInkType:(id)arg1;
+ (double)maximumWidthForInkType:(id)arg1;
+ (double)minimumWidthForInkType:(id)arg1;

- (id)color;
- (id)initWithInkType:(id)arg1 color:(id)arg2;
- (id)initWithInkType:(id)arg1 color:(id)arg2 width:(double)arg3;
- (id)inkType;
- (double)width;

@end
