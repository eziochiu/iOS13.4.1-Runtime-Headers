/* Generated by EzioChiu
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKStroke : NSObject <NSCopying, NSMutableCopying> {
    _PKStrokeClipPlane * __clipPlane;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cachedBounds;
    struct { 
        union { 
            struct { 
                unsigned int isHidden : 1; 
                unsigned int hiddenInherited : 1; 
                unsigned int inkInherited : 1; 
                unsigned int transformInherited : 1; 
                unsigned int isNewCopy : 1; 
            } ; 
            unsigned long long allFlags; 
        } ; 
    }  _flags;
    PKInk * _ink;
    struct _PKStrokeID { 
        unsigned int clock; 
        unsigned char replicaUUID[16]; 
        unsigned int subclock; 
    }  _sortID;
    _PKStrokeData * _strokeData;
    NSUUID * _strokeUUID;
    NSArray * _substrokes;
    struct _PKStrokeID { 
        unsigned int clock; 
        unsigned char replicaUUID[16]; 
        unsigned int subclock; 
    }  _substrokesVersion;
    struct { 
        double start; 
        double end; 
    }  _tRange;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _transform;
    struct shared_ptr<PKProtobufUnknownFields> { 
        struct PKProtobufUnknownFields {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _unknownFields;
    struct _PKStrokeID { 
        unsigned int clock; 
        unsigned char replicaUUID[16]; 
        unsigned int subclock; 
    }  _version;
}

@property (setter=_setBounds:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _bounds;
@property (nonatomic, retain) _PKStrokeClipPlane *_clipPlane;
@property (nonatomic) struct { union { struct { unsigned int x_1_2_1 : 1; unsigned int x_1_2_2 : 1; unsigned int x_1_2_3 : 1; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 1; } x_1_1_1; unsigned long long x_1_1_2; } x1; } _flags;
@property (getter=_isHidden, setter=_setHidden:, nonatomic) bool _hidden;
@property (nonatomic, readonly) bool _isFullyHidden;
@property (getter=_isNewCopy, setter=_setIsNewCopy:, nonatomic) bool _isNewCopy;
@property (nonatomic, readonly) unsigned int _randomSeed;
@property (nonatomic) struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; } _sortID;
@property (nonatomic, retain) _PKStrokeData *_strokeData;
@property (nonatomic, readonly) NSUUID *_strokeDataUUID;
@property (setter=_setStrokeUUID:, nonatomic, retain) NSUUID *_strokeUUID;
@property (nonatomic, retain) NSArray *_substrokes;
@property (nonatomic) struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; } _substrokesVersion;
@property (nonatomic) struct { double x1; double x2; } _tRange;
@property (setter=_setTransform:, nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } _transform;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _untransformedBounds;
@property (nonatomic) struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; } _version;
@property (nonatomic, retain) PKInk *ink;
@property (nonatomic, readonly) double timestamp;

+ (long long)_asciiBitfieldIndexForX:(long long)arg1 y:(long long)arg2 width:(long long)arg3;
+ (long long)_asciiDimensionForBoundsDimension:(double)arg1;
+ (struct PKCompressedStrokePoint { struct _PKPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; })_compressStrokePoint:(struct _PKStrokePoint { double x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; })arg1 withTimestamp:(double)arg2;
+ (struct _PKStrokePoint { double x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; })_decompressStrokePoint:(struct PKCompressedStrokePoint { struct _PKPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; })arg1 withTimestamp:(double)arg2;
+ (id)_testStrokeFromPoints:(struct PKCompressedStrokePoint { struct _PKPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; }*)arg1 length:(long long)arg2 ink:(id)arg3;
+ (id)copyStrokes:(id)arg1 hidden:(bool)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_addTestDataToUnknownFields;
- (void)_addVisibleSubstrokesTo:(id)arg1;
- (void)_appendPointsOfInterestForSelection:(struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; }*)arg1;
- (id)_ascii;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_bounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_calculateBounds;
- (id)_clipPlane;
- (struct unique_ptr<std::__1::vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> >, std::__1::default_delete<std::__1::vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> > > > { struct __compressed_pair<std::__1::vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> > *, std::__1::default_delete<std::__1::vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> > > > { struct vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> > {} *x_1_1_1; } x1; })_compressedStrokePoints;
- (void)_consumeRenderVertexes:(id /* block */)arg1;
- (bool)_containsSamePointsAsStroke:(id)arg1;
- (id)_dataInUnknownFields;
- (struct { union { struct { unsigned int x_1_2_1 : 1; unsigned int x_1_2_2 : 1; unsigned int x_1_2_3 : 1; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 1; } x_1_1_1; unsigned long long x_1_1_2; } x1; })_flags;
- (id)_initWithPath:(struct CGPath { }*)arg1 ink:(id)arg2 inputScale:(double)arg3;
- (id)_initWithPath:(struct CGPath { }*)arg1 ink:(id)arg2 inputScale:(double)arg3 velocityForDistanceFunction:(id /* block */)arg4;
- (id)_initWithStroke:(id)arg1 strokeData:(id)arg2;
- (id)_ink;
- (long long)_inputType;
- (void)_invalidateBounds;
- (bool)_isFullyHidden;
- (bool)_isHidden;
- (bool)_isNewCopy;
- (struct CGPoint { double x1; double x2; })_locationAtIndex:(unsigned long long)arg1;
- (struct CGPoint { double x1; double x2; })_locationAtIndex:(unsigned long long)arg1 applyStrokeTransform:(bool)arg2;
- (id)_mergeUnparentedWithStroke:(id)arg1;
- (id)_mergeWithStroke:(id)arg1;
- (bool*)_newAsciiBitfield;
- (bool*)_newAsciiBitfieldWithWidth:(long long)arg1 height:(long long)arg2;
- (struct CGPath { }*)_newPathRepresentation;
- (const struct _PKStrokeDataPoints { struct _PKStrokeDataPointsPrivate {} *x1; struct PKCompressedStrokePoint { struct _PKPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; float x_2_1_2; float x_2_1_3; unsigned short x_2_1_4; unsigned short x_2_1_5; unsigned short x_2_1_6; unsigned short x_2_1_7; unsigned short x_2_1_8; unsigned short x_2_1_9; } x2; unsigned long long x3; }*)_points;
- (unsigned long long)_pointsCount;
- (unsigned int)_randomSeed;
- (void)_setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setHidden:(bool)arg1;
- (void)_setInk:(id)arg1;
- (void)_setIsNewCopy:(bool)arg1;
- (void)_setStrokeUUID:(id)arg1;
- (void)_setTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (bool)_shouldBeClippedAgainstLegacyCanvas;
- (id)_sliceWithSlicingBlock:(id /* block */)arg1 replica:(id)arg2;
- (struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })_sortID;
- (id)_strokeData;
- (id)_strokeDataUUID;
- (id)_strokeUUID;
- (id)_substrokeWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_substrokes;
- (struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })_substrokesVersion;
- (struct { double x1; double x2; })_tRange;
- (double)_timestamp;
- (double)_timestampAtIndex:(unsigned long long)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transform;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_untransformedBounds;
- (id)_updateStroke:(id /* block */)arg1;
- (id)_updateWithParent:(id)arg1;
- (struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })_version;
- (long long)_visibleSubstrokeCount;
- (bool)_visitVisibleSubstrokes:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (long long)compareToStroke:(id)arg1;
- (id)copyForMutation;
- (id)copyForMutationWithSubstrokes:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dataRepresentation;
- (id)debugQuickLookObject;
- (void)debugRender:(struct CGContext { }*)arg1;
- (id)deltaTo:(id)arg1;
- (id)description;
- (id)descriptionAtDepth:(long long)arg1;
- (double)endTimestamp;
- (void)enumeratePointsWithDistanceStep:(double)arg1 usingBlock:(id /* block */)arg2;
- (void)enumeratePointsWithTimestep:(double)arg1 usingBlock:(id /* block */)arg2;
- (void)generateClipPaths:(struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > {} *x1; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > {} *x2; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > {} *x_3_1_1; } x3; }*)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (unsigned long long)hash;
- (id)init;
- (id)initWithArchive:(const struct StrokeDelta { int (**x1)(); struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > { struct __compressed_pair<drawing::Ink *, std::__1::default_delete<drawing::Ink> > { struct Ink {} *x_1_2_1; } x_2_1_1; } x2; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data {} *x_3_1_1; struct Data {} *x_3_1_2; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data {} *x_3_2_1; } x_3_1_3; } x3; struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > { struct __compressed_pair<drawing::Stroke *, std::__1::default_delete<drawing::Stroke> > { struct Stroke {} *x_1_2_1; } x_4_1_1; } x4; struct unique_ptr<drawing::StrokeData, std::__1::default_delete<drawing::StrokeData> > { struct __compressed_pair<drawing::StrokeData *, std::__1::default_delete<drawing::StrokeData> > { struct StrokeData {} *x_1_2_1; } x_5_1_1; } x5; }*)arg1 error:(id*)arg2;
- (id)initWithArchive:(const struct Stroke { int (**x1)(); struct vector<float, std::__1::allocator<float> > { float *x_2_1_1; float *x_2_1_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_2_1; } x_2_1_3; } x2; struct unique_ptr<drawing::Rectangle, std::__1::default_delete<drawing::Rectangle> > { struct __compressed_pair<drawing::Rectangle *, std::__1::default_delete<drawing::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_3_1_1; } x3; unsigned long long x4; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data {} *x_5_1_1; struct Data {} *x_5_1_2; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data {} *x_3_2_1; } x_5_1_3; } x5; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID {} *x_1_2_1; } x_6_1_1; } x6; struct unique_ptr<drawing::StrokeData, std::__1::default_delete<drawing::StrokeData> > { struct __compressed_pair<drawing::StrokeData *, std::__1::default_delete<drawing::StrokeData> > { struct StrokeData {} *x_1_2_1; } x_7_1_1; } x7; }*)arg1 sortedUUIDs:(id)arg2 inks:(id)arg3;
- (id)initWithArchive:(const struct Stroke { int (**x1)(); struct vector<float, std::__1::allocator<float> > { float *x_2_1_1; float *x_2_1_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_2_1; } x_2_1_3; } x2; struct unique_ptr<drawing::Rectangle, std::__1::default_delete<drawing::Rectangle> > { struct __compressed_pair<drawing::Rectangle *, std::__1::default_delete<drawing::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_3_1_1; } x3; unsigned long long x4; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data {} *x_5_1_1; struct Data {} *x_5_1_2; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data {} *x_3_2_1; } x_5_1_3; } x5; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID {} *x_1_2_1; } x_6_1_1; } x6; struct unique_ptr<drawing::StrokeData, std::__1::default_delete<drawing::StrokeData> > { struct __compressed_pair<drawing::StrokeData *, std::__1::default_delete<drawing::StrokeData> > { struct StrokeData {} *x_1_2_1; } x_7_1_1; } x7; }*)arg1 sortedUUIDs:(id)arg2 inks:(id)arg3 parent:(id)arg4 isHidden:(bool)arg5;
- (id)initWithData:(id)arg1 error:(id*)arg2;
- (id)initWithData:(id)arg1 id:(id)arg2 sortID:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg3 timestamp:(double)arg4 flags:(struct { union { struct { unsigned int x_1_2_1 : 1; unsigned int x_1_2_2 : 1; unsigned int x_1_2_3 : 1; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 1; } x_1_1_1; unsigned long long x_1_1_2; } x1; })arg5 version:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg6 ink:(id)arg7 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg8 tRange:(struct { double x1; double x2; })arg9 substrokes:(id)arg10 substrokesVersion:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg11;
- (id)initWithData:(id)arg1 id:(id)arg2 sortID:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg3 timestamp:(double)arg4 hidden:(bool)arg5 version:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg6 ink:(id)arg7 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg8 tRange:(struct { double x1; double x2; })arg9 substrokes:(id)arg10 substrokesVersion:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg11;
- (id)initWithLegacyArchive:(const struct Command { int (**x1)(); struct unique_ptr<legacy_drawing::Point, std::__1::default_delete<legacy_drawing::Point> > { struct __compressed_pair<legacy_drawing::Point *, std::__1::default_delete<legacy_drawing::Point> > { struct Point {} *x_1_2_1; } x_2_1_1; } x2; struct unique_ptr<legacy_drawing::Rectangle, std::__1::default_delete<legacy_drawing::Rectangle> > { struct __compressed_pair<legacy_drawing::Rectangle *, std::__1::default_delete<legacy_drawing::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_3_1_1; } x3; struct unique_ptr<legacy_drawing::Point, std::__1::default_delete<legacy_drawing::Point> > { struct __compressed_pair<legacy_drawing::Point *, std::__1::default_delete<legacy_drawing::Point> > { struct Point {} *x_1_2_1; } x_4_1_1; } x4; struct unique_ptr<legacy_drawing::Point, std::__1::default_delete<legacy_drawing::Point> > { struct __compressed_pair<legacy_drawing::Point *, std::__1::default_delete<legacy_drawing::Point> > { struct Point {} *x_1_2_1; } x_5_1_1; } x5; struct unique_ptr<legacy_drawing::Color, std::__1::default_delete<legacy_drawing::Color> > { struct __compressed_pair<legacy_drawing::Color *, std::__1::default_delete<legacy_drawing::Color> > { struct Color {} *x_1_2_1; } x_6_1_1; } x6; }*)arg1 sortedUUIDs:(id)arg2;
- (id)initWithStroke:(id)arg1;
- (id)initWithStroke:(id)arg1 hidden:(bool)arg2 version:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg3;
- (id)initWithStroke:(id)arg1 hidden:(bool)arg2 version:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg3 ink:(id)arg4 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg5 tRange:(struct { double x1; double x2; })arg6;
- (id)initWithStroke:(id)arg1 hidden:(bool)arg2 version:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg3 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4;
- (id)initWithV1Archive:(const struct Stroke { int (**x1)(); struct unique_ptr<drawingV1::Rectangle, std::__1::default_delete<drawingV1::Rectangle> > { struct __compressed_pair<drawingV1::Rectangle *, std::__1::default_delete<drawingV1::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_2_1_1; } x2; unsigned long long x3; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data {} *x_1_2_1; } x_4_1_1; } x4; unsigned long long x5; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data {} *x_1_2_1; } x_6_1_1; } x6; struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > { struct __compressed_pair<drawingV1::StrokeID *, std::__1::default_delete<drawingV1::StrokeID> > { struct StrokeID {} *x_1_2_1; } x_7_1_1; } x7; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data {} *x_1_2_1; } x_8_1_1; } x8; }*)arg1 sortedUUIDs:(id)arg2 inks:(id)arg3;
- (id)ink;
- (void)interpolatePointDataWithStep:(double)arg1 from:(double)arg2 to:(double)arg3 usingBlock:(id /* block */)arg4;
- (void)interpolatePointDataWithStep:(double)arg1 usingBlock:(id /* block */)arg2;
- (bool)intersectsClosedStroke:(id)arg1;
- (bool)intersectsLineFrom:(struct CGPoint { double x1; double x2; })arg1 to:(struct CGPoint { double x1; double x2; })arg2 minThreshold:(double)arg3;
- (bool)isEqual:(id)arg1;
- (struct CGPoint { double x1; double x2; })locationAtIndex:(unsigned long long)arg1;
- (id)mergeArrayOfStrokes:(id)arg1 with:(id)arg2;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > {} *x1; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > {} *x2; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > {} *x_3_1_1; } x3; }*)newOutlinePaths;
- (struct CGPath { }*)newPathRepresentation;
- (struct CGPoint { double x1; double x2; })readPointFromArchive:(const struct Point { int (**x1)(); float x2; float x3; struct { unsigned int x_4_1_1 : 1; unsigned int x_4_1_2 : 1; } x4; }*)arg1;
- (struct _PKStrokePoint { double x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; })readPointFromLegacyArchive:(const struct Point { int (**x1)(); float x2; float x3; float x4; float x5; float x6; float x7; float x8; struct { unsigned int x_9_1_1 : 1; unsigned int x_9_1_2 : 1; unsigned int x_9_1_3 : 1; unsigned int x_9_1_4 : 1; unsigned int x_9_1_5 : 1; unsigned int x_9_1_6 : 1; unsigned int x_9_1_7 : 1; } x9; }*)arg1 deltaFrom:(const struct _PKStrokePoint { double x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; }*)arg2;
- (struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })readStrokeIDFromArchive:(const struct StrokeID { int (**x1)(); unsigned long long x2; unsigned long long x3; unsigned long long x4; struct { unsigned int x_5_1_1 : 1; unsigned int x_5_1_2 : 1; unsigned int x_5_1_3 : 1; } x5; }*)arg1 withSortedUUIDs:(id)arg2;
- (struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })readV1StrokeIDFromArchive:(const struct StrokeID { int (**x1)(); unsigned long long x2; unsigned long long x3; unsigned long long x4; struct { unsigned int x_5_1_1 : 1; unsigned int x_5_1_2 : 1; unsigned int x_5_1_3 : 1; } x5; }*)arg1 withSortedUUIDs:(id)arg2;
- (void)saveInksTo:(id)arg1;
- (void)saveStrokeID:(const struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; }*)arg1 toArchive:(struct StrokeID { int (**x1)(); unsigned long long x2; unsigned long long x3; unsigned long long x4; struct { unsigned int x_5_1_1 : 1; unsigned int x_5_1_2 : 1; unsigned int x_5_1_3 : 1; } x5; }*)arg2 withSortedUUIDs:(id)arg3;
- (void)saveToArchive:(struct StrokeDelta { int (**x1)(); struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > { struct __compressed_pair<drawing::Ink *, std::__1::default_delete<drawing::Ink> > { struct Ink {} *x_1_2_1; } x_2_1_1; } x2; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data {} *x_3_1_1; struct Data {} *x_3_1_2; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data {} *x_3_2_1; } x_3_1_3; } x3; struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > { struct __compressed_pair<drawing::Stroke *, std::__1::default_delete<drawing::Stroke> > { struct Stroke {} *x_1_2_1; } x_4_1_1; } x4; struct unique_ptr<drawing::StrokeData, std::__1::default_delete<drawing::StrokeData> > { struct __compressed_pair<drawing::StrokeData *, std::__1::default_delete<drawing::StrokeData> > { struct StrokeData {} *x_1_2_1; } x_5_1_1; } x5; }*)arg1;
- (unsigned int)saveToArchive:(struct Stroke { int (**x1)(); struct vector<float, std::__1::allocator<float> > { float *x_2_1_1; float *x_2_1_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_2_1; } x_2_1_3; } x2; struct unique_ptr<drawing::Rectangle, std::__1::default_delete<drawing::Rectangle> > { struct __compressed_pair<drawing::Rectangle *, std::__1::default_delete<drawing::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_3_1_1; } x3; unsigned long long x4; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data {} *x_5_1_1; struct Data {} *x_5_1_2; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data {} *x_3_2_1; } x_5_1_3; } x5; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID {} *x_1_2_1; } x_6_1_1; } x6; struct unique_ptr<drawing::StrokeData, std::__1::default_delete<drawing::StrokeData> > { struct __compressed_pair<drawing::StrokeData *, std::__1::default_delete<drawing::StrokeData> > { struct StrokeData {} *x_1_2_1; } x_7_1_1; } x7; }*)arg1 sortedUUIDs:(id)arg2 inks:(id)arg3 withPathData:(bool)arg4 parent:(id)arg5 transient:(bool)arg6;
- (unsigned int)saveToArchive:(struct Stroke { int (**x1)(); struct vector<float, std::__1::allocator<float> > { float *x_2_1_1; float *x_2_1_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_2_1; } x_2_1_3; } x2; struct unique_ptr<drawing::Rectangle, std::__1::default_delete<drawing::Rectangle> > { struct __compressed_pair<drawing::Rectangle *, std::__1::default_delete<drawing::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_3_1_1; } x3; unsigned long long x4; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data {} *x_5_1_1; struct Data {} *x_5_1_2; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data {} *x_3_2_1; } x_5_1_3; } x5; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID {} *x_1_2_1; } x_6_1_1; } x6; struct unique_ptr<drawing::StrokeData, std::__1::default_delete<drawing::StrokeData> > { struct __compressed_pair<drawing::StrokeData *, std::__1::default_delete<drawing::StrokeData> > { struct StrokeData {} *x_1_2_1; } x_7_1_1; } x7; }*)arg1 sortedUUIDs:(id)arg2 inks:(id)arg3 withPathData:(bool)arg4 transient:(bool)arg5;
- (unsigned int)saveToV1Archive:(struct Stroke { int (**x1)(); struct unique_ptr<drawingV1::Rectangle, std::__1::default_delete<drawingV1::Rectangle> > { struct __compressed_pair<drawingV1::Rectangle *, std::__1::default_delete<drawingV1::Rectangle> > { struct Rectangle {} *x_1_2_1; } x_2_1_1; } x2; unsigned long long x3; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data {} *x_1_2_1; } x_4_1_1; } x4; unsigned long long x5; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data {} *x_1_2_1; } x_6_1_1; } x6; struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > { struct __compressed_pair<drawingV1::StrokeID *, std::__1::default_delete<drawingV1::StrokeID> > { struct StrokeID {} *x_1_2_1; } x_7_1_1; } x7; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data {} *x_1_2_1; } x_8_1_1; } x8; }*)arg1 sortedUUIDs:(id)arg2 inks:(id)arg3 withPathData:(bool)arg4 transient:(bool)arg5;
- (void)saveUUIDsTo:(id)arg1;
- (void)saveV1StrokeID:(const struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; }*)arg1 toArchive:(struct StrokeID { int (**x1)(); unsigned long long x2; unsigned long long x3; unsigned long long x4; struct { unsigned int x_5_1_1 : 1; unsigned int x_5_1_2 : 1; unsigned int x_5_1_3 : 1; } x5; }*)arg2 withSortedUUIDs:(id)arg3;
- (void)setInk:(id)arg1;
- (void)set_clipPlane:(id)arg1;
- (void)set_flags:(struct { union { struct { unsigned int x_1_2_1 : 1; unsigned int x_1_2_2 : 1; unsigned int x_1_2_3 : 1; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 1; } x_1_1_1; unsigned long long x_1_1_2; } x1; })arg1;
- (void)set_sortID:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg1;
- (void)set_strokeData:(id)arg1;
- (void)set_substrokes:(id)arg1;
- (void)set_substrokesVersion:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg1;
- (void)set_tRange:(struct { double x1; double x2; })arg1;
- (void)set_version:(struct _PKStrokeID { unsigned int x1; unsigned char x2[16]; unsigned int x3; })arg1;
- (double)startTimestamp;
- (id)strokeApplying:(id)arg1;
- (id)substrokeWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (double)timestamp;
- (double)timestampAtIndex:(unsigned long long)arg1;

@end
