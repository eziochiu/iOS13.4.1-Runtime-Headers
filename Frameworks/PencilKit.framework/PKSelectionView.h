/* Generated by EzioChiu
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKSelectionView : UIView <UIDragInteractionDelegate_Private, UIGestureRecognizerDelegate> {
    id /* block */  _calculateSelectionHullBlock;
    UILongPressGestureRecognizer * _dragGR;
    UIDragInteraction * _dragInteraction;
    UITapGestureRecognizer * _editMenuGR;
    struct CGPoint { 
        double x; 
        double y; 
    }  _editMenuLocation;
    struct CGPoint { 
        double x; 
        double y; 
    }  _initialDragPosition;
    double  _initialRotation;
    bool  _isClearingSelection;
    bool  _isDragging;
    CAShapeLayer * _lassoLayer;
    UIBezierPath * _lassoPath;
    struct CGPoint { 
        double x; 
        double y; 
    }  _offsetInTouchView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _originalStrokeFrame;
    struct CGPoint { 
        double x; 
        double y; 
    }  _originalTranslation;
    UIDragPreview * _previewProvider;
    UIResponder * _previousResponder;
    double  _rotation;
    double  _scale;
    PKSelectionController * _selectionController;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _selectionDrawingTransform;
    double  _startRotation;
    double  _startScale;
    PKStrokeSelection * _strokeSelection;
    UIImage * _strokeSelectionImage;
    UIImageView * _strokeSelectionImageView;
    NSMutableArray * _subLassoLayers;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _userTransform;
    bool  _wantsDragPlatter;
    CAShapeLayer * _whiteLassoLayer;
}

@property (nonatomic, copy) id /* block */ calculateSelectionHullBlock;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) UILongPressGestureRecognizer *dragGR;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isDragging;
@property (nonatomic, retain) UIBezierPath *lassoPath;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } offsetInTouchView;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } selectionDrawingTransform;
@property (nonatomic, retain) PKStrokeSelection *strokeSelection;
@property (nonatomic, retain) UIImage *strokeSelectionImage;
@property (readonly) Class superclass;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } userTransform;
@property (nonatomic) bool wantsDragPlatter;

- (void).cxx_destruct;
- (void)_clearSelection:(id)arg1;
- (long long)_dragInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (void)_dragWillBegin;
- (void)_setupWindowNotificationsForScene:(id)arg1;
- (void)_updateTransform;
- (void)addAnimationsToSelectionLayer:(id)arg1 whiteLayer:(id)arg2;
- (void)animateViewToOriginalPosition;
- (id /* block */)calculateSelectionHullBlock;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)delete:(id)arg1;
- (void)didBeginDraggingSelection;
- (void)didEndGestureWithTranslation:(struct CGPoint { double x1; double x2; })arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (id)dragGR;
- (id)dragInteraction:(id)arg1 itemsForBeginningSession:(id)arg2;
- (bool)dragInteraction:(id)arg1 prefersFullSizePreviewsForSession:(id)arg2;
- (id)dragInteraction:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;
- (void)dragInteraction:(id)arg1 session:(id)arg2 willEndWithOperation:(unsigned long long)arg3;
- (void)dragInteraction:(id)arg1 sessionWillBegin:(id)arg2;
- (void)dragSelection:(id)arg1;
- (void)duplicate:(id)arg1;
- (long long)editingInteractionConfiguration;
- (void)generateStrokeImageForPasteAndDND;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;
- (void)hideStrokeSelectionImageView:(bool)arg1 animated:(bool)arg2;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 strokeSelection:(id)arg2 selectionController:(id)arg3;
- (bool)isDragging;
- (id)keyCommands;
- (bool)lassoContainsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)lassoPath;
- (void)makeViewAliveAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })offsetInTouchView;
- (void)paste:(id)arg1;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; })pointsOfInterestForStrokes:(id)arg1;
- (void)rotateSelection:(id)arg1;
- (void)scaleSelection:(id)arg1;
- (void)scrollContent:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGColor { }*)selectionColor;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })selectionDrawingTransform;
- (void)setAlpha:(double)arg1;
- (void)setCalculateSelectionHullBlock:(id /* block */)arg1;
- (void)setLassoPath:(id)arg1;
- (void)setSelectionDrawingTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setStrokeSelection:(id)arg1;
- (void)setStrokeSelectionImage:(id)arg1;
- (void)setUserTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setWantsDragPlatter:(bool)arg1;
- (void)setupAnimatedLasso;
- (void)setupAnimatedLassoForStrokes:(id)arg1 lassoLayer:(id)arg2 whiteLassoLayer:(id)arg3 isSelection:(bool)arg4 lassoStroke:(id)arg5;
- (id)strokeSelection;
- (id)strokeSelectionImage;
- (id)strokesContainedBySelection:(id)arg1;
- (id)targetForAction:(SEL)arg1 withSender:(id)arg2;
- (void)toggleEditMenu;
- (void)updateLocationForDrop:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })userTransform;
- (bool)wantsDragPlatter;
- (void)willMoveToWindow:(id)arg1;

@end
