/* Generated by EzioChiu
   Image: /System/Library/Frameworks/PencilKit.framework/PencilKit
 */

@interface PKSelectionController : NSObject <UIDropInteractionDelegate_Private> {
    double  _cachedStrokeImageScale;
    PKStrokeSelection * _currentStrokeSelection;
    UIDropInteraction * _dropInteraction;
    struct CGPoint { 
        double x; 
        double y; 
    }  _dropPosition;
    bool  _hasCurrentSelection;
    bool  _isCurrentlyAddingSpace;
    NSUUID * _previousDrawingUUIDForSelection;
    NSObject<OS_dispatch_queue> * _selectionHullQueue;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _selectionTransform;
    PKSelectionView * _selectionView;
    int  _selectionViewCount;
    PKSpaceInsertionController * _spaceInsertionController;
    PKTiledView * _tiledView;
}

@property (nonatomic, retain) PKStrokeSelection *currentStrokeSelection;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasCurrentSelection;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isCurrentlyAddingSpace;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *selectionHullQueue;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } selectionTransform;
@property (nonatomic, retain) PKSelectionView *selectionView;
@property (nonatomic, readonly) bool shouldClampInputPoints;
@property (readonly) Class superclass;
@property (nonatomic) PKTiledView *tiledView;

- (void).cxx_destruct;
- (void)_addItemsToPasteboard:(id)arg1;
- (void)_addViewForStrokeSelection:(id)arg1 isDragSource:(bool)arg2 drawing:(id)arg3 withCompletion:(id /* block */)arg4;
- (id)_attachmentForSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_calculateFrameForSelectionView:(id)arg1 inDrawing:(id)arg2;
- (id)_commitStrokeSelection:(id)arg1 toDrawing:(id)arg2 selectionAction:(long long)arg3;
- (id)_commitStrokeSelection:(id)arg1 toDrawing:(id)arg2 selectionAction:(long long)arg3 inkChanges:(id)arg4 withCompletion:(id /* block */)arg5;
- (void)_createSelectionViewForDropSession:(id)arg1 removeFromSource:(bool)arg2;
- (void)_createSelectionViewForDropSession:(id)arg1 removeFromSource:(bool)arg2 withStrokeSelection:(id)arg3;
- (id)_drawingForLiveAttachment;
- (id)_drawingForSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)_dropInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_extendedBoundsForDrawing:(id)arg1;
- (bool)_isValidDropPointForStrokes:(struct CGPoint { double x1; double x2; })arg1;
- (void)_layoutViewsIfNecessary;
- (bool)_liveDrawingIsAtEndOfDocument;
- (id)_newInk:(id)arg1 withChange:(id)arg2;
- (void)_pasteStrokeSelection:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 inDrawing:(id)arg3;
- (struct CGPoint { double x1; double x2; })_pointInStrokeSpace:(struct CGPoint { double x1; double x2; })arg1 inDrawing:(id)arg2;
- (void)_removeSelectionView;
- (void)_removeSelectionViewAnimated:(bool)arg1 withCompletion:(id /* block */)arg2;
- (void)_resetSelectedStrokeStateForRenderer;
- (id)_rotateImageIfNecessary:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_scrollViewDrawingFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_scrollViewVisibleBounds;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_selectionDrawingTransformForDrawing:(id)arg1;
- (struct CGPoint { double x1; double x2; })_selectionOffsetForDrawing:(id)arg1;
- (void)_selectionRefreshWithChangeToDrawings:(id)arg1;
- (void)_selectionRefreshWithChangeToDrawings:(id)arg1 completion:(id /* block */)arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_selectionTransformForStrokes:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 dragOffsetInDragView:(struct CGPoint { double x1; double x2; })arg3 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 constrainSelection:(bool)arg5 inDrawing:(id)arg6;
- (void)_setAdditionalStrokes:(id)arg1 inDrawing:(id)arg2 completion:(id /* block */)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleOnscreenBoundsForDrawing:(id)arg1;
- (id)_visibleStrokesWithinExtendedBounds:(id)arg1 forDrawing:(id)arg2;
- (void)applyCommand:(id)arg1 toDrawing:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForDrawing:(id)arg1;
- (void)changeColorOfSelection:(id)arg1;
- (void)clearSelectionIfNecessary;
- (void)clearSelectionIfNecessaryAnimated:(bool)arg1 withCompletion:(id /* block */)arg2;
- (void)clearSelectionIfNecessaryWithCompletion:(id /* block */)arg1;
- (struct CGPoint { double x1; double x2; })closestPointForPastedSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withDrawing:(id*)arg2;
- (void)commitStrokesWithCompletion:(id /* block */)arg1;
- (void)copy:(id)arg1;
- (id)currentStrokeSelection;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)delete:(id)arg1;
- (void)didBeginSpaceInsertionWithLassoStroke:(id)arg1 drawing:(id)arg2;
- (void)didMoveStrokeSelectionToLocation:(struct CGPoint { double x1; double x2; })arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (bool)didResizeWhitespace;
- (void)didScroll:(struct CGPoint { double x1; double x2; })arg1;
- (void)didSelect:(id)arg1 lassoStroke:(id)arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 drawing:(id)arg4;
- (void)didSelect:(id)arg1 lassoStroke:(id)arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 drawing:(id)arg4 completion:(id /* block */)arg5;
- (void)didSelectStrokesNotification:(id)arg1;
- (void)dismissSpacingResizeHandles;
- (id)drawingForUUID:(id)arg1;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (id)dropInteraction:(id)arg1 previewForDroppingItem:(id)arg2 withDefault:(id)arg3;
- (void)dropInteraction:(id)arg1 sessionDidEnter:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidExit:(id)arg2;
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (void)duplicate:(id)arg1;
- (void)eraseSelection;
- (void)generateImageForStrokeSelection:(id)arg1 withCompletion:(id /* block */)arg2;
- (bool)hasCurrentSelection;
- (void)hideStrokes:(id)arg1 inDrawing:(id)arg2;
- (id)initWithTiledView:(id)arg1;
- (id)intersectedStrokesFromStroke:(id)arg1 drawing:(id)arg2;
- (id)intersectedStrokesFromStroke:(id)arg1 drawing:(id)arg2 visibleOnscreenStrokes:(id)arg3;
- (struct CGPoint { double x1; double x2; })intersectionPointAlongStroke:(id)arg1 fromPoint:(struct CGPoint { double x1; double x2; })arg2 toPoint:(struct CGPoint { double x1; double x2; })arg3;
- (bool)isCurrentlyAddingSpace;
- (void)moveSelectionViewBasedOnStrokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 drawing:(id)arg2;
- (id)newStrokesForSelection:(id)arg1 toDrawing:(id)arg2;
- (void)paste:(id)arg1;
- (void)registerCommandWithUndoManager:(id)arg1;
- (void)resetStrokesAndClearSelection;
- (id)rotateUIImage:(id)arg1 clockwise:(bool)arg2;
- (id)selectionHullQueue;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })selectionTransform;
- (id)selectionView;
- (void)setCurrentStrokeSelection:(id)arg1;
- (void)setHasCurrentSelection:(bool)arg1;
- (void)setImageOnSelectionViewForStrokeSelection:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)setIsCurrentlyAddingSpace:(bool)arg1;
- (void)setSelectionHullQueue:(id)arg1;
- (void)setSelectionTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setSelectionView:(id)arg1;
- (void)setTiledView:(id)arg1;
- (id)setupSpaceInsertionControllerIfNecessary;
- (bool)shouldClampInputPoints;
- (id)strokesForSpaceInsertionWithStrokeSelection:(id)arg1 inDrawing:(id)arg2 offset:(double)arg3;
- (id)tiledView;
- (id)topView;
- (void)updateCurrentStrokeSelectionTransformForLocation:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 offsetInTouchView:(struct CGPoint { double x1; double x2; })arg3 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4;
- (struct CGSize { double x1; double x2; })viewSizeForStrokeSelection:(id)arg1;

@end
