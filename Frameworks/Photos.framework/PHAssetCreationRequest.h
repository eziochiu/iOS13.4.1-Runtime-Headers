/* Generated by EzioChiu
   Image: /System/Library/Frameworks/Photos.framework/Photos
 */

@interface PHAssetCreationRequest : PHAssetChangeRequest <PHInsertChangeRequest, PHMomentSharePropertySet> {
    PHAssetCreationPhotoStreamPublishingRequest * __photoStreamPublishingRequest;
    PHAssetCreationAdjustmentBakeInOptions * _adjustmentBakeInOptions;
    PLManagedAsset * _asset;
    PHAssetResourceBag * _assetResourceBag;
    NSMutableArray * _assetResources;
    id /* block */  _concurrentWorkBlock;
    id /* block */  _destinationAssetAvailabilityHandler;
    bool  _duplicateAllowsPrivateMetadata;
    bool  _duplicateAsOriginal;
    NSString * _duplicateAssetIdentifier;
    unsigned short  _duplicateAssetPhotoLibraryType;
    bool  _duplicateLivePhotoAsStill;
    bool  _duplicateSinglePhotoFromBurst;
    bool  _duplicateSpatialOverCaptureResources;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _duplicateStillSourceTime;
    NSString * _importSessionID;
    short  _importedBy;
    PHAssetCreationMetadataCopyOptions * _metadataCopyOptions;
    PHMomentShare * _momentShare;
    PHRelationshipChangeRequestHelper * _momentShareHelper;
    NSString * _momentShareUUID;
    NSMutableDictionary * _movedFiles;
    NSData * _originalHash;
    NSObject * _previewImage;
    bool  _shouldCreateScreenshot;
    bool  _shouldPerformConcurrentWork;
    NSObject * _thumbnailImage;
}

@property (nonatomic, readonly) NSDictionary *_movedFiles;
@property (setter=_setPhotoStreamPublishingRequest:, nonatomic, retain) PHAssetCreationPhotoStreamPublishingRequest *_photoStreamPublishingRequest;
@property (setter=_setAdjustmentBakeInOptions:, nonatomic, copy) PHAssetCreationAdjustmentBakeInOptions *adjustmentBakeInOptions;
@property (getter=isClientEntitled, nonatomic, readonly) bool clientEntitled;
@property (nonatomic, readonly) NSString *clientName;
@property (nonatomic, readonly) id /* block */ concurrentWorkBlock;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (setter=_setDestinationAssetAvailabilityHandler:, nonatomic, copy) id /* block */ destinationAssetAvailabilityHandler;
@property (setter=_setDuplicateAllowsPrivateMetadata:, nonatomic) bool duplicateAllowsPrivateMetadata;
@property (setter=_setDuplicateAsOriginal:, nonatomic) bool duplicateAsOriginal;
@property (setter=_setDuplicateAssetIdentifier:, nonatomic, retain) NSString *duplicateAssetIdentifier;
@property (setter=_setDuplicateAssetPhotoLibraryType:, nonatomic) unsigned short duplicateAssetPhotoLibraryType;
@property (setter=_setDuplicateLivePhotoAsStill:, nonatomic) bool duplicateLivePhotoAsStill;
@property (setter=_setDuplicateSinglePhotoFromBurst:, nonatomic) bool duplicateSinglePhotoFromBurst;
@property (setter=_setDuplicateSpatialOverCaptureResources:, nonatomic) bool duplicateSpatialOverCaptureResources;
@property (setter=_setDuplicateStillSourceTime:, nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } duplicateStillSourceTime;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSString *importSessionID;
@property (nonatomic) short importedBy;
@property (readonly) bool isNewRequest;
@property (nonatomic, readonly) NSString *managedEntityName;
@property (setter=_setMetadataCopyOptions:, nonatomic, copy) PHAssetCreationMetadataCopyOptions *metadataCopyOptions;
@property (nonatomic, retain) PHMomentShare *momentShare;
@property (nonatomic, readonly) PHRelationshipChangeRequestHelper *momentShareHelper;
@property (nonatomic, retain) NSString *momentShareUUID;
@property (nonatomic, readonly) NSManagedObjectID *objectID;
@property (getter=_shouldCreateScreenshot, setter=_setShouldCreateScreenshot:, nonatomic) bool shouldCreateScreenshot;
@property (nonatomic) bool shouldPerformConcurrentWork;
@property (readonly) Class superclass;

+ (id)_creationRequestForAssetUsingUUID:(id)arg1;
+ (id)creationRequestForAsset;
+ (id)creationRequestForAssetCopyFromAsset:(id)arg1;
+ (id)creationRequestForAssetCopyFromAsset:(id)arg1 options:(id)arg2;
+ (id)creationRequestForAssetFromAssetBundle:(id)arg1;
+ (id)creationRequestForAssetFromImage:(id)arg1;
+ (id)creationRequestForAssetFromImageAtFileURL:(id)arg1;
+ (id)creationRequestForAssetFromImageData:(id)arg1;
+ (id)creationRequestForAssetFromImageData:(id)arg1 usingUUID:(id)arg2;
+ (id)creationRequestForAssetFromScreenshotImage:(id)arg1;
+ (id)creationRequestForAssetFromVideoAtFileURL:(id)arg1;
+ (id)creationRequestForAssetFromVideoComplementBundle:(id)arg1;
+ (bool)supportsAssetResourceTypes:(id)arg1;
+ (bool)supportsImportAssetResourceTypes:(id)arg1;

- (void).cxx_destruct;
- (bool)_accessWritableURLForUUID:(id)arg1 imageUTI:(id)arg2 originalFilename:(id)arg3 photoLibrary:(id)arg4 withHandler:(id /* block */)arg5;
- (void)_addResourceWithType:(long long)arg1 data:(id)arg2 orFileURL:(id)arg3 options:(id)arg4;
- (void)_copyMediaAnalysisProperties:(id)arg1;
- (void)_copyMetadataFromAsset:(id)arg1;
- (void)_copyUserSpecificMetadataFromAsset:(id)arg1;
- (bool)_createAssetAsAdjusted:(id)arg1 fromValidatedResources:(id)arg2 error:(id*)arg3;
- (bool)_createAssetAsPhotoIris:(id)arg1 fromValidatedResources:(id)arg2 error:(id*)arg3;
- (bool)_createAudioResourceForAsset:(id)arg1 fromValidatedResources:(id)arg2 photoLibrary:(id)arg3 error:(id*)arg4;
- (bool)_createOriginalResourceForAsset:(id)arg1 fromValidatedResource:(id)arg2 resourceType:(unsigned int)arg3 photoLibrary:(id)arg4 destinationURL:(id)arg5 error:(id*)arg6;
- (bool)_createRAWSidecarForAsset:(id)arg1 fromValidatedResources:(id)arg2 photoLibrary:(id)arg3 error:(id*)arg4;
- (bool)_createSocResourceForAsset:(id)arg1 fromValidatedResources:(id)arg2 photoLibrary:(id)arg3 error:(id*)arg4;
- (bool)_createXmpResourceForAsset:(id)arg1 fromValidatedResources:(id)arg2 photoLibrary:(id)arg3 error:(id*)arg4;
- (void)_didMoveFileFromURL:(id)arg1 toURL:(id)arg2;
- (id)_duplicatedAssetResourcesFromAsset:(id)arg1 stillSourceTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 flattenLivePhotoIntoStillPhoto:(bool)arg3 original:(bool)arg4 removeBurstIdentifier:(bool)arg5 error:(id*)arg6;
- (id)_exifPropertiesFromSourceImageDataExifProperties:(id)arg1;
- (id)_externalLivePhotoResourceForAsset:(id)arg1;
- (id)_ingestOriginalFromSrcURL:(id)arg1 toDstURL:(id)arg2 useSecureMove:(bool)arg3 resource:(id)arg4 resourceType:(unsigned int)arg5 asset:(id)arg6 error:(id*)arg7;
- (bool)_ingestOriginalInPlaceSrcURL:(id)arg1 dstURL:(id)arg2 asset:(id)arg3 error:(id*)arg4;
- (id)_managedAssetFromPrimaryResourceData:(id)arg1 withUUID:(id)arg2 photoLibrary:(id)arg3 getImageSource:(struct CGImageSource {}**)arg4 imageData:(id*)arg5;
- (long long)_mediaTypeForCreatedAsset;
- (id)_movedFiles;
- (id)_mutableMomentShareObjectIDsAndUUIDs;
- (void)_pairLivePhotoResource:(id)arg1 withAssetInLibrary:(id)arg2 metadata:(id)arg3 completion:(id /* block */)arg4;
- (id)_photoStreamPublishingRequest;
- (bool)_populateDuplicatingAssetCreationRequest:(id)arg1 photoLibrary:(id)arg2 error:(id*)arg3;
- (void)_prepareMomentShareHelperIfNeeded;
- (void)_resetMovedFiles;
- (bool)_restoreMovedFilesOnFailure;
- (short)_savedAssetTypeForAsset;
- (id)_secureMove:(bool)arg1 assetResource:(id)arg2 photoLibrary:(id)arg3 error:(id*)arg4;
- (id)_secureMove:(bool)arg1 fileAtURL:(id)arg2 toURL:(id)arg3 capabilities:(id)arg4 error:(id*)arg5;
- (void)_setAdjustmentBakeInOptions:(id)arg1;
- (void)_setDestinationAssetAvailabilityHandler:(id /* block */)arg1;
- (void)_setDuplicateAllowsPrivateMetadata:(bool)arg1;
- (void)_setDuplicateAsOriginal:(bool)arg1;
- (void)_setDuplicateAssetIdentifier:(id)arg1;
- (void)_setDuplicateAssetPhotoLibraryType:(unsigned short)arg1;
- (void)_setDuplicateLivePhotoAsStill:(bool)arg1;
- (void)_setDuplicateSinglePhotoFromBurst:(bool)arg1;
- (void)_setDuplicateSpatialOverCaptureResources:(bool)arg1;
- (void)_setDuplicateStillSourceTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setMetadataCopyOptions:(id)arg1;
- (void)_setPhotoStreamPublishingRequest:(id)arg1;
- (void)_setShouldCreateScreenshot:(bool)arg1;
- (void)_setupConcurrentWorkIfNecessaryWithImageSource:(struct CGImageSource { }*)arg1 originalImageData:(id)arg2;
- (bool)_shouldCreateScreenshot;
- (id)_sourceOptionsForCreateThumbnailWithAsset:(id)arg1 hasAdjustments:(bool)arg2;
- (void)_updateMutationsForDuplicatingPrivateMetadataFromAsset:(id)arg1;
- (bool)_writeDataToDisk:(id)arg1 imageUTIType:(id)arg2 exifProperties:(id)arg3 mainFileURL:(id)arg4 thumbnailData:(id)arg5;
- (void)addResourceWithType:(long long)arg1 data:(id)arg2 options:(id)arg3;
- (void)addResourceWithType:(long long)arg1 fileURL:(id)arg2 options:(id)arg3;
- (id)adjustmentBakeInOptions;
- (bool)applyMutationsToManagedObject:(id)arg1 photoLibrary:(id)arg2 error:(id*)arg3;
- (id /* block */)concurrentWorkBlock;
- (id)createAssetFromValidatedResources:(id)arg1 withUUID:(id)arg2 inPhotoLibrary:(id)arg3 error:(id*)arg4;
- (id)createManagedObjectForInsertIntoPhotoLibrary:(id)arg1 error:(id*)arg2;
- (id /* block */)destinationAssetAvailabilityHandler;
- (bool)duplicateAllowsPrivateMetadata;
- (bool)duplicateAsOriginal;
- (id)duplicateAssetIdentifier;
- (unsigned short)duplicateAssetPhotoLibraryType;
- (bool)duplicateLivePhotoAsStill;
- (bool)duplicateSinglePhotoFromBurst;
- (bool)duplicateSpatialOverCaptureResources;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })duplicateStillSourceTime;
- (void)encodeToXPCDict:(id)arg1;
- (void)finalizeRequestWithBatchSuccess:(bool)arg1;
- (id)importSessionID;
- (short)importedBy;
- (id)initForNewObject;
- (id)initForNewObjectWithUUID:(id)arg1;
- (id)initWithHelper:(id)arg1;
- (id)initWithXPCDict:(id)arg1 request:(id)arg2 clientAuthorization:(id)arg3;
- (bool)isNew;
- (id)makeSubstitueRenderImageFileFromPath:(id)arg1 primaryResource:(id)arg2 fileSuffix:(id)arg3 error:(id*)arg4;
- (id)makeSubstitueRenderVideoFileFromPath:(id)arg1 primaryResource:(id)arg2 fileSuffix:(id)arg3 error:(id*)arg4;
- (id)metadataCopyOptions;
- (id)momentShare;
- (id)momentShareHelper;
- (id)momentShareUUID;
- (bool)needsConcurrentWork;
- (void)performTransactionCompletionHandlingInPhotoLibrary:(id)arg1;
- (id)placeholderForCreatedAsset;
- (void)setImportSessionID:(id)arg1;
- (void)setImportedBy:(short)arg1;
- (void)setMomentShare:(id)arg1;
- (void)setMomentShareUUID:(id)arg1;
- (void)setShouldPerformConcurrentWork:(bool)arg1;
- (bool)shouldPerformConcurrentWork;
- (void)updateOriginalResourceOptionsWithResource:(id)arg1 sourceUrl:(id)arg2;
- (bool)validateInsertIntoPhotoLibrary:(id)arg1 error:(id*)arg2;

@end
