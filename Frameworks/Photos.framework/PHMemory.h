/* Generated by EzioChiu
   Image: /System/Library/Frameworks/Photos.framework/Photos
 */

@interface PHMemory : PHAssetCollection <PGMemoryCore> {
    NSData * _assetListPredicate;
    PHMemoryFeature * _blacklistedFeature;
    unsigned long long  _category;
    NSDate * _creationDate;
    bool  _didLoadTitleCategory;
    bool  _favorite;
    NSDate * _lastMoviePlayedDate;
    NSDate * _lastViewedDate;
    NSString * _localizedSubtitle;
    NSDictionary * _movieAssetState;
    NSData * _movieData;
    unsigned long long  _notificationState;
    bool  _pending;
    long long  _pendingPlayCount;
    long long  _pendingShareCount;
    long long  _pendingViewCount;
    NSData * _photosGraphData;
    NSDictionary * _photosGraphProperties;
    long long  _photosGraphVersion;
    bool  _rejected;
    double  _score;
    unsigned long long  _subcategory;
    long long  _syncedPlayCount;
    long long  _syncedShareCount;
    long long  _syncedViewCount;
    NSString * _title;
    long long  _titleCategory;
    NSString * _titleFontName;
    NSDictionary * _transientMemoryProperties;
    bool  _userCreated;
}

@property (nonatomic, readonly) NSData *assetListPredicate;
@property (nonatomic, readonly) NSArray *blacklistableFeatures;
@property (nonatomic, readonly) PHMemoryFeature *blacklistedFeature;
@property (nonatomic, readonly) unsigned long long category;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isFavorite, nonatomic, readonly) bool favorite;
@property (nonatomic, readonly) NSSet *featuredPeopleIdentifiers;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isContiguous;
@property (nonatomic, readonly) bool isGreat;
@property (nonatomic, readonly) bool isMustSee;
@property (nonatomic, readonly) bool isStellar;
@property (nonatomic, readonly) NSDate *lastMoviePlayedDate;
@property (nonatomic, readonly) NSDate *lastViewedDate;
@property (nonatomic, readonly) NSArray *meaningLabels;
@property (nonatomic, readonly) NSArray *moodKeywords;
@property (nonatomic, readonly) NSData *movieData;
@property (nonatomic, readonly) NSDictionary *musicGenreDistribution;
@property (nonatomic, readonly) unsigned long long notificationState;
@property (getter=isPending, nonatomic, readonly) bool pending;
@property (nonatomic, readonly) NSDictionary *photosGraphProperties;
@property (nonatomic, readonly) long long photosGraphVersion;
@property (nonatomic, readonly) long long playCount;
@property (getter=isRejected, nonatomic, readonly) bool rejected;
@property (nonatomic, readonly) double score;
@property (nonatomic, readonly) long long shareCount;
@property (nonatomic, readonly) unsigned long long subcategory;
@property (nonatomic, readonly) NSString *subtitle;
@property (nonatomic, readonly) unsigned long long suggestedMood;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSDate *universalEndDate;
@property (nonatomic, readonly) NSDate *universalStartDate;
@property (getter=isUserCreated, nonatomic, readonly) bool userCreated;
@property (nonatomic, readonly) long long viewCount;

// Image: /System/Library/Frameworks/Photos.framework/Photos

+ (unsigned long long)_contextualScoreForMemory:(id)arg1;
+ (id)_fetchOptionsForTransientMemoryAssetsWithOptions:(id)arg1;
+ (id)assetListPredicateFromQueryHintObjects:(id)arg1;
+ (id)entityKeyMap;
+ (id)fetchBestRecentMemoryWithOptions:(id)arg1;
+ (id)fetchBlacklistedMemoriesWithOptions:(id)arg1;
+ (id)fetchType;
+ (void)generateMemoriesWithOptions:(id)arg1 completion:(id /* block */)arg2;
+ (id)identifierCode;
+ (id)managedEntityName;
+ (bool)managedObjectSupportsPendingState;
+ (bool)managedObjectSupportsRejectedState;
+ (bool)managedObjectSupportsTrashedState;
+ (id)memoryInfosWithOptions:(id)arg1 photoLibrary:(id)arg2;
+ (id)memoryTreeLevelWithOptions:(id)arg1 photoLibrary:(id)arg2;
+ (id)movieDataWithTitleFontName:(id)arg1;
+ (id)propertiesToFetchWithHint:(unsigned long long)arg1;
+ (id)stringForCategory:(unsigned long long)arg1;
+ (id)stringForSubcategory:(unsigned long long)arg1;
+ (id)titleFontNameFromMovieData:(id)arg1;
+ (id)transformValueExpression:(id)arg1 forKeyPath:(id)arg2;
+ (id)transientMemoryWithInfo:(id)arg1 photoLibrary:(id)arg2;

- (void).cxx_destruct;
- (id)_curatedAssetIDsWithLibrary:(id)arg1;
- (id)_extendedCuratedAssetIDsWithLibrary:(id)arg1;
- (id)_representativeAndCuratedAssetIDs;
- (id)assetListPredicate;
- (id)blacklistableFeatures;
- (id)blacklistedFeature;
- (bool)canContainAssets;
- (bool)canPerformEditOperation:(long long)arg1;
- (bool)canShowAvalancheStacks;
- (unsigned long long)category;
- (Class)changeRequestClass;
- (bool)collectionHasFixedOrder;
- (id)creationDate;
- (id)defaultSortDescriptor;
- (id)description;
- (id)featuredPeopleIdentifiers;
- (bool)hasBlacklistableFeature;
- (id)initWithFetchDictionary:(id)arg1 propertyHint:(unsigned long long)arg2 photoLibrary:(id)arg3;
- (bool)isContiguous;
- (bool)isFavorite;
- (bool)isGreat;
- (bool)isMustSee;
- (bool)isPending;
- (bool)isRejected;
- (bool)isStellar;
- (bool)isTransient;
- (bool)isUserCreated;
- (id)lastMoviePlayedDate;
- (id)lastViewedDate;
- (id)localizedSubtitle;
- (id)meaningLabels;
- (id)moodKeywords;
- (id)movieData;
- (id)movieStateDataForAsset:(id)arg1;
- (id)musicGenreDistribution;
- (unsigned long long)notificationState;
- (id)photosGraphProperties;
- (long long)photosGraphVersion;
- (long long)playCount;
- (id)predicateForAllAssetsWithLibrary:(id)arg1;
- (id)predicateForAllMomentsFromRepresentativeAssets;
- (id)presentationHints;
- (id)query;
- (id)queryForCuratedAssetsWithOptions:(id)arg1;
- (id)queryForExtendedCuratedAssetsWithOptions:(id)arg1;
- (id)queryForKeyAssetWithOptions:(id)arg1;
- (id)rejectionCause;
- (double)score;
- (void)setupTransientMemory;
- (long long)shareCount;
- (unsigned long long)subcategory;
- (id)subtitle;
- (unsigned long long)suggestedMood;
- (long long)titleCategory;
- (id)titleFontName;
- (unsigned long long)titleFontNameHash;
- (id)transientMemoryStartDate;
- (id)transientRepresentativeAndCuratedAssetIDs;
- (long long)viewCount;

// Image: /System/Library/PrivateFrameworks/PhotosGraph.framework/PhotosGraph

- (id)universalEndDate;
- (id)universalStartDate;

// Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore

- (bool)px_shouldUseFacesRectForSmartCropping;

@end
