/* Generated by EzioChiu
   Image: /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 */

@interface HapticServerInstance : NSObject <CHHapticServerInterface, NSXPCListenerDelegate> {
    struct WatchdogTimer { char *x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; int x3; unsigned long long x4; id x5; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_6_1_1; } x6; double x7; double x8; } * _FinishWithCompletionWatchDogTimer;
    unsigned long long  _clientID;
    bool  _clientInterrupted;
    struct shared_ptr<opaqueCMSession> { 
        struct opaqueCMSession {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _clientSession;
    bool  _clientSuspended;
    NSXPCConnection * _connection;
    struct shared_ptr<HapticSession> { 
        struct HapticSession {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _hapticSession;
    ServerWrapper * _listenerWrapper;
    HapticServer * _master;
    bool  _runningInBackground;
    bool  _wasPrewarmedAndSuspended;
    bool  _wasRunningAndSuspended;
}

@property (readonly) unsigned long long clientID;
@property bool clientInterrupted;
@property bool clientSuspended;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) HapticServer *master;
@property bool runningInBackground;
@property (readonly) Class superclass;
@property bool wasPrewarmedAndSuspended;
@property bool wasRunningAndSuspended;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)allocateClientResources:(id /* block */)arg1;
- (unsigned long long)clientID;
- (bool)clientInterrupted;
- (bool)clientSuspended;
- (void)copyCustomAudioEvent:(unsigned long long)arg1 options:(id)arg2 reply:(id /* block */)arg3;
- (void)createCustomAudioEvent:(id)arg1 format:(id)arg2 frames:(unsigned long long)arg3 options:(id)arg4 reply:(id /* block */)arg5;
- (void)dealloc;
- (void)debugExpectNotifyOnFinishAfter:(double)arg1 reply:(id /* block */)arg2;
- (void)detachSequence:(unsigned long long)arg1;
- (void)fadeClientForSessionInterruption:(bool)arg1 fadeTime:(float)arg2 fadeLevel:(float)arg3 stopAfterFade:(bool)arg4;
- (id)getAsyncDelegateForMethod:(SEL)arg1 errorHandler:(id /* block */)arg2;
- (void)getHapticLatency:(id /* block */)arg1;
- (id)getSyncDelegateForMethod:(SEL)arg1 errorHandler:(id /* block */)arg2;
- (void)handleClientApplicationStateChange:(id)arg1;
- (void)handleClientRouteChange:(id)arg1;
- (void)handleClientSessionInterruptionCommand:(unsigned int)arg1 dictionary:(id)arg2;
- (void)handleConnectionError;
- (id)initWithMaster:(id)arg1 id:(unsigned long long)arg2 connection:(id)arg3 outError:(id*)arg4;
- (void)loadHapticEvent:(id)arg1 reply:(id /* block */)arg2;
- (void)loadHapticSequenceFromData:(id)arg1 reply:(id /* block */)arg2;
- (void)loadHapticSequenceFromEvents:(id)arg1 reply:(id /* block */)arg2;
- (void)loadVibePattern:(id)arg1 reply:(id /* block */)arg2;
- (id)master;
- (void)muteClientForRingerSwitch:(bool)arg1;
- (void)notifyClientOnStopWithReason:(long long)arg1 error:(id)arg2;
- (void)prepareHapticSequence:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)prewarm:(id /* block */)arg1;
- (void)releaseChannels;
- (void)releaseClientResources;
- (void)removeChannel:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)removeCustomAudioEvent:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)requestChannels:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)resetCompletionWatchdogTimer;
- (bool)runningInBackground;
- (void)setChannelEventBehavior:(unsigned long long)arg1 behavior:(unsigned long long)arg2 reply:(id /* block */)arg3;
- (void)setClientInterrupted:(bool)arg1;
- (void)setClientSuspended:(bool)arg1;
- (void)setPlayerBehavior:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)setRunningInBackground:(bool)arg1;
- (void)setSequenceEventBehavior:(unsigned long long)arg1 behavior:(unsigned long long)arg2 channelIndex:(unsigned long long)arg3 reply:(id /* block */)arg4;
- (void)setSessionID:(unsigned int)arg1 isShared:(bool)arg2 reply:(id /* block */)arg3;
- (void)setWasPrewarmedAndSuspended:(bool)arg1;
- (void)setWasRunningAndSuspended:(bool)arg1;
- (bool)setupAudioSessionFromID:(unsigned int)arg1 isShared:(bool)arg2 error:(id*)arg3;
- (void)setupCompletionWatchdogTimerForTime:(double)arg1;
- (void)startRunning:(id /* block */)arg1;
- (void)stopPrewarm;
- (void)stopRunning;
- (void)stopRunning:(id /* block */)arg1;
- (void)unmuteClientAfterSessionInterruption:(float)arg1;
- (bool)wasPrewarmedAndSuspended;
- (bool)wasRunningAndSuspended;

@end
