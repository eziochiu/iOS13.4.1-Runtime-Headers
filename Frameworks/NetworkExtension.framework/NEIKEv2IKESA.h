/* Generated by EzioChiu
   Image: /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension
 */

@interface NEIKEv2IKESA : NSObject {
    NEIKEv2ConfigurationMessage * _activeConfiguration;
    NEIKEv2AuthenticationProtocol * _authProtocolFromPacket;
    NSData * _authenticationDataFromPacket;
    unsigned long long  _childSAModeFromPacket;
    NSArray * _childSAProposalsFromPacket;
    NEIKEv2IKESAProposal * _chosenProposal;
    NEIKEv2ConfigurationMessage * _configMessageFromPacket;
    NEIKEv2IKESAConfiguration * _configuration;
    <NEIKEv2ConfigurationDelegate> * _configurationDelegate;
    NSData * _cookie;
    bool  _detectedIncomingNAT;
    bool  _detectedOutgoingNAT;
    struct OpaqueSecDHContext { } * _dhContext;
    union { 
        union { 
            struct ccec_full_ctx { 
                struct ccec_cp {} *cp; 
                unsigned char pad[8]; 
                struct ccec_projective_point { 
                    unsigned long long xyz[1]; 
                } point[0]; 
            } dhECPKey256[9]; 
            struct ccec_full_ctx { 
                struct ccec_cp {} *cp; 
                unsigned char pad[8]; 
                struct ccec_projective_point { 
                    unsigned long long xyz[1]; 
                } point[0]; 
            } dhECPKey384[13]; 
            struct ccec_full_ctx { 
                struct ccec_cp {} *cp; 
                unsigned char pad[8]; 
                struct ccec_projective_point { 
                    unsigned long long xyz[1]; 
                } point[0]; 
            } dhECPKey521[19]; 
        } dhECPKey; 
        union { 
            unsigned char dhCurveKey25519[32]; 
        } dhCurveKey; 
    }  _dhECKey;
    NSMutableData * _dhPublicKey;
    unsigned long long  _dhPublicKeySize;
    NSData * _dhRemotePublicKey;
    NSMutableData * _digitalSignatureLocalPrivateKey;
    NSMutableData * _digitalSignatureLocalPublicKey;
    NSMutableData * _digitalSignatureRemotePublicKey;
    NEIKEv2EAP * _eapClient;
    bool  _eapInProgress;
    NSMutableData * _encryptCryptoCtx;
    NSError * _error;
    NSMutableData * _fetchedPassword;
    NSMutableData * _fetchedSharedSecret;
    bool  _fragmentationSupported;
    unsigned long long  _ikeSAUniqueIndex;
    unsigned long long  _ikeSessionUniqueIndex;
    NSData * _initiatorCookie2;
    NSArray * _initiatorTrafficSelectorsFromPacket;
    NEIKEv2Identifier * _internalRemoteIdentifier;
    bool  _isInitiator;
    bool  _isRekeying;
    double  _lastReceivedDPD;
    NWAddressEndpoint * _localAddress;
    NSMutableData * _localCertificateIdentity;
    NSData * _localFirstMessage;
    NEIKEv2Identifier * _localIdentifierFromPacket;
    NSData * _localNonce;
    NEIKEv2IKESPI * _localSPI;
    bool  _mobikeSupported;
    NEIKEv2Transport * _natTransport;
    NSString * _outgoingInterfaceName;
    <NEIKEv2PacketDelegate> * _packetDelegate;
    bool  _peerAuthenticated;
    NSObject<OS_dispatch_queue> * _queue;
    NSData * _receivedDestinationHash;
    NWAddressEndpoint * _remoteAddress;
    NSData * _remoteFirstMessage;
    NEIKEv2Identifier * _remoteIdentifierFromPacket;
    NSData * _remoteNonce;
    NEIKEv2DHProtocol * _remotePreferredDHProtocol;
    NEIKEv2IKESPI * _remoteSPI;
    bool  _reportShortDPD;
    NSData * _responderCookie2;
    NSArray * _responderTrafficSelectorsFromPacket;
    NSMutableData * _sKeySeed;
    NEIKEv2SessionConfiguration * _sessionConfiguration;
    unsigned short  _shortDPDCounter;
    bool  _shouldSendStateUpdate;
    NSData * _signHashData;
    NSMutableData * _skAi;
    NSMutableData * _skAr;
    NSMutableData * _skD;
    NSMutableData * _skEi;
    NSMutableData * _skEr;
    NSMutableData * _skPi;
    NSMutableData * _skPr;
    id /* block */  _socketGetBlock;
    unsigned long long  _state;
    NEIKEv2Transport * _tcpTransport;
    NEIKEv2Transport * _transport;
    <NEIKEv2TransportDelegate> * _transportDelegate;
    bool  _useNATTraversal;
    bool  _useTCPEncapsulation;
    bool  _usesPacketDelegate;
}

@property (retain) NEIKEv2ConfigurationMessage *activeConfiguration;
@property (nonatomic, retain) NEIKEv2AuthenticationProtocol *authProtocolFromPacket;
@property (nonatomic, retain) NSData *authenticationDataFromPacket;
@property (nonatomic, readonly) NEIKEv2AuthenticationProtocol *authenticationProtocol;
@property (nonatomic) unsigned long long childSAModeFromPacket;
@property (nonatomic, retain) NSArray *childSAProposalsFromPacket;
@property (retain) NEIKEv2IKESAProposal *chosenProposal;
@property (nonatomic, retain) NEIKEv2ConfigurationMessage *configMessageFromPacket;
@property (retain) NEIKEv2IKESAConfiguration *configuration;
@property <NEIKEv2ConfigurationDelegate> *configurationDelegate;
@property (retain) NSData *cookie;
@property (readonly) NSData *decryptionKey;
@property bool detectedIncomingNAT;
@property bool detectedOutgoingNAT;
@property struct OpaqueSecDHContext { }*dhContext;
@property (retain) NSMutableData *dhPublicKey;
@property unsigned long long dhPublicKeySize;
@property (retain) NSData *dhRemotePublicKey;
@property (retain) NSMutableData *digitalSignatureLocalPrivateKey;
@property (retain) NSMutableData *digitalSignatureLocalPublicKey;
@property (retain) NSMutableData *digitalSignatureRemotePublicKey;
@property (retain) NEIKEv2EAP *eapClient;
@property bool eapInProgress;
@property (retain) NSMutableData *encryptCryptoCtx;
@property (readonly) NSData *encryptionKey;
@property (retain) NSError *error;
@property (retain) NSMutableData *fetchedPassword;
@property (retain) NSMutableData *fetchedSharedSecret;
@property bool fragmentationSupported;
@property (readonly) bool hasTransport;
@property (nonatomic) unsigned long long ikeSAUniqueIndex;
@property (nonatomic) unsigned long long ikeSessionUniqueIndex;
@property (readonly) NWAddressEndpoint *initiatorAddress;
@property (retain) NSData *initiatorCookie2;
@property (retain) NSData *initiatorFirstMessage;
@property (retain) NSData *initiatorNonce;
@property (retain) NEIKEv2IKESPI *initiatorSPI;
@property (nonatomic, retain) NSArray *initiatorTrafficSelectorsFromPacket;
@property (retain) NEIKEv2Identifier *internalRemoteIdentifier;
@property bool isInitiator;
@property bool isRekeying;
@property double lastReceivedDPD;
@property (retain) NWAddressEndpoint *localAddress;
@property (retain) NSMutableData *localCertificateIdentity;
@property (retain) NSData *localFirstMessage;
@property (nonatomic, readonly) NEIKEv2Identifier *localIdentifier;
@property (nonatomic, retain) NEIKEv2Identifier *localIdentifierFromPacket;
@property (readonly) NSData *localIntegrityKey;
@property (retain) NSData *localNonce;
@property (retain) NEIKEv2IKESPI *localSPI;
@property bool mobikeSupported;
@property (retain) NEIKEv2Transport *natTransport;
@property (retain) NSString *outgoingInterfaceName;
@property <NEIKEv2PacketDelegate> *packetDelegate;
@property (readonly) NSMutableData *password;
@property bool peerAuthenticated;
@property (readonly) NEIKEv2DHProtocol *preferredDHProtocol;
@property (retain) NSObject<OS_dispatch_queue> *queue;
@property (retain) NSData *receivedDestinationHash;
@property (retain) NWAddressEndpoint *remoteAddress;
@property (retain) NSData *remoteFirstMessage;
@property (nonatomic, retain) NEIKEv2Identifier *remoteIdentifier;
@property (nonatomic, retain) NEIKEv2Identifier *remoteIdentifierFromPacket;
@property (readonly) NSData *remoteIntegrityKey;
@property (retain) NSData *remoteNonce;
@property (retain) NEIKEv2DHProtocol *remotePreferredDHProtocol;
@property (retain) NEIKEv2IKESPI *remoteSPI;
@property bool reportShortDPD;
@property (readonly) NWAddressEndpoint *responderAddress;
@property (retain) NSData *responderCookie2;
@property (retain) NSData *responderFirstMessage;
@property (retain) NSData *responderNonce;
@property (retain) NEIKEv2IKESPI *responderSPI;
@property (nonatomic, retain) NSArray *responderTrafficSelectorsFromPacket;
@property (retain) NSMutableData *sKeySeed;
@property (retain) NEIKEv2SessionConfiguration *sessionConfiguration;
@property (readonly) NSMutableData *sharedSecret;
@property unsigned short shortDPDCounter;
@property bool shouldSendStateUpdate;
@property (retain) NSData *signHashData;
@property (retain) NSMutableData *skAi;
@property (retain) NSMutableData *skAr;
@property (retain) NSMutableData *skD;
@property (retain) NSMutableData *skEi;
@property (retain) NSMutableData *skEr;
@property (retain) NSMutableData *skPi;
@property (retain) NSMutableData *skPr;
@property (copy) id /* block */ socketGetBlock;
@property unsigned long long state;
@property (retain) NEIKEv2Transport *tcpTransport;
@property (retain) NEIKEv2Transport *transport;
@property <NEIKEv2TransportDelegate> *transportDelegate;
@property bool useNATTraversal;
@property bool useTCPEncapsulation;
@property bool usesPacketDelegate;

+ (bool)checkValidityOfDigitalSignature:(id)arg1 authenticationProtocol:(id)arg2 sessionConfiguration:(id)arg3 remoteSignedOctets:(id)arg4;
+ (bool)checkValidityOfDigitalSignature:(id)arg1 sessionConfiguration:(id)arg2 remoteSignedOctets:(id)arg3;
+ (id)copySharedSecretFromConfig:(id)arg1;
+ (id)createAuthenticationDataForSharedSecret:(id)arg1 octets:(id)arg2 prfProtocol:(id)arg3;

- (void).cxx_destruct;
- (id)activeConfiguration;
- (void)assignRemoteSPI:(id)arg1;
- (void)assignRemoteSPI:(id)arg1 disableWildCard:(bool)arg2;
- (id)authProtocolFromPacket;
- (id)authenticationDataFromPacket;
- (id)authenticationProtocol;
- (bool)calculateSKEYSEEDDerivatives;
- (bool)calculateSKEYSEEDForRekey:(id)arg1;
- (bool)checkNonCertAuthData:(id)arg1;
- (bool)checkValidityOfCertificates:(id)arg1 signature:(id)arg2;
- (bool)checkValidityOfDigitalSignature:(id)arg1;
- (unsigned long long)childSAModeFromPacket;
- (id)childSAProposalsFromPacket;
- (id)chosenProposal;
- (id)configMessageFromPacket;
- (id)configuration;
- (id)configurationDelegate;
- (id)cookie;
- (id)copyCertSignedData:(id)arg1;
- (id)copyChildConfig;
- (id)copyDigitalSignatureSignedData:(id)arg1;
- (id)copyForRekey;
- (id)copyInitiatorIdentifier;
- (id)copyLocalCertificateData;
- (struct __SecIdentity { }*)copyLocalSecIdentity;
- (id)copyRemoteCertificateAuthorityArray;
- (id)copyRemoteCertificateAuthorityDataArray;
- (id)copyRemoteCertificateAuthorityHashData;
- (id)copyResponderIdentifier;
- (id)copySessionConfig;
- (id)copyTransport;
- (id /* block */)copyValidateAuthBlock;
- (id)createAuthenticationDataForSharedSecret:(id)arg1 octets:(id)arg2;
- (id)createInitiatorAuthenticationData;
- (id)createInitiatorEAPAuthenticationData;
- (id)createInitiatorSignedOctets;
- (id)createLocalSPIForLocalAddress:(id)arg1 remoteAddress:(id)arg2;
- (id)createRemoteSignedOctets;
- (id)createResponderAuthenticationData;
- (id)createResponderEAPAuthenticationData;
- (id)createResponderSignedOctets;
- (void)dealloc;
- (id)decryptionKey;
- (id)description;
- (void)detachTransportWithShouldInvalidate:(bool)arg1;
- (bool)detectedIncomingNAT;
- (bool)detectedOutgoingNAT;
- (struct OpaqueSecDHContext { }*)dhContext;
- (unsigned char*)dhCurveKeyForDesc:(int)arg1;
- (struct ccec_full_ctx { struct ccec_cp {} *x1; unsigned char x2[8]; struct ccec_projective_point { unsigned long long x_3_1_1[1]; } x3[0]; }*)dhECPKeyForDesc:(int)arg1;
- (id)dhPublicKey;
- (unsigned long long)dhPublicKeySize;
- (id)dhRemotePublicKey;
- (id)digitalSignatureLocalPrivateKey;
- (id)digitalSignatureLocalPublicKey;
- (id)digitalSignatureRemotePublicKey;
- (void)disableWildcard;
- (unsigned long long)dpdRetryIntervalMilliseconds;
- (id)eapClient;
- (bool)eapInProgress;
- (id)encryptCryptoCtx;
- (id)encryptionKey;
- (id)error;
- (bool)fetchLocalCertificateIdentity;
- (id)fetchedPassword;
- (id)fetchedSharedSecret;
- (bool)fragmentationSupported;
- (bool)generateAllValuesForRekey:(id)arg1;
- (bool)generateLocalDHValues;
- (bool)generateLocalNonce;
- (bool)generateLocalValues;
- (bool)hasTransport;
- (unsigned long long)ikeSAUniqueIndex;
- (unsigned long long)ikeSessionUniqueIndex;
- (id)initIKESAWithConfiguration:(id)arg1 sessionConfiguration:(id)arg2 queue:(id)arg3 initialTransport:(id)arg4 transportDelegate:(id)arg5 socketGetBlock:(id /* block */)arg6 packetDelegate:(id)arg7 configurationDelegate:(id)arg8 ikeSessionUniqueIndex:(unsigned long long)arg9;
- (id)initiatorAddress;
- (id)initiatorCookie2;
- (id)initiatorFirstMessage;
- (id)initiatorNonce;
- (id)initiatorSPI;
- (id)initiatorTrafficSelectorsFromPacket;
- (id)internalRemoteIdentifier;
- (bool)isInitiator;
- (bool)isRekeying;
- (double)lastReceivedDPD;
- (id)localAddress;
- (id)localCertificateIdentity;
- (id)localFirstMessage;
- (id)localIdentifier;
- (id)localIdentifierFromPacket;
- (id)localIntegrityKey;
- (id)localNonce;
- (id)localSPI;
- (bool)mobikeSupported;
- (id)natTransport;
- (id)outgoingInterfaceName;
- (id)packetDelegate;
- (id)password;
- (bool)peerAuthenticated;
- (id)preferredDHProtocol;
- (id)queue;
- (id)receivedDestinationHash;
- (id)remoteAddress;
- (id)remoteFirstMessage;
- (id)remoteIdentifier;
- (id)remoteIdentifierFromPacket;
- (id)remoteIntegrityKey;
- (id)remoteNonce;
- (id)remotePreferredDHProtocol;
- (id)remoteSPI;
- (bool)reportShortDPD;
- (void)reset;
- (bool)resetRemoteAddress:(id)arg1;
- (void)resetSessionConfiguration:(id)arg1;
- (void)resetShortDPDParameters;
- (id)responderAddress;
- (id)responderCookie2;
- (id)responderFirstMessage;
- (id)responderNonce;
- (id)responderSPI;
- (id)responderTrafficSelectorsFromPacket;
- (void)resyncAddress;
- (id)sKeySeed;
- (void)sentStateUpdate;
- (id)sessionConfiguration;
- (void)setActiveConfiguration:(id)arg1;
- (void)setAuthProtocolFromPacket:(id)arg1;
- (void)setAuthenticationDataFromPacket:(id)arg1;
- (void)setChildSAModeFromPacket:(unsigned long long)arg1;
- (void)setChildSAProposalsFromPacket:(id)arg1;
- (void)setChosenProposal:(id)arg1;
- (void)setConfigMessageFromPacket:(id)arg1;
- (void)setConfiguration:(id)arg1;
- (void)setConfigurationDelegate:(id)arg1;
- (void)setCookie:(id)arg1;
- (void)setDetectedIncomingNAT:(bool)arg1;
- (void)setDetectedOutgoingNAT:(bool)arg1;
- (void)setDhContext:(struct OpaqueSecDHContext { }*)arg1;
- (void)setDhPublicKey:(id)arg1;
- (void)setDhPublicKeySize:(unsigned long long)arg1;
- (void)setDhRemotePublicKey:(id)arg1;
- (void)setDigitalSignatureLocalPrivateKey:(id)arg1;
- (void)setDigitalSignatureLocalPublicKey:(id)arg1;
- (void)setDigitalSignatureRemotePublicKey:(id)arg1;
- (void)setEapClient:(id)arg1;
- (void)setEapInProgress:(bool)arg1;
- (void)setEncryptCryptoCtx:(id)arg1;
- (void)setError:(id)arg1;
- (void)setFetchedPassword:(id)arg1;
- (void)setFetchedSharedSecret:(id)arg1;
- (void)setFragmentationSupported:(bool)arg1;
- (void)setIkeSAUniqueIndex:(unsigned long long)arg1;
- (void)setIkeSessionUniqueIndex:(unsigned long long)arg1;
- (void)setInitiatorCookie2:(id)arg1;
- (void)setInitiatorFirstMessage:(id)arg1;
- (void)setInitiatorNonce:(id)arg1;
- (void)setInitiatorSPI:(id)arg1;
- (void)setInitiatorTrafficSelectorsFromPacket:(id)arg1;
- (void)setInternalRemoteIdentifier:(id)arg1;
- (void)setIsInitiator:(bool)arg1;
- (void)setIsRekeying:(bool)arg1;
- (void)setLastReceivedDPD:(double)arg1;
- (void)setLocalAddress:(id)arg1;
- (void)setLocalCertificateIdentity:(id)arg1;
- (void)setLocalFirstMessage:(id)arg1;
- (void)setLocalIdentifierFromPacket:(id)arg1;
- (void)setLocalNonce:(id)arg1;
- (void)setLocalSPI:(id)arg1;
- (void)setMobikeSupported:(bool)arg1;
- (void)setNatTransport:(id)arg1;
- (void)setOutgoingInterfaceName:(id)arg1;
- (void)setPacketDelegate:(id)arg1;
- (void)setPeerAuthenticated:(bool)arg1;
- (void)setQueue:(id)arg1;
- (void)setReceivedDestinationHash:(id)arg1;
- (void)setRemoteAddress:(id)arg1;
- (void)setRemoteFirstMessage:(id)arg1;
- (void)setRemoteIdentifier:(id)arg1;
- (void)setRemoteIdentifierFromPacket:(id)arg1;
- (void)setRemoteNonce:(id)arg1;
- (void)setRemotePreferredDHProtocol:(id)arg1;
- (void)setRemoteSPI:(id)arg1;
- (void)setReportShortDPD:(bool)arg1;
- (void)setResponderCookie2:(id)arg1;
- (void)setResponderFirstMessage:(id)arg1;
- (void)setResponderNonce:(id)arg1;
- (void)setResponderSPI:(id)arg1;
- (void)setResponderTrafficSelectorsFromPacket:(id)arg1;
- (void)setSKeySeed:(id)arg1;
- (void)setSessionConfiguration:(id)arg1;
- (void)setShortDPDCounter:(unsigned short)arg1;
- (void)setShouldSendStateUpdate:(bool)arg1;
- (void)setSignHashData:(id)arg1;
- (void)setSkAi:(id)arg1;
- (void)setSkAr:(id)arg1;
- (void)setSkD:(id)arg1;
- (void)setSkEi:(id)arg1;
- (void)setSkEr:(id)arg1;
- (void)setSkPi:(id)arg1;
- (void)setSkPr:(id)arg1;
- (void)setSocketGetBlock:(id /* block */)arg1;
- (void)setState:(unsigned long long)arg1;
- (void)setState:(unsigned long long)arg1 error:(id)arg2;
- (void)setTcpTransport:(id)arg1;
- (void)setTransport:(id)arg1;
- (void)setTransportDelegate:(id)arg1;
- (void)setUseNATTraversal:(bool)arg1;
- (void)setUseTCPEncapsulation:(bool)arg1;
- (void)setUsesPacketDelegate:(bool)arg1;
- (id)sharedSecret;
- (unsigned short)shortDPDCounter;
- (bool)shouldReceiveWildcard;
- (bool)shouldReportShortDPD;
- (bool)shouldSendStateUpdate;
- (id)signHashData;
- (id)skAi;
- (id)skAr;
- (id)skD;
- (id)skEi;
- (id)skEr;
- (id)skPi;
- (id)skPr;
- (id /* block */)socketGetBlock;
- (unsigned long long)state;
- (bool)supportsSignHash:(unsigned long long)arg1;
- (bool)switchToNATTraversalPorts;
- (bool)switchToTCPEncapsulation;
- (id)tcpTransport;
- (id)transport;
- (id)transportDelegate;
- (void)updateConfiguration:(id)arg1;
- (bool)useNATTraversal;
- (bool)useTCPEncapsulation;
- (bool)usesPacketDelegate;

@end
