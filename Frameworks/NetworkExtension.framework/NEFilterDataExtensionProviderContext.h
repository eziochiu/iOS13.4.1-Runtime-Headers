/* Generated by EzioChiu
   Image: /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension
 */

@interface NEFilterDataExtensionProviderContext : NEFilterExtensionProviderContext <NEFilterDataExtensionProviderHostProtocol, NEFilterDataExtensionProviderProtocol> {
    NSDictionary * _URLAppendStringMap;
    NSMutableDictionary * _browserFlows;
    NSMutableDictionary * _channelFlows;
    NSObject<OS_xpc_object> * _clientListener;
    bool  _controlProviderExists;
    NSXPCListenerEndpoint * _listenerEndpoint;
    NSMutableArray * _pendingConnections;
    NSDictionary * _remediationMap;
    NSMutableArray * _socketExceptions;
    NSMutableDictionary * _socketFlows;
    NSObject<OS_dispatch_source> * _source;
}

@property (nonatomic, retain) NSDictionary *URLAppendStringMap;
@property (nonatomic, retain) NSMutableDictionary *browserFlows;
@property (nonatomic, retain) NSMutableDictionary *channelFlows;
@property (nonatomic, retain) NSObject<OS_xpc_object> *clientListener;
@property (nonatomic) bool controlProviderExists;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSXPCListenerEndpoint *listenerEndpoint;
@property (nonatomic, retain) NSMutableArray *pendingConnections;
@property (nonatomic, retain) NSDictionary *remediationMap;
@property (nonatomic, retain) NSMutableArray *socketExceptions;
@property (nonatomic, retain) NSMutableDictionary *socketFlows;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *source;
@property (readonly) Class superclass;

+ (id)_extensionAuxiliaryHostProtocol;
+ (id)_extensionAuxiliaryVendorProtocol;

- (void).cxx_destruct;
- (id)URLAppendStringMap;
- (void)acceptNewClientConnection:(id)arg1;
- (id)adjustDataToFilter:(id)arg1 startOffset:(unsigned long long*)arg2 flow:(id)arg3 direction:(long long)arg4;
- (void)applySettings:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)blessClient:(id)arg1;
- (id)browserFlows;
- (id)channelFlows;
- (id)clientListener;
- (void)closeBrowserFilterFlow:(id)arg1;
- (void)closeChannelFlow:(id)arg1;
- (void)closeFlow:(id)arg1;
- (void)closePendingConnections;
- (void)closeSocketFlow:(id)arg1 socketID:(unsigned long long)arg2;
- (bool)controlProviderExists;
- (id)extensionPoint;
- (void)fetchCurrentRulesForFlow:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)fetchProviderConnectionWithCompletionHandler:(id /* block */)arg1;
- (void)getSourceAppInfo:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)handleAddDataMessage:(id)arg1 filloutReply:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleChannelMessageFlowFinish:(id)arg1 filloutReply:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleChannelMessageMoreData:(id)arg1 filloutReply:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleChannelMessageStatsReport:(id)arg1 filloutReply:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleClientMessage:(id)arg1 filloutReply:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleData:(id)arg1 offset:(unsigned long long)arg2 forFlow:(id)arg3 direction:(long long)arg4 reply:(id)arg5 controlSocket:(int)arg6 completionHandler:(id /* block */)arg7;
- (void)handleDataCompleteForFlow:(id)arg1 direction:(long long)arg2 reply:(id)arg3 controlSocket:(int)arg4 completionHandler:(id /* block */)arg5;
- (void)handleDataCompleteMessage:(id)arg1 filloutReply:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleNewChannelFlowMessage:(id)arg1 filloutReply:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleNewFlow:(id)arg1 reply:(id)arg2 controlSocket:(int)arg3 completionHandler:(id /* block */)arg4;
- (void)handleNewFlowMessage:(id)arg1 filloutReply:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleRemediationMessage:(id)arg1 filloutReply:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleRulesChanged;
- (void)handleSocketSourceEventWithSocket:(int)arg1;
- (id)listenerEndpoint;
- (id)pendingConnections;
- (void)provideRemediationMap:(id)arg1;
- (void)provideURLAppendStringMap:(id)arg1;
- (void)providerControlSocketFileHandle:(id)arg1;
- (void)purgeData:(int)arg1 size:(int)arg2 buf:(char *)arg3 bufSize:(int)arg4;
- (id)remediationMap;
- (void)report:(id)arg1;
- (void)reportFlow:(id)arg1 forVerdict:(id)arg2 absoluteVerdict:(id)arg3;
- (void)reportFlow:(id)arg1 forVerdict:(id)arg2 event:(long long)arg3;
- (void)reportFlowClosed:(id)arg1;
- (void)reportFlowStats:(id)arg1;
- (void)resumeFlow:(id)arg1 withVerdict:(id)arg2;
- (void)sendBrowserContentFilterServerRequest;
- (void)sendSocketContentFilterRequest;
- (void)setBrowserFlows:(id)arg1;
- (void)setChannelFlows:(id)arg1;
- (void)setClientListener:(id)arg1;
- (void)setControlProviderExists:(bool)arg1;
- (void)setListenerEndpoint:(id)arg1;
- (void)setPendingConnections:(id)arg1;
- (void)setRemediationMap:(id)arg1;
- (void)setSocketExceptions:(id)arg1;
- (void)setSocketFlows:(id)arg1;
- (void)setSource:(id)arg1;
- (void)setURLAppendStringMap:(id)arg1;
- (void)setupSocketContentFilterWithControlSocket:(int)arg1;
- (void)setupSocketSourceWithControlSocket:(int)arg1;
- (id)socketExceptions;
- (id)socketFlows;
- (id)source;
- (void)startFilterWithOptions:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)stopWithReason:(int)arg1;
- (void)tearDownConnection:(id)arg1;
- (void)teardownSocketSource;
- (void)updateFlow:(id)arg1 withVerdict:(id)arg2 forDirection:(long long)arg3;

@end
