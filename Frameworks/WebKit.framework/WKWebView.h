/* Generated by EzioChiu
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKWebView : UIView <UIResponderStandardEditActions, UIScrollViewDelegate, WBUFormAutoFillWebView> {
    unsigned long long  _activeFocusedStateRetainCount;
    bool  _allowsBackForwardNavigationGestures;
    bool  _allowsLinkPreview;
    bool  _allowsViewportShrinkToFit;
    double  _animatedResizeOriginalContentWidth;
    bool  _avoidsUnsafeArea;
    struct Vector<WTF::Function<void ()>, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc>="m_buffer"^{Function<void ()> {}  _callbacksDeferredDuringResize;
    bool  _commitDidRestoreScrollPosition;
    struct RetainPtr<WKWebViewConfiguration> { 
        void *m_ptr; 
    }  _configuration;
    struct RetainPtr<WKContentView> { 
        void *m_ptr; 
    }  _contentView;
    unsigned long long  _currentDynamicViewportSizeUpdateID;
    bool  _currentlyAdjustingScrollViewInsetsForKeyboard;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _customContentFixedOverlayView;
    struct RetainPtr<UIView<WKWebViewContentProvider> > { 
        void *m_ptr; 
    }  _customContentView;
    bool  _didDeferUpdateVisibleContentRectsForAnyReason;
    bool  _didDeferUpdateVisibleContentRectsForUIScrollViewDelegateCallback;
    bool  _didDeferUpdateVisibleContentRectsForUnstableScrollView;
    bool  _didScrollSinceLastTimerFire;
    unsigned long long  _dragInteractionPolicy;
    int  _dynamicViewportUpdateMode;
    struct RetainPtr<NSTimer> { 
        void *m_ptr; 
    }  _enclosingScrollViewScrollTimer;
    bool  _fastClickingIsDisabled;
    struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { 
        unsigned long long m_identifier; 
    }  _firstPaintAfterCommitLoadTransactionID;
    struct Optional<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> > { 
        bool init_; 
        union constexpr_storage_t<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> > { 
            unsigned char dummy_; 
            struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { 
                unsigned long long m_identifier; 
            } value_; 
        } storage_; 
    }  _firstTransactionIDAfterPageRestore;
    unsigned long long  _focusPreservationCount;
    struct Optional<CGRect> { 
        bool init_; 
        union constexpr_storage_t<CGRect> { 
            unsigned char dummy_; 
            struct CGRect { 
                struct CGPoint { 
                    double x; 
                    double y; 
                } origin; 
                struct CGSize { 
                    double width; 
                    double height; 
                } size; 
            } value_; 
        } storage_; 
    }  _frozenUnobscuredContentRect;
    struct Optional<CGRect> { 
        bool init_; 
        union constexpr_storage_t<CGRect> { 
            unsigned char dummy_; 
            struct CGRect { 
                struct CGPoint { 
                    double x; 
                    double y; 
                } origin; 
                struct CGSize { 
                    double width; 
                    double height; 
                } size; 
            } value_; 
        } storage_; 
    }  _frozenVisibleContentRect;
    struct RetainPtr<WKFullScreenWindowController> { 
        void *m_ptr; 
    }  _fullScreenWindowController;
    struct unique_ptr<WebKit::ViewGestureController, std::__1::default_delete<WebKit::ViewGestureController> > { 
        struct __compressed_pair<WebKit::ViewGestureController *, std::__1::default_delete<WebKit::ViewGestureController> > { 
            struct ViewGestureController {} *__value_; 
        } __ptr_; 
    }  _gestureController;
    bool  _hasCommittedLoadForMainFrame;
    bool  _hasScheduledVisibleRectUpdate;
    bool  _haveSetObscuredInsets;
    bool  _haveSetUnobscuredSafeAreaInsets;
    struct unique_ptr<WebKit::IconLoadingDelegate, std::__1::default_delete<WebKit::IconLoadingDelegate> > { 
        struct __compressed_pair<WebKit::IconLoadingDelegate *, std::__1::default_delete<WebKit::IconLoadingDelegate> > { 
            struct IconLoadingDelegate {} *__value_; 
        } __ptr_; 
    }  _iconLoadingDelegate;
    double  _initialScaleFactor;
    struct WeakObjCPtr<id<_WKInputDelegate> > { 
        id m_weakReference; 
    }  _inputDelegate;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputViewBounds;
    long long  _interfaceOrientationOverride;
    bool  _invokingUIScrollViewDelegateCallback;
    bool  _isChangingObscuredInsetsInteractively;
    double  _lastAdjustmentForScroller;
    struct Optional<int> { 
        bool init_; 
        union constexpr_storage_t<int> { 
            unsigned char dummy_; 
            int value_; 
        } storage_; 
    }  _lastSentDeviceOrientation;
    struct Optional<WebCore::FloatSize> { 
        bool init_; 
        union constexpr_storage_t<WebCore::FloatSize> { 
            unsigned char dummy_; 
            struct FloatSize { 
                float m_width; 
                float m_height; 
            } value_; 
        } storage_; 
    }  _lastSentMaximumUnobscuredSize;
    struct Optional<WebCore::FloatSize> { 
        bool init_; 
        union constexpr_storage_t<WebCore::FloatSize> { 
            unsigned char dummy_; 
            struct FloatSize { 
                float m_width; 
                float m_height; 
            } value_; 
        } storage_; 
    }  _lastSentViewLayoutSize;
    struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { 
        unsigned long long m_identifier; 
    }  _lastTransactionID;
    struct Optional<CGSize> { 
        bool init_; 
        union constexpr_storage_t<CGSize> { 
            unsigned char dummy_; 
            struct CGSize { 
                double width; 
                double height; 
            } value_; 
        } storage_; 
    }  _maximumUnobscuredSizeOverride;
    struct unique_ptr<WebKit::NavigationState, std::__1::default_delete<WebKit::NavigationState> > { 
        struct __compressed_pair<WebKit::NavigationState *, std::__1::default_delete<WebKit::NavigationState> > { 
            struct NavigationState {} *__value_; 
        } __ptr_; 
    }  _navigationState;
    bool  _needsResetViewStateAfterCommitLoadForMainFrame;
    unsigned long long  _obscuredInsetEdgesAffectedBySafeArea;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _obscuredInsets;
    struct RectEdges<float> { 
        struct array<float, 4> { 
            float __elems_[4]; 
        } m_sides; 
    }  _obscuredInsetsWhenSaved;
    unsigned long long  _observedRenderingProgressEvents;
    bool  _overridesInterfaceOrientation;
    struct RefPtr<WebKit::WebPageProxy, WTF::DumbPtrTraits<WebKit::WebPageProxy> > { 
        struct WebPageProxy {} *m_ptr; 
    }  _page;
    struct RetainPtr<WKPasswordView> { 
        void *m_ptr; 
    }  _passwordView;
    struct RetainPtr<_WKRemoteObjectRegistry> { 
        void *m_ptr; 
    }  _remoteObjectRegistry;
    struct CATransform3D { 
        double m11; 
        double m12; 
        double m13; 
        double m14; 
        double m21; 
        double m22; 
        double m23; 
        double m24; 
        double m31; 
        double m32; 
        double m33; 
        double m34; 
        double m41; 
        double m42; 
        double m43; 
        double m44; 
    }  _resizeAnimationTransformAdjustments;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _resizeAnimationView;
    struct Optional<bool> { 
        bool init_; 
        union constexpr_storage_t<bool> { 
            unsigned char dummy_; 
            bool value_; 
        } storage_; 
    }  _resolutionForShareSheetImmediateCompletionForTesting;
    struct RetainPtr<WKSafeBrowsingWarning> { 
        void *m_ptr; 
    }  _safeBrowsingWarning;
    double  _scaleToRestore;
    struct Optional<WebCore::FloatPoint> { 
        bool init_; 
        union constexpr_storage_t<WebCore::FloatPoint> { 
            unsigned char dummy_; 
            struct FloatPoint { 
                float m_x; 
                float m_y; 
            } value_; 
        } storage_; 
    }  _scrollOffsetToRestore;
    struct RetainPtr<WKScrollView> { 
        void *m_ptr; 
    }  _scrollView;
    struct Color { 
        union { 
            unsigned long long rgbaAndFlags; 
            struct ExtendedColor {} *extendedColor; 
        } m_colorData; 
    }  _scrollViewBackgroundColor;
    unsigned long long  _selectionAttributes;
    struct RetainPtr<NSMutableArray> { 
        void *m_ptr; 
    }  _stableStatePresentationUpdateCallbacks;
    struct WeakObjCPtr<id<_WKTextManipulationDelegate> > { 
        id m_weakReference; 
    }  _textManipulationDelegate;
    struct Optional<WTF::MonotonicTime> { 
        bool init_; 
        union constexpr_storage_t<WTF::MonotonicTime> { 
            unsigned char dummy_; 
            struct MonotonicTime { 
                double m_value; 
            } value_; 
        } storage_; 
    }  _timeOfFirstVisibleContentRectUpdateWithPendingCommit;
    struct MonotonicTime { 
        double m_value; 
    }  _timeOfLastVisibleContentRectUpdate;
    struct MonotonicTime { 
        double m_value; 
    }  _timeOfRequestForVisibleContentRectUpdate;
    double  _totalScrollViewBottomInsetAdjustmentForKeyboard;
    struct unique_ptr<WebKit::UIDelegate, std::__1::default_delete<WebKit::UIDelegate> > { 
        struct __compressed_pair<WebKit::UIDelegate *, std::__1::default_delete<WebKit::UIDelegate> > { 
            struct UIDelegate {} *__value_; 
        } __ptr_; 
    }  _uiDelegate;
    struct Optional<WebCore::FloatPoint> { 
        bool init_; 
        union constexpr_storage_t<WebCore::FloatPoint> { 
            unsigned char dummy_; 
            struct FloatPoint { 
                float m_x; 
                float m_y; 
            } value_; 
        } storage_; 
    }  _unobscuredCenterToRestore;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _unobscuredSafeAreaInsets;
    bool  _usePlatformFindUI;
    struct Optional<CGSize> { 
        bool init_; 
        union constexpr_storage_t<CGSize> { 
            unsigned char dummy_; 
            struct CGSize { 
                double width; 
                double height; 
            } value_; 
        } storage_; 
    }  _viewLayoutSizeOverride;
    bool  _viewportMetaTagCameFromImageDocument;
    double  _viewportMetaTagWidth;
    bool  _viewportMetaTagWidthWasExplicit;
    struct Vector<WTF::BlockPtr<void ()>, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc>="m_buffer"^{BlockPtr<void ()> {}  _visibleContentRectUpdateCallbacks;
    bool  _visibleContentRectUpdateScheduledFromScrollViewInStableState;
    bool  _waitingForCommitAfterAnimatedResize;
    bool  _waitingForEndAnimatedResize;
}

@property (nonatomic) <WKUIDelegate> *UIDelegate;
@property (nonatomic, readonly, copy) NSURL *URL;
@property (nonatomic, readonly) NSString *_MIMEType;
@property (setter=_setAddsVisitedLinks:, nonatomic) bool _addsVisitedLinks;
@property (nonatomic, readonly) bool _allowsDoubleTapGestures;
@property (getter=_allowsMediaDocumentInlinePlayback, setter=_setAllowsMediaDocumentInlinePlayback:, nonatomic) bool _allowsMediaDocumentInlinePlayback;
@property (setter=_setAllowsRemoteInspection:, nonatomic) bool _allowsRemoteInspection;
@property (setter=_setAllowsViewportShrinkToFit:, nonatomic) bool _allowsViewportShrinkToFit;
@property (setter=_setApplicationNameForUserAgent:, copy) NSString *_applicationNameForUserAgent;
@property (setter=_setBackgroundExtendsBeyondPage:, nonatomic) bool _backgroundExtendsBeyondPage;
@property (nonatomic, readonly) bool _canTogglePictureInPicture;
@property (nonatomic, readonly) NSArray *_certificateChain;
@property (nonatomic, readonly) NSURL *_committedURL;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _computedObscuredInset;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _computedUnobscuredSafeAreaInset;
@property (nonatomic, readonly) WKWebViewContentProviderRegistry *_contentProviderRegistry;
@property (nonatomic, readonly) bool _contentViewIsFirstResponder;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _contentVisibleRect;
@property (setter=_setCustomUserAgent:, copy) NSString *_customUserAgent;
@property (nonatomic, readonly) NSData *_dataForDisplayedPDF;
@property (setter=_setDiagnosticLoggingDelegate:, nonatomic) <_WKDiagnosticLoggingDelegate> *_diagnosticLoggingDelegate;
@property (getter=_isDisplayingPDF, nonatomic, readonly) bool _displayingPDF;
@property (getter=_isDisplayingStandaloneImageDocument, nonatomic, readonly) bool _displayingStandaloneImageDocument;
@property (getter=_isDisplayingStandaloneMediaDocument, nonatomic, readonly) bool _displayingStandaloneMediaDocument;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _dragCaretRect;
@property (setter=_setDragInteractionPolicy:, nonatomic) unsigned long long _dragInteractionPolicy;
@property (getter=_isEditable, setter=_setEditable:, nonatomic) bool _editable;
@property (nonatomic, readonly) UIView *_enclosingViewForExposedRectComputation;
@property (setter=_setFindDelegate:, nonatomic) <_WKFindDelegate> *_findDelegate;
@property (setter=_setFixedLayoutSize:, nonatomic) struct CGSize { double x1; double x2; } _fixedLayoutSize;
@property (setter=_setFullscreenDelegate:, nonatomic) <_WKFullscreenDelegate> *_fullscreenDelegate;
@property (setter=_setGapBetweenPages:, nonatomic) double _gapBetweenPages;
@property (nonatomic, readonly) WKBrowsingContextHandle *_handle;
@property (nonatomic, readonly) bool _hasInspectorFrontend;
@property (nonatomic, readonly) bool _hasServiceWorkerBackgroundActivityForTesting;
@property (nonatomic, readonly) bool _hasServiceWorkerForegroundActivityForTesting;
@property (nonatomic, readonly) bool _haveSetObscuredInsets;
@property (setter=_setHistoryDelegate:, nonatomic) <WKHistoryDelegatePrivate> *_historyDelegate;
@property (setter=_setIconLoadingDelegate:, nonatomic) <_WKIconLoadingDelegate> *_iconLoadingDelegate;
@property (setter=_setInputDelegate:, nonatomic) <_WKInputDelegate> *_inputDelegate;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _inputViewBounds;
@property (nonatomic, readonly) _WKInspector *_inspector;
@property (setter=_setInterfaceOrientationOverride:, nonatomic) long long _interfaceOrientationOverride;
@property (nonatomic, readonly) bool _isBackground;
@property (nonatomic, readonly) bool _isInFullscreen;
@property (nonatomic, readonly) bool _isPictureInPictureActive;
@property (setter=_setLayoutMode:, nonatomic) unsigned long long _layoutMode;
@property (nonatomic, readonly) _WKFrameHandle *_mainFrame;
@property (nonatomic, readonly) NSURL *_mainFrameURL;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } _maximumUnobscuredSizeOverride;
@property (setter=_setMediaCaptureEnabled:, nonatomic) bool _mediaCaptureEnabled;
@property (nonatomic, readonly) unsigned long long _mediaCaptureState;
@property (setter=_setMinimumEffectiveDeviceWidth:, nonatomic) double _minimumEffectiveDeviceWidth;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } _minimumLayoutSizeOverride;
@property (nonatomic, readonly) bool _negotiatedLegacyTLS;
@property (nonatomic, readonly) bool _networkRequestsInProgress;
@property (setter=_setObscuredInsetEdgesAffectedBySafeArea:, nonatomic) unsigned long long _obscuredInsetEdgesAffectedBySafeArea;
@property (setter=_setObscuredInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _obscuredInsets;
@property (setter=_setObservedRenderingProgressEvents:, nonatomic) unsigned long long _observedRenderingProgressEvents;
@property (readonly) unsigned long long _pageCount;
@property (setter=_setPageLength:, nonatomic) double _pageLength;
@property (setter=_setPageZoomFactor:, nonatomic) double _pageZoomFactor;
@property (setter=_setPaginationBehavesLikeColumns:, nonatomic) bool _paginationBehavesLikeColumns;
@property (setter=_setPaginationLineGridEnabled:, nonatomic) bool _paginationLineGridEnabled;
@property (setter=_setPaginationMode:, nonatomic) long long _paginationMode;
@property (nonatomic, readonly) WKPasswordView *_passwordView;
@property (getter=_isPlayingAudio, nonatomic, readonly) bool _playingAudio;
@property (nonatomic, readonly) <_WKWebViewPrintProvider> *_printProvider;
@property (nonatomic, readonly) int _provisionalWebProcessIdentifier;
@property (setter=_setRemoteInspectionNameOverride:, nonatomic, copy) NSString *_remoteInspectionNameOverride;
@property (nonatomic, readonly) id _remoteObjectRegistry;
@property (nonatomic, readonly) NSURL *_resourceDirectoryURL;
@property (getter=_isRetainingActiveFocusedState, nonatomic, readonly) bool _retainingActiveFocusedState;
@property (nonatomic, readonly) bool _safeAreaShouldAffectObscuredInsets;
@property (nonatomic, readonly) UIView *_safeBrowsingWarning;
@property (nonatomic, readonly) NSArray *_scrollPerformanceData;
@property (setter=_setScrollPerformanceDataCollectionEnabled:, nonatomic) bool _scrollPerformanceDataCollectionEnabled;
@property (nonatomic, readonly) NSString *_scrollingTreeAsText;
@property (setter=_setScrollingUpdatesDisabledForTesting:, nonatomic) bool _scrollingUpdatesDisabledForTesting;
@property (nonatomic, readonly) unsigned long long _selectionAttributes;
@property (nonatomic, readonly) long long _selectionGranularity;
@property (nonatomic, readonly) _WKSessionState *_sessionState;
@property (nonatomic, readonly) NSData *_sessionStateData;
@property (nonatomic, readonly) UIView *_sf_effectiveViewToLayOut;
@property (setter=_sf_setSecurityInfo:, nonatomic, retain) _SFSecurityInfo *_sf_securityInfo;
@property (nonatomic, readonly) bool _shouldAvoidResizingWhenInputViewBoundsChange;
@property (getter=_isShowingNavigationGestureSnapshot, nonatomic, readonly) bool _showingNavigationGestureSnapshot;
@property (nonatomic, readonly) NSNumber *_stableStateOverride;
@property (nonatomic, readonly) bool _stylusTapGestureShouldCreateEditableImage;
@property (nonatomic, readonly) NSString *_suggestedFilenameForDisplayedPDF;
@property (nonatomic, readonly) bool _supportsTextZoom;
@property (setter=_setTextManipulationDelegate:, nonatomic) <_WKTextManipulationDelegate> *_textManipulationDelegate;
@property (setter=_setTextZoomFactor:, nonatomic) double _textZoomFactor;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _uiTextCaretRect;
@property (nonatomic, readonly) NSArray *_uiTextSelectionRects;
@property (setter=_setUnobscuredSafeAreaInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _unobscuredSafeAreaInsets;
@property (nonatomic, readonly) NSURL *_unreachableURL;
@property (nonatomic, readonly) NSString *_userAgent;
@property (setter=_setUserContentExtensionsEnabled:, nonatomic) bool _userContentExtensionsEnabled;
@property (setter=_setViewScale:, nonatomic) double _viewScale;
@property (setter=_setViewportSizeForCSSViewportUnits:, nonatomic) struct CGSize { double x1; double x2; } _viewportSizeForCSSViewportUnits;
@property (nonatomic, readonly) int _webProcessIdentifier;
@property (nonatomic, readonly) bool _webProcessIsResponsive;
@property (nonatomic, readonly) _WKWebViewPrintFormatter *_webViewPrintFormatter;
@property (nonatomic) bool allowsBackForwardNavigationGestures;
@property (nonatomic) bool allowsLinkPreview;
@property (nonatomic, readonly) WKBackForwardList *backForwardList;
@property (nonatomic, readonly) bool canGoBack;
@property (nonatomic, readonly) bool canGoForward;
@property (nonatomic, readonly, copy) NSArray *certificateChain;
@property (nonatomic, readonly, copy) WKWebViewConfiguration *configuration;
@property (nonatomic, copy) NSString *customUserAgent;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double estimatedProgress;
@property (nonatomic, readonly) NSString *formInputLabel;
@property (nonatomic, readonly) bool hasOnlySecureContent;
@property (readonly) unsigned long long hash;
@property (getter=isLoading, nonatomic, readonly) bool loading;
@property (nonatomic) <WKNavigationDelegate> *navigationDelegate;
@property (nonatomic, readonly) UIScrollView *scrollView;
@property (nonatomic, readonly) NSString *selectFormPopoverTitle;
@property (nonatomic, readonly) struct __SecTrust { }*serverTrust;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *textContentTypeForTesting;
@property (nonatomic, readonly, copy) NSString *title;
@property (setter=webui_setLastGeneratedPasswordForCurrentBackForwardItem:, nonatomic, copy) NSString *webui_lastGeneratedPasswordForCurrentBackForwardItem;
@property (nonatomic, readonly) UIViewController *webui_presentingViewController;
@property (nonatomic, readonly) bool webui_privateBrowsingEnabled;

// Image: /System/Library/Frameworks/WebKit.framework/WebKit

+ (id)_confirmMalwareSentinel;
+ (bool)_handlesSafeBrowsing;
+ (void)_setStringForFind:(id)arg1;
+ (id)_stringForFind;
+ (id)_visitUnsafeWebsiteSentinel;
+ (bool)handlesURLScheme:(id)arg1;

- (void).cxx_destruct;
- (id)_MIMEType;
- (void)_accessibilityClearSelection;
- (void)_accessibilityDidGetSpeakSelectionContent:(id)arg1;
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)arg1 withText:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_accessibilityRetrieveSpeakSelectionContent;
- (void)_accessibilitySettingsDidChange:(id)arg1;
- (void)_accessibilityStoreSelection;
- (void)_addShortcut:(id)arg1;
- (void)_addUpdateVisibleContentRectPreCommitHandler;
- (bool)_addsVisitedLinks;
- (void)_alignCenter:(id)arg1;
- (void)_alignJustified:(id)arg1;
- (void)_alignLeft:(id)arg1;
- (void)_alignRight:(id)arg1;
- (bool)_allowsDoubleTapGestures;
- (bool)_allowsMediaDocumentInlinePlayback;
- (bool)_allowsRemoteInspection;
- (bool)_allowsViewportShrinkToFit;
- (id)_applicationNameForUserAgent;
- (id)_attachmentForIdentifier:(id)arg1;
- (bool)_backgroundExtendsBeyondPage;
- (void)_becomeFirstResponderWithSelectionMovingForward:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_beginAnimatedResizeWithUpdates:(id /* block */)arg1;
- (bool)_beginBackSwipeForTesting;
- (void)_beginInteractiveObscuredInsetsChange;
- (void)_callAsyncFunction:(id)arg1 withArguments:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)_canTogglePictureInPicture;
- (void)_cancelAnimatedResize;
- (id)_certificateChain;
- (void)_changeListType:(id)arg1;
- (void)_clearInterfaceOrientationOverride;
- (void)_clearOverrideLayoutParameters;
- (void)_clearSafeBrowsingWarning;
- (void)_clearSafeBrowsingWarningIfForMainFrameNavigation;
- (void)_close;
- (void)_closeAllMediaPresentations;
- (id)_committedURL;
- (bool)_completeBackSwipeForTesting;
- (void)_completeTextManipulation:(id)arg1 completion:(id /* block */)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_computedContentInset;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_computedObscuredInset;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_computedUnobscuredSafeAreaInset;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentBoundsExtendedForRubberbandingWithScale:(double)arg1;
- (struct CGPoint { double x1; double x2; })_contentOffsetAdjustedForObscuredInset:(struct CGPoint { double x1; double x2; })arg1;
- (id)_contentProviderRegistry;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentRectForUserInteraction;
- (id)_contentSizeCategory;
- (void)_contentSizeCategoryDidChange:(id)arg1;
- (bool)_contentViewIsFirstResponder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentVisibleRect;
- (double)_contentZoomScale;
- (id)_contentsOfUserInterfaceItem:(id)arg1;
- (struct CGPoint { double x1; double x2; })_convertPointFromContentsToView:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })_convertPointFromViewToContents:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectFromRootViewCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectToRootViewCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_couldNotRestorePageState;
- (void)_countStringMatches:(id)arg1 options:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (id)_currentContentView;
- (id)_customUserAgent;
- (id)_dataDetectionResults;
- (id)_dataForDisplayedPDF;
- (void)_decreaseListLevel:(id)arg1;
- (void)_decrementFocusPreservationCount;
- (void)_define:(id)arg1;
- (void)_denyNextUserMediaRequest;
- (void)_detectDataWithTypes:(unsigned long long)arg1 completionHandler:(id /* block */)arg2;
- (id)_diagnosticLoggingDelegate;
- (void)_didChangeEditorState;
- (void)_didCommitLayerTree:(const struct RemoteLayerTreeTransaction { unsigned long long x1; struct Vector<WTF::RefPtr<WebKit::PlatformCALayerRemote, WTF::DumbPtrTraits<WebKit::PlatformCALayerRemote> >, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct RefPtr<WebKit::PlatformCALayerRemote, WTF::DumbPtrTraits<WebKit::PlatformCALayerRemote> > {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > {} *x_1_2_1; } x_3_1_1; } x3; }*)arg1;
- (void)_didCommitLayerTreeDuringAnimatedResize:(const struct RemoteLayerTreeTransaction { unsigned long long x1; struct Vector<WTF::RefPtr<WebKit::PlatformCALayerRemote, WTF::DumbPtrTraits<WebKit::PlatformCALayerRemote> >, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct RefPtr<WebKit::PlatformCALayerRemote, WTF::DumbPtrTraits<WebKit::PlatformCALayerRemote> > {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > {} *x_1_2_1; } x_3_1_1; } x3; }*)arg1;
- (void)_didCommitLoadForMainFrame;
- (void)_didCompleteAnimatedResize;
- (void)_didDismissContextMenu;
- (void)_didFailLoadForMainFrame;
- (void)_didFinishLoadForMainFrame;
- (void)_didFinishLoadingDataForCustomContentProviderWithSuggestedFilename:(const struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_1_1; } x1; }*)arg1 data:(id)arg2;
- (void)_didFinishScrolling;
- (void)_didInsertAttachment:(struct Attachment { int (**x1)(); id x2; struct RetainPtr<NSFileWrapper> { void *x_3_1_1; } x3; struct Function<WTF::RetainPtr<NSFileWrapper> ()>={unique_ptr<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>>, std::__1::default_delete<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> > >={__compressed_pair<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> *, std::__1::default_delete<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> > >=^{CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> {} x4; }*)arg1 withSource:(id)arg2;
- (void)_didInvalidateDataForAttachment:(struct Attachment { int (**x1)(); id x2; struct RetainPtr<NSFileWrapper> { void *x_3_1_1; } x3; struct Function<WTF::RetainPtr<NSFileWrapper> ()>={unique_ptr<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>>, std::__1::default_delete<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> > >={__compressed_pair<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> *, std::__1::default_delete<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> > >=^{CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> {} x4; }*)arg1;
- (void)_didInvokeUIScrollViewDelegateCallback;
- (void)_didRelaunchProcess;
- (void)_didRemoveAttachment:(struct Attachment { int (**x1)(); id x2; struct RetainPtr<NSFileWrapper> { void *x_3_1_1; } x3; struct Function<WTF::RetainPtr<NSFileWrapper> ()>={unique_ptr<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>>, std::__1::default_delete<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> > >={__compressed_pair<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> *, std::__1::default_delete<WTF::Detail::CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> > >=^{CallableWrapperBase<WTF::RetainPtr<NSFileWrapper>> {} x4; }*)arg1;
- (void)_didSameDocumentNavigationForMainFrame:(int)arg1;
- (void)_didScroll;
- (void)_didShowContextMenu;
- (void)_didStartProvisionalLoadForMainFrame;
- (void)_disableBackForwardSnapshotVolatilityForTesting;
- (void)_dismissFilePicker;
- (void)_dispatchSetDeviceOrientation:(int)arg1;
- (void)_dispatchSetMaximumUnobscuredSize:(struct FloatSize { float x1; float x2; })arg1;
- (void)_dispatchSetViewLayoutSize:(struct FloatSize { float x1; float x2; })arg1;
- (void)_doAfterNextPresentationUpdate:(id /* block */)arg1;
- (void)_doAfterNextPresentationUpdateWithoutWaitingForAnimatedResizeForTesting:(id /* block */)arg1;
- (void)_doAfterNextPresentationUpdateWithoutWaitingForPainting:(id /* block */)arg1;
- (void)_doAfterNextStablePresentationUpdate:(id /* block */)arg1;
- (void)_doAfterNextVisibleContentRectUpdate:(id /* block */)arg1;
- (void)_doAfterProcessingAllPendingMouseEvents:(id /* block */)arg1;
- (void)_doAfterReceivingEditDragSnapshotForTesting:(id /* block */)arg1;
- (void)_doAfterResettingSingleTapGesture:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_dragCaretRect;
- (unsigned long long)_dragInteractionPolicy;
- (void)_dynamicUserInterfaceTraitDidChange;
- (bool)_effectiveAppearanceIsDark;
- (unsigned long long)_effectiveObscuredInsetEdgesAffectedBySafeArea;
- (bool)_effectiveUserInterfaceLevelIsElevated;
- (void)_enclosingScrollerScrollingEnded:(id)arg1;
- (id)_enclosingViewForExposedRectComputation;
- (void)_endAnimatedResize;
- (void)_endInteractiveObscuredInsetsChange;
- (void)_evaluateJavaScript:(id)arg1 asAsyncFunction:(bool)arg2 withArguments:(id)arg3 forceUserGesture:(bool)arg4 completionHandler:(id /* block */)arg5;
- (void)_evaluateJavaScriptWithoutUserGesture:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_executeEditCommand:(id)arg1 argument:(id)arg2 completion:(id /* block */)arg3;
- (id)_findDelegate;
- (void)_findString:(id)arg1 options:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (void)_firePresentationUpdateForPendingStableStatePresentationCallbacks;
- (struct CGSize { double x1; double x2; })_fixedLayoutSize;
- (void)_focusTextInputContext:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)_formDelegate;
- (void)_frameOrBoundsChanged;
- (id)_fullScreenPlaceholderView;
- (id)_fullscreenDelegate;
- (double)_gapBetweenPages;
- (void)_getApplicationManifestWithCompletionHandler:(id /* block */)arg1;
- (void)_getContentsAsAttributedStringWithCompletionHandler:(id /* block */)arg1;
- (void)_getContentsAsStringWithCompletionHandler:(id /* block */)arg1;
- (void)_getMainResourceDataWithCompletionHandler:(id /* block */)arg1;
- (void)_getWebArchiveDataWithCompletionHandler:(id /* block */)arg1;
- (id)_handle;
- (void)_handleKeyUIEvent:(id)arg1;
- (bool)_hasInspectorFrontend;
- (bool)_hasServiceWorkerBackgroundActivityForTesting;
- (bool)_hasServiceWorkerForegroundActivityForTesting;
- (bool)_haveSetObscuredInsets;
- (void)_hideContentUntilNextUpdate;
- (void)_hideFindUI;
- (void)_hidePasswordView;
- (id)_historyDelegate;
- (id)_iconLoadingDelegate;
- (void)_increaseListLevel:(id)arg1;
- (void)_incrementFocusPreservationCount;
- (void)_indent:(id)arg1;
- (struct CGPoint { double x1; double x2; })_initialContentOffsetForScrollView;
- (double)_initialScaleFactor;
- (void)_initializeWithConfiguration:(id)arg1;
- (id)_inputDelegate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_inputViewBounds;
- (id)_insertAttachmentWithFileWrapper:(id)arg1 contentType:(id)arg2 completion:(id /* block */)arg3;
- (id)_insertAttachmentWithFileWrapper:(id)arg1 contentType:(id)arg2 options:(id)arg3 completion:(id /* block */)arg4;
- (id)_insertAttachmentWithFilename:(id)arg1 contentType:(id)arg2 data:(id)arg3 options:(id)arg4 completion:(id /* block */)arg5;
- (void)_insertNestedOrderedList:(id)arg1;
- (void)_insertNestedUnorderedList:(id)arg1;
- (void)_insertOrderedList:(id)arg1;
- (void)_insertUnorderedList:(id)arg1;
- (id)_inspector;
- (long long)_interfaceOrientationOverride;
- (void)_internalDoAfterNextPresentationUpdate:(id /* block */)arg1 withoutWaitingForPainting:(bool)arg2 withoutWaitingForAnimatedResize:(bool)arg3;
- (bool)_isBackground;
- (bool)_isClosed;
- (bool)_isDisplayingPDF;
- (bool)_isDisplayingStandaloneImageDocument;
- (bool)_isDisplayingStandaloneMediaDocument;
- (bool)_isEditable;
- (bool)_isInFullscreen;
- (void)_isJITEnabled:(id /* block */)arg1;
- (bool)_isNavigationSwipeGestureRecognizer:(id)arg1;
- (bool)_isPictureInPictureActive;
- (bool)_isPlayingAudio;
- (bool)_isRetainingActiveFocusedState;
- (bool)_isShowingNavigationGestureSnapshot;
- (bool)_isShowingVideoPictureInPicture;
- (bool)_isValid;
- (void)_keyboardChangedWithInfo:(id)arg1 adjustScrollView:(bool)arg2;
- (void)_keyboardDidChangeFrame:(id)arg1;
- (void)_keyboardDidShow:(id)arg1;
- (void)_keyboardWillChangeFrame:(id)arg1;
- (void)_keyboardWillHide:(id)arg1;
- (void)_keyboardWillShow:(id)arg1;
- (void)_killWebContentProcess;
- (void)_killWebContentProcessAndResetState;
- (void)_layerTreeCommitComplete;
- (unsigned long long)_layoutMode;
- (void)_loadAlternateHTMLString:(id)arg1 baseURL:(id)arg2 forUnreachableURL:(id)arg3;
- (id)_loadData:(id)arg1 MIMEType:(id)arg2 characterEncodingName:(id)arg3 baseURL:(id)arg4 userData:(id)arg5;
- (id)_loadRequest:(id)arg1 shouldOpenExternalURLs:(bool)arg2;
- (void)_lookup:(id)arg1;
- (id)_mainFrame;
- (id)_mainFrameURL;
- (struct CGSize { double x1; double x2; })_maximumUnobscuredSizeOverride;
- (bool)_mayAutomaticallyShowVideoPictureInPicture;
- (bool)_mediaCaptureEnabled;
- (unsigned long long)_mediaCaptureState;
- (double)_minimumEffectiveDeviceWidth;
- (struct CGSize { double x1; double x2; })_minimumLayoutSizeOverride;
- (void)_navigationGestureDidBegin;
- (void)_navigationGestureDidEnd;
- (bool)_negotiatedLegacyTLS;
- (bool)_networkRequestsInProgress;
- (void)_nextAccessoryTab:(id)arg1;
- (unsigned long long)_obscuredInsetEdgesAffectedBySafeArea;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_obscuredInsets;
- (unsigned long long)_observedRenderingProgressEvents;
- (void)_outdent:(id)arg1;
- (void)_overrideLayoutParametersWithMinimumLayoutSize:(struct CGSize { double x1; double x2; })arg1 maximumUnobscuredSizeOverride:(struct CGSize { double x1; double x2; })arg2;
- (void)_overrideViewportWithArguments:(id)arg1;
- (struct WebPageProxy { int (**x1)(); id x2; int (**x3)(); int (**x4)(); int (**x5)(); int (**x6)(); int (**x7)(); int (**x8)(); struct WeakPtrFactory<WebKit::WebPageProxy> { struct RefPtr<WTF::WeakPtrImpl, WTF::DumbPtrTraits<WTF::WeakPtrImpl> > { struct WeakPtrImpl {} *x_1_2_1; } x_9_1_1; } x9; struct RetainPtr<NSArray> { void *x_10_1_1; } x10; struct ObjectIdentifier<WebKit::WebPageProxyIdentifierType> { unsigned long long x_11_1_1; } x11; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long x_12_1_1; } x12; struct WeakPtr<WebKit::PageClient> { struct RefPtr<WTF::WeakPtrImpl, WTF::DumbPtrTraits<WTF::WeakPtrImpl> > { struct WeakPtrImpl {} *x_1_2_1; } x_13_1_1; } x13; struct Ref<API::PageConfiguration, WTF::DumbPtrTraits<API::PageConfiguration> > { struct PageConfiguration {} *x_14_1_1; } x14; struct unique_ptr<API::LoaderClient, std::__1::default_delete<API::LoaderClient> > { struct __compressed_pair<API::LoaderClient *, std::__1::default_delete<API::LoaderClient> > { struct LoaderClient {} *x_1_2_1; } x_15_1_1; } x15; }*)_page;
- (unsigned long long)_pageCount;
- (struct OpaqueWKPage { }*)_pageForTesting;
- (double)_pageLength;
- (double)_pageScale;
- (double)_pageZoomFactor;
- (bool)_paginationBehavesLikeColumns;
- (bool)_paginationLineGridEnabled;
- (long long)_paginationMode;
- (id)_passwordView;
- (void)_pasteAndMatchStyle:(id)arg1;
- (void)_pasteAsQuotation:(id)arg1;
- (void)_populateArchivedSubviews:(id)arg1;
- (void)_previousAccessoryTab:(id)arg1;
- (Class)_printFormatterClass;
- (id)_printProvider;
- (void)_processDidExit;
- (void)_processDidResumeForTesting;
- (void)_processWillSuspendImminentlyForTesting;
- (void)_processWillSwap;
- (void)_processWillSwapOrDidExit;
- (void)_promptForReplace:(id)arg1;
- (id)_propertiesOfLayerWithID:(unsigned long long)arg1;
- (int)_provisionalWebProcessIdentifier;
- (id)_reloadExpiredOnly;
- (id)_reloadWithoutContentBlockers;
- (id)_remoteInspectionNameOverride;
- (id)_remoteObjectRegistry;
- (void)_removeDataDetectedLinks:(id /* block */)arg1;
- (void)_requestActivatedElementAtPosition:(struct CGPoint { double x1; double x2; })arg1 completionBlock:(id /* block */)arg2;
- (void)_requestActiveNowPlayingSessionInfo:(id /* block */)arg1;
- (void)_requestTextInputContextsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)_resetFocusPreservationCount;
- (void)_resizeWhileHidingContentWithUpdates:(id /* block */)arg1;
- (struct Optional<bool> { bool x1; union constexpr_storage_t<bool> { unsigned char x_2_1_1; bool x_2_1_2; } x2; })_resolutionForShareSheetImmediateCompletionForTesting;
- (id)_resourceDirectoryURL;
- (void)_restoreFromSessionStateData:(id)arg1;
- (void)_restorePageScrollPosition:(struct Optional<WebCore::FloatPoint> { bool x1; union constexpr_storage_t<WebCore::FloatPoint> { unsigned char x_2_1_1; struct FloatPoint { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; })arg1 scrollOrigin:(struct FloatPoint { float x1; float x2; })arg2 previousObscuredInset:(struct RectEdges<float> { struct array<float, 4> { float x_1_1_1[4]; } x1; })arg3 scale:(double)arg4;
- (void)_restorePageStateToUnobscuredCenter:(struct Optional<WebCore::FloatPoint> { bool x1; union constexpr_storage_t<WebCore::FloatPoint> { unsigned char x_2_1_1; struct FloatPoint { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; })arg1 scale:(double)arg2;
- (id)_restoreSessionState:(id)arg1 andNavigate:(bool)arg2;
- (void)_resumeAllMediaPlayback;
- (id /* block */)_retainActiveFocusedState;
- (bool)_safeAreaShouldAffectObscuredInsets;
- (id)_safeBrowsingWarning;
- (void)_saveBackForwardSnapshotForItem:(id)arg1;
- (void)_scheduleVisibleContentRectUpdate;
- (void)_scheduleVisibleContentRectUpdateAfterScrollInView:(id)arg1;
- (id)_scrollPerformanceData;
- (bool)_scrollPerformanceDataCollectionEnabled;
- (void)_scrollToContentScrollPosition:(struct FloatPoint { float x1; float x2; })arg1 scrollOrigin:(struct IntPoint { int x1; int x2; })arg2;
- (bool)_scrollToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 origin:(struct FloatPoint { float x1; float x2; })arg2 minimumScrollDistance:(float)arg3;
- (struct CGPoint { double x1; double x2; })_scrollView:(id)arg1 adjustedOffsetForOffset:(struct CGPoint { double x1; double x2; })arg2 translation:(struct CGPoint { double x1; double x2; })arg3 startPoint:(struct CGPoint { double x1; double x2; })arg4 locationInView:(struct CGPoint { double x1; double x2; })arg5 horizontalVelocity:(inout double*)arg6 verticalVelocity:(inout double*)arg7;
- (void)_scrollViewDidInterruptDecelerating:(id)arg1;
- (bool)_scrollViewIsInStableState:(id)arg1;
- (bool)_scrollViewIsRubberBanding;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_scrollViewSystemContentInset;
- (id)_scrollingTreeAsText;
- (bool)_scrollingUpdatesDisabledForTesting;
- (unsigned long long)_selectionAttributes;
- (long long)_selectionGranularity;
- (id)_sessionState;
- (id)_sessionStateData;
- (id)_sessionStateWithFilter:(id /* block */)arg1;
- (void)_setAddsVisitedLinks:(bool)arg1;
- (void)_setAllowsMediaDocumentInlinePlayback:(bool)arg1;
- (void)_setAllowsRemoteInspection:(bool)arg1;
- (void)_setAllowsViewportShrinkToFit:(bool)arg1;
- (void)_setApplicationNameForUserAgent:(id)arg1;
- (void)_setAssertionStateForTesting:(int)arg1;
- (void)_setAvoidsUnsafeArea:(bool)arg1;
- (void)_setBackgroundExtendsBeyondPage:(bool)arg1;
- (void)_setContinuousSpellCheckingEnabledForTesting:(bool)arg1;
- (void)_setCustomUserAgent:(id)arg1;
- (void)_setDefersLoadingForTesting:(bool)arg1;
- (void)_setDeviceOrientationUserPermissionHandlerForTesting:(id /* block */)arg1;
- (void)_setDiagnosticLoggingDelegate:(id)arg1;
- (void)_setDragInteractionPolicy:(unsigned long long)arg1;
- (void)_setEditable:(bool)arg1;
- (void)_setFindDelegate:(id)arg1;
- (void)_setFixedLayoutSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setFont:(id)arg1 sender:(id)arg2;
- (void)_setFontSize:(double)arg1 sender:(id)arg2;
- (void)_setFormDelegate:(id)arg1;
- (void)_setFullscreenDelegate:(id)arg1;
- (void)_setGapBetweenPages:(double)arg1;
- (void)_setHasCustomContentView:(bool)arg1 loadedMIMEType:(const struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_1_1; } x1; }*)arg2;
- (void)_setHistoryDelegate:(id)arg1;
- (void)_setIconLoadingDelegate:(id)arg1;
- (void)_setInputDelegate:(id)arg1;
- (void)_setInterfaceOrientationOverride:(long long)arg1;
- (void)_setLayoutMode:(unsigned long long)arg1;
- (void)_setMaximumUnobscuredSizeOverride:(struct CGSize { double x1; double x2; })arg1;
- (void)_setMediaCaptureEnabled:(bool)arg1;
- (void)_setMinimumEffectiveDeviceWidth:(double)arg1;
- (void)_setObscuredInsetEdgesAffectedBySafeArea:(unsigned long long)arg1;
- (void)_setObscuredInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setObservedRenderingProgressEvents:(unsigned long long)arg1;
- (void)_setOpaqueInternal:(bool)arg1;
- (void)_setOverlaidAccessoryViewsInset:(struct CGSize { double x1; double x2; })arg1;
- (void)_setPageLength:(double)arg1;
- (void)_setPageMuted:(unsigned long long)arg1;
- (void)_setPageScale:(double)arg1 withOrigin:(struct CGPoint { double x1; double x2; })arg2;
- (void)_setPageZoomFactor:(double)arg1;
- (void)_setPaginationBehavesLikeColumns:(bool)arg1;
- (void)_setPaginationLineGridEnabled:(bool)arg1;
- (void)_setPaginationMode:(long long)arg1;
- (void)_setRemoteInspectionNameOverride:(id)arg1;
- (void)_setScrollPerformanceDataCollectionEnabled:(bool)arg1;
- (void)_setScrollingUpdatesDisabledForTesting:(bool)arg1;
- (void)_setShareSheetCompletesImmediatelyWithResolutionForTesting:(bool)arg1;
- (void)_setTextColor:(id)arg1 sender:(id)arg2;
- (void)_setTextManipulationDelegate:(id)arg1;
- (void)_setTextZoomFactor:(double)arg1;
- (void)_setUnobscuredSafeAreaInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setUpSQLiteDatabaseTrackerClient;
- (void)_setUserContentExtensionsEnabled:(bool)arg1;
- (void)_setViewLayoutSizeOverride:(struct CGSize { double x1; double x2; })arg1;
- (void)_setViewScale:(double)arg1;
- (void)_setViewportSizeForCSSViewportUnits:(struct CGSize { double x1; double x2; })arg1;
- (void)_share:(id)arg1;
- (bool)_shouldAvoidResizingWhenInputViewBoundsChange;
- (bool)_shouldUpdateKeyboardWithInfo:(id)arg1;
- (void)_showPasswordViewWithDocumentName:(id)arg1 passwordHandler:(id /* block */)arg2;
- (void)_showSafeBrowsingWarning:(const struct SafeBrowsingWarning { unsigned int x1; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_2_1_1; unsigned int x_2_1_2 : 1; unsigned int x_2_1_3 : 1; unsigned int x_2_1_4 : 1; unsigned int x_2_1_5 : 3; unsigned int x_2_1_6 : 26; unsigned int x_2_1_7; unsigned int x_2_1_8; unsigned int x_2_1_9; unsigned int x_2_1_10; unsigned int x_2_1_11; unsigned int x_2_1_12; unsigned int x_2_1_13; } x2; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_3_1_1; } x3; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_4_1_1; } x4; bool x5; struct RetainPtr<NSAttributedString> { void *x_6_1_1; } x6; }*)arg1 completionHandler:(struct CompletionHandler<void (WTF::Variant<WebKit::ContinueUnsafeLoad, WTF::URL> &&)>={Function<void (WTF::Variant<WebKit::ContinueUnsafeLoad, WTF::URL> &&)>={unique_ptr<WTF::Detail::CallableWrapperBase<void, WTF::Variant<WebKit::ContinueUnsafeLoad, WTF::URL> &&>, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, WTF::Variant<WebKit::ContinueUnsafeLoad, WTF::URL> &&> > >={__compressed_pair<WTF::Detail::CallableWrapperBase<void, WTF::Variant<WebKit::ContinueUnsafeLoad, WTF::URL> &&> *, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, WTF::Variant<WebKit::ContinueUnsafeLoad, WTF::URL> &&> > >=^{CallableWrapperBase<void, WTF::Variant<WebKit::ContinueUnsafeLoad, WTF::URL> &&> {}*)arg2;
- (void)_showSafeBrowsingWarningWithTitle:(id)arg1 warning:(id)arg2 details:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)_showSafeBrowsingWarningWithURL:(id)arg1 title:(id)arg2 warning:(id)arg3 details:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)_showTextStyleOptions:(id)arg1;
- (void)_simulateDeviceOrientationChangeWithAlpha:(double)arg1 beta:(double)arg2 gamma:(double)arg3;
- (void)_simulateLongPressActionAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_simulateTextEntered:(id)arg1;
- (id)_snapshotLayerContentsForBackForwardListItem:(id)arg1;
- (void)_snapshotRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 intoImageOfWidth:(double)arg2 completionHandler:(id /* block */)arg3;
- (id)_stableStateOverride;
- (void)_startTextManipulationsWithConfiguration:(id)arg1 completion:(id /* block */)arg2;
- (void)_stopAllMediaPlayback;
- (void)_stopMediaCapture;
- (bool)_stylusTapGestureShouldCreateEditableImage;
- (id)_suggestedFilenameForDisplayedPDF;
- (bool)_supportsTextZoom;
- (void)_suspendAllMediaPlayback;
- (void)_takeFindStringFromSelection:(id)arg1;
- (void)_takePDFSnapshotWithConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (struct RefPtr<WebKit::ViewSnapshot, WTF::DumbPtrTraits<WebKit::ViewSnapshot> > { struct ViewSnapshot {} *x1; })_takeViewSnapshot;
- (double)_targetContentZoomScaleForRect:(const struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1 currentScale:(double)arg2 fitEntireRect:(bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5;
- (id)_textManipulationDelegate;
- (double)_textZoomFactor;
- (void)_togglePictureInPicture;
- (void)_toggleStrikeThrough:(id)arg1;
- (void)_transliterateChinese:(id)arg1;
- (void)_triggerSystemPreviewActionOnElement:(unsigned long long)arg1 document:(unsigned long long)arg2 page:(unsigned long long)arg3;
- (void)_tryClose;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_uiTextCaretRect;
- (id)_uiTextSelectionRects;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_unobscuredSafeAreaInsets;
- (id)_unreachableURL;
- (void)_updateMediaPlaybackControlsManager;
- (void)_updateScrollViewBackground;
- (void)_updateScrollViewInsetAdjustmentBehavior;
- (void)_updateVisibleContentRects;
- (void)_updateWebpagePreferences:(id)arg1;
- (void)_updateWebsitePolicies:(id)arg1;
- (id)_userAgent;
- (bool)_userContentExtensionsEnabled;
- (void)_videoControlsManagerDidChange;
- (id)_viewForFindUI;
- (double)_viewScale;
- (struct CGSize { double x1; double x2; })_viewportSizeForCSSViewportUnits;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleContentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleRectInEnclosingView:(id)arg1;
- (int)_webProcessIdentifier;
- (bool)_webProcessIsResponsive;
- (id)_webViewPrintFormatter;
- (void)_willInvokeUIScrollViewDelegateCallback;
- (void)_windowDidRotate:(id)arg1;
- (void)_zoomOutWithOrigin:(struct FloatPoint { float x1; float x2; })arg1 animated:(bool)arg2;
- (void)_zoomToFocusRect:(const struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1 selectionRect:(const struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg2 insideFixed:(bool)arg3 fontSize:(float)arg4 minimumScale:(double)arg5 maximumScale:(double)arg6 allowScaling:(bool)arg7 forceScroll:(bool)arg8;
- (void)_zoomToInitialScaleWithOrigin:(struct FloatPoint { float x1; float x2; })arg1 animated:(bool)arg2;
- (void)_zoomToPoint:(struct FloatPoint { float x1; float x2; })arg1 atScale:(double)arg2 animated:(bool)arg3;
- (void)_zoomToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 atScale:(double)arg2 origin:(struct FloatPoint { float x1; float x2; })arg3 animated:(bool)arg4;
- (bool)_zoomToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withOrigin:(struct FloatPoint { float x1; float x2; })arg2 fitEntireRect:(bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(float)arg6;
- (void)dealloc;

// Image: /Developer/usr/lib/libMainThreadChecker.dylib

- (id).cxx_construct;
- (id)UIDelegate;
- (id)URL;
- (struct FloatSize { float x1; float x2; })activeViewLayoutSize:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (bool)allowsBackForwardNavigationGestures;
- (bool)allowsLinkPreview;
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (id)backForwardList;
- (bool)becomeFirstResponder;
- (id)browsingContextController;
- (bool)canBecomeFirstResponder;
- (bool)canGoBack;
- (bool)canGoForward;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (id)certificateChain;
- (void)closeFullScreenWindowController;
- (id)configuration;
- (void)copy:(id)arg1;
- (void)createPDFWithConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)createWebArchiveDataWithCompletionHandler:(id /* block */)arg1;
- (id)customUserAgent;
- (void)cut:(id)arg1;
- (void)decreaseSize:(id)arg1;
- (void)didEndFormControlInteraction;
- (void)didMoveToWindow;
- (void)didStartFormControlInteraction;
- (void)dismissFormAccessoryView;
- (void)encodeWithCoder:(id)arg1;
- (double)estimatedProgress;
- (void)evaluateJavaScript:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)findString:(id)arg1 withConfiguration:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)formInputLabel;
- (id)fullScreenWindowController;
- (id)goBack;
- (id)goForward;
- (id)goToBackForwardListItem:(id)arg1;
- (bool)hasFullScreenWindowController;
- (bool)hasOnlySecureContent;
- (void)increaseSize:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 configuration:(id)arg2;
- (id)inputAccessoryView;
- (id)inputAssistantItem;
- (id)inputView;
- (bool)isLoading;
- (void)keyboardAccessoryBarNext;
- (void)keyboardAccessoryBarPrevious;
- (void)layoutSubviews;
- (id)loadData:(id)arg1 MIMEType:(id)arg2 characterEncodingName:(id)arg3 baseURL:(id)arg4;
- (id)loadFileURL:(id)arg1 allowingReadAccessToURL:(id)arg2;
- (id)loadHTMLString:(id)arg1 baseURL:(id)arg2;
- (id)loadRequest:(id)arg1;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (id)mediaType;
- (id)navigationDelegate;
- (double)pageZoom;
- (void)paste:(id)arg1;
- (void)pasteAndMatchStyle:(id)arg1;
- (id)reload;
- (id)reloadFromOrigin;
- (void)removeFromSuperview;
- (void)replace:(id)arg1;
- (bool)resignFirstResponder;
- (void)safeAreaInsetsDidChange;
- (id)scrollView;
- (struct CGSize { double x1; double x2; })scrollView:(id)arg1 contentSizeForZoomScale:(double)arg2 withProposedSize:(struct CGSize { double x1; double x2; })arg3;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidScrollToTop:(id)arg1;
- (void)scrollViewDidZoom:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)select:(id)arg1;
- (void)selectAll:(id)arg1;
- (void)selectFormAccessoryPickerRow:(int)arg1;
- (id)selectFormPopoverTitle;
- (struct __SecTrust { }*)serverTrust;
- (void)setAllowsBackForwardNavigationGestures:(bool)arg1;
- (void)setAllowsLinkPreview:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCustomUserAgent:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setMediaType:(id)arg1;
- (void)setNavigationDelegate:(id)arg1;
- (void)setOpaque:(bool)arg1;
- (void)setPageZoom:(double)arg1;
- (void)setSemanticContentAttribute:(long long)arg1;
- (void)setTimePickerValueToHour:(long long)arg1 minute:(long long)arg2;
- (void)setUIDelegate:(id)arg1;
- (void)stopLoading;
- (void)takeSnapshotWithConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)targetForAction:(SEL)arg1 withSender:(id)arg2;
- (id)textContentTypeForTesting;
- (id)title;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)urlSchemeHandlerForURLScheme:(id)arg1;
- (bool)usesStandardContentView;
- (id)valueForUndefinedKey:(id)arg1;
- (id)viewForZoomingInScrollView:(id)arg1;
- (struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })visibleRectInViewCoordinates;
- (void)willFinishIgnoringCalloutBarFadeAfterPerformingAction;

// Image: /System/Library/Frameworks/SafariServices.framework/SafariServices

- (void)_sf_applicationDidEnterBackgroundOrWillTerminate:(id)arg1;
- (id)_sf_effectiveViewToLayOut;
- (void)_sf_saveUnsubmittedGeneratedPasswordAndRemoveFormMetadata;
- (id)_sf_securityInfo;
- (void)_sf_setSecurityInfo:(id)arg1;
- (id)webui_formMetadataForLastPasswordGenerationOrSubmitEventInFrame:(id)arg1;
- (id)webui_lastGeneratedPasswordForCurrentBackForwardItem;
- (id)webui_presentingViewController;
- (id /* block */)webui_preventNavigationDuringAutoFillPrompt;
- (bool)webui_privateBrowsingEnabled;
- (void)webui_removeFormMetadataForLastPasswordGenerationOrSubmitEventInFrame:(id)arg1;
- (void)webui_setFormMetadata:(id)arg1 forLastPasswordGenerationOrSubmitEventInFrame:(id)arg2;
- (void)webui_setLastGeneratedPasswordForCurrentBackForwardItem:(id)arg1;

// Image: /System/Library/PrivateFrameworks/AuthKitUI.framework/AuthKitUI

+ (id)ak_idpWebViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 idpHandler:(id)arg2;

// Image: /System/Library/PrivateFrameworks/HelpKit.framework/HelpKit

- (void)highlightAllOccurencesOfTokens:(id)arg1;
- (void)removeAllHighlights;

// Image: /System/Library/PrivateFrameworks/MobileMailUI.framework/MobileMailUI

- (id)mcv_executeJavaScriptExpression:(id)arg1;
- (id)mcv_executeJavaScriptMethod:(id)arg1 arguments:(id)arg2;

@end
