/* Generated by EzioChiu
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKContentView : WKApplicationStateTrackingView <UIContextMenuInteractionDelegate, UIDragInteractionDelegate, UIDropInteractionDelegate, UIGestureRecognizerDelegate, UIPreviewItemDelegate, UITextAutoscrolling, UITextInputMultiDocument, UITextInputPrivate, UIWKInteractionViewProtocol, UIWebFormAccessoryDelegate, UIWebTouchEventsGestureRecognizerDelegate, WKActionSheetAssistantDelegate, WKDeferringGestureRecognizerDelegate, WKFileUploadPanelDelegate, WKKeyboardScrollViewAnimatorDelegate, WKShareSheetDelegate, WKTouchActionGestureRecognizerDelegate, _UICursorInteractionDelegate, _WKWebViewPrintProvider> {
    struct RetainPtr<WKActionSheetAssistant> { 
        void *m_ptr; 
    }  _actionSheetAssistant;
    struct BlockPtr<void ()>="m_block"@? {}  _actionToPerformAfterReceivingEditDragSnapshot;
    struct Vector<WTF::BlockPtr<void ()>, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc>="m_buffer"^{BlockPtr<void ()> {}  _actionsToPerformAfterResettingSingleTapGestureRecognizer;
    struct RetainPtr<NSDictionary> { 
        void *m_ptr; 
    }  _additionalContextForStrongPasswordAssistance;
    struct RetainPtr<WKAirPlayRoutePicker> { 
        void *m_ptr; 
    }  _airPlayRoutePicker;
    struct WKAutoCorrectionData { 
        struct RetainPtr<UIFont> { 
            void *m_ptr; 
        } font; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } textFirstRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } textLastRect; 
    }  _autocorrectionData;
    bool  _becomingFirstResponder;
    struct RetainPtr<WKBrowsingContextController> { 
        void *m_ptr; 
    }  _browsingContextController;
    bool  _candidateViewNeedsUpdate;
    bool  _contextMenuActionProviderDelegateNeedsOverride;
    struct RetainPtr<WKContextMenuElementInfo> { 
        void *m_ptr; 
    }  _contextMenuElementInfo;
    bool  _contextMenuHasRequestedLegacyData;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _contextMenuHintContainerView;
    struct RetainPtr<UIContextMenuInteraction> { 
        void *m_ptr; 
    }  _contextMenuInteraction;
    struct RetainPtr<UITargetedPreview> { 
        void *m_ptr; 
    }  _contextMenuInteractionTargetedPreview;
    struct RetainPtr<UIMenu> { 
        void *m_ptr; 
    }  _contextMenuLegacyMenu;
    struct RetainPtr<UIViewController> { 
        void *m_ptr; 
    }  _contextMenuLegacyPreviewController;
    struct RetainPtr<NSArray<UITextSuggestion *> > { 
        void *m_ptr; 
    }  _dataListTextSuggestions;
    struct RetainPtr<UIView<WKFormControl> > { 
        void *m_ptr; 
    }  _dataListTextSuggestionsInputView;
    struct RetainPtr<WKDeferringGestureRecognizer> { 
        void *m_ptr; 
    }  _deferringGestureRecognizerForDelayedResettableGestures;
    struct RetainPtr<WKDeferringGestureRecognizer> { 
        void *m_ptr; 
    }  _deferringGestureRecognizerForImmediatelyResettableGestures;
    bool  _didAccessoryTabInitiateFocus;
    struct CompletionHandler<void (WebCore::DOMPasteAccessResponse)>="m_function"{Function<void (WebCore::DOMPasteAccessResponse)>="m_callableWrapper"{unique_ptr<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> > >="__ptr_"{__compressed_pair<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> *, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> > >="__value_"^{CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> {}  _domPasteRequestHandler;
    struct RetainPtr<WKSyntheticTapGestureRecognizer> { 
        void *m_ptr; 
    }  _doubleTapGestureRecognizer;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    }  _doubleTapGestureRecognizerForDoubleClick;
    struct DragDropInteractionState { 
        struct CGPoint { 
            double x; 
            double y; 
        } m_lastGlobalPosition; 
        struct CGPoint { 
            double x; 
            double y; 
        } m_adjustedPositionForDragEnd; 
        bool m_didBeginDragging; 
        bool m_isPerformingDrop; 
        struct RetainPtr<id<UIDragSession> > { 
            void *m_ptr; 
        } m_dragSession; 
        struct RetainPtr<id<UIDropSession> > { 
            void *m_ptr; 
        } m_dropSession; 
        struct BlockPtr<void ()>="m_block"@? {} m_dragStartCompletionBlock; 
        struct BlockPtr<void ()>="m_block"@? {} m_dragCancelSetDownBlock; 
        struct BlockPtr<void (NSArray<UIDragItem *> *)>="m_block"@? {} m_addDragItemCompletionBlock; 
        struct Optional<WebKit::DragSourceState> { 
            bool init_; 
            union storage_t<WebKit::DragSourceState> { 
                unsigned char dummy_; 
                struct DragSourceState { 
                    int action; 
                    struct CGPoint { 
                        double x; 
                        double y; 
                    } adjustedOrigin; 
                    struct CGRect { 
                        struct CGPoint { 
                            double x; 
                            double y; 
                        } origin; 
                        struct CGSize { 
                            double width; 
                            double height; 
                        } size; 
                    } dragPreviewFrameInRootViewCoordinates; 
                    struct RetainPtr<UIImage> { 
                        void *m_ptr; 
                    } image; 
                    struct Optional<WebCore::TextIndicatorData> { 
                        bool init_; 
                        union storage_t<WebCore::TextIndicatorData> { 
                            unsigned char dummy_; 
                            struct TextIndicatorData { 
                                struct FloatRect { 
                                    struct FloatPoint { 
                                        float m_x; 
                                        float m_y; 
                                    } m_location; 
                                    struct FloatSize { 
                                        float m_width; 
                                        float m_height; 
                                    } m_size; 
                                } selectionRectInRootViewCoordinates; 
                                struct FloatRect { 
                                    struct FloatPoint { 
                                        float m_x; 
                                        float m_y; 
                                    } m_location; 
                                    struct FloatSize { 
                                        float m_width; 
                                        float m_height; 
                                    } m_size; 
                                } textBoundingRectInRootViewCoordinates; 
                                struct FloatRect { 
                                    struct FloatPoint { 
                                        float m_x; 
                                        float m_y; 
                                    } m_location; 
                                    struct FloatSize { 
                                        float m_width; 
                                        float m_height; 
                                    } m_size; 
                                } contentImageWithoutSelectionRectInRootViewCoordinates; 
                                struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { 
                                    struct FloatRect {} *m_buffer; 
                                    unsigned int m_capacity; 
                                    unsigned int m_size; 
                                } textRectsInBoundingRectCoordinates; 
                                float contentImageScaleFactor; 
                                struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { 
                                    struct Image {} *m_ptr; 
                                } contentImageWithHighlight; 
                                struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { 
                                    struct Image {} *m_ptr; 
                                } contentImageWithoutSelection; 
                                struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { 
                                    struct Image {} *m_ptr; 
                                } contentImage; 
                                struct Color { 
                                    union { 
                                        unsigned long long rgbaAndFlags; 
                                        struct ExtendedColor {} *extendedColor; 
                                    } m_colorData; 
                                } estimatedBackgroundColor; 
                                unsigned char presentationTransition; 
                                unsigned short options; 
                            } value_; 
                        } storage_; 
                    } indicatorData; 
                    struct Optional<WebCore::Path> { 
                        bool init_; 
                        union storage_t<WebCore::Path> { 
                            unsigned char dummy_; 
                            struct Path { 
                                struct CGPath {} *m_path; 
                            } value_; 
                        } storage_; 
                    } visiblePath; 
                    struct String { 
                        struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                            struct StringImpl {} *m_ptr; 
                        } m_impl; 
                    } linkTitle; 
                    struct URL { 
                        struct String { 
                            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                                struct StringImpl {} *m_ptr; 
                            } m_impl; 
                        } m_string; 
                        unsigned int m_isValid : 1; 
                        unsigned int m_protocolIsInHTTPFamily : 1; 
                        unsigned int m_cannotBeABaseURL : 1; 
                        unsigned int m_portLength : 3; 
                        unsigned int m_schemeEnd : 26; 
                        unsigned int m_userStart; 
                        unsigned int m_userEnd; 
                        unsigned int m_passwordEnd; 
                        unsigned int m_hostEnd; 
                        unsigned int m_pathAfterLastSlash; 
                        unsigned int m_pathEnd; 
                        unsigned int m_queryEnd; 
                    } linkURL; 
                    bool possiblyNeedsDragPreviewUpdate; 
                    long long itemIdentifier; 
                } value_; 
            } storage_; 
        } m_stagedDragSource; 
        struct Vector<WebKit::DragSourceState, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { 
            struct DragSourceState {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } m_activeDragSources; 
        struct Vector<WebKit::ItemAndPreviewProvider, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { 
            struct ItemAndPreviewProvider {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } m_delayedItemPreviewProviders; 
        struct Vector<WebKit::ItemAndPreview, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { 
            struct ItemAndPreview {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } m_defaultDropPreviews; 
    }  _dragDropInteractionState;
    struct RetainPtr<UIDragInteraction> { 
        void *m_ptr; 
    }  _dragInteraction;
    long long  _dropAnimationCount;
    struct RetainPtr<UIDropInteraction> { 
        void *m_ptr; 
    }  _dropInteraction;
    struct RetainPtr<_UITextDragCaretView> { 
        void *m_ptr; 
    }  _editDropCaretView;
    struct RetainPtr<WKFileUploadPanel> { 
        void *m_ptr; 
    }  _fileUploadPanel;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _fixedClippingView;
    bool  _focusRequiresStrongPasswordAssistance;
    struct Vector<bool, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { 
        bool *m_buffer; 
        unsigned int m_capacity; 
        unsigned int m_size; 
    }  _focusStateStack;
    struct FocusedElementInformation { 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } interactionRect; 
        struct ElementContext { 
            struct FloatRect { 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } m_location; 
                struct FloatSize { 
                    float m_width; 
                    float m_height; 
                } m_size; 
            } boundingRect; 
            struct ObjectIdentifier<WebCore::PageIdentifierType> { 
                unsigned long long m_identifier; 
            } webPageIdentifier; 
            struct ObjectIdentifier<WebCore::DocumentIdentifierType> { 
                unsigned long long m_identifier; 
            } documentIdentifier; 
            struct ObjectIdentifier<WebCore::ElementIdentifierType> { 
                unsigned long long m_identifier; 
            } elementIdentifier; 
        } elementContext; 
        struct IntPoint { 
            int m_x; 
            int m_y; 
        } lastInteractionLocation; 
        double minimumScaleFactor; 
        double maximumScaleFactor; 
        double maximumScaleFactorIgnoringAlwaysScalable; 
        double nodeFontSize; 
        bool hasNextNode; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } nextNodeRect; 
        bool hasPreviousNode; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } previousNodeRect; 
        bool isAutocorrect; 
        bool isRTL; 
        bool isMultiSelect; 
        bool isReadOnly; 
        bool allowsUserScaling; 
        bool allowsUserScalingIgnoringAlwaysScalable; 
        bool insideFixedPosition; 
        int autocapitalizeType; 
        int elementType; 
        unsigned char inputMode; 
        unsigned char enterKeyHint; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } formAction; 
        struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { 
            struct OptionItem {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } selectOptions; 
        int selectedIndex; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } value; 
        double valueAsNumber; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } title; 
        bool acceptsAutofilledLoginCredentials; 
        bool isAutofillableUsernameField; 
        struct URL { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
            unsigned int m_isValid : 1; 
            unsigned int m_protocolIsInHTTPFamily : 1; 
            unsigned int m_cannotBeABaseURL : 1; 
            unsigned int m_portLength : 3; 
            unsigned int m_schemeEnd : 26; 
            unsigned int m_userStart; 
            unsigned int m_userEnd; 
            unsigned int m_passwordEnd; 
            unsigned int m_hostEnd; 
            unsigned int m_pathAfterLastSlash; 
            unsigned int m_pathEnd; 
            unsigned int m_queryEnd; 
        } representingPageURL; 
        int autofillFieldName; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } placeholder; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } label; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } ariaLabel; 
        unsigned long long embeddedViewID; 
        bool hasSuggestions; 
        struct Vector<WebCore::Color, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { 
            struct Color {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } suggestedColors; 
        bool shouldSynthesizeKeyEventsForEditing; 
        bool isSpellCheckingEnabled; 
        bool shouldAvoidResizingWhenInputViewBoundsChange; 
        bool shouldAvoidScrollingWhenFocusedContentIsVisible; 
        bool shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation; 
        unsigned long long focusedElementIdentifier; 
    }  _focusedElementInformation;
    struct RetainPtr<UIWebFormAccessory> { 
        void *m_ptr; 
    }  _formAccessoryView;
    struct RetainPtr<WKFormInputSession> { 
        void *m_ptr; 
    }  _formInputSession;
    bool  _hasSetUpInteractions;
    bool  _hasTapHighlightForPotentialTap;
    bool  _hasValidPositionInformation;
    struct RetainPtr<WKHighlightLongPressGestureRecognizer> { 
        void *m_ptr; 
    }  _highlightLongPressGestureRecognizer;
    struct RetainPtr<_UIHighlightView> { 
        void *m_ptr; 
    }  _highlightView;
    struct HistoricalVelocityData { 
        unsigned int m_historySize; 
        unsigned int m_latestDataIndex; 
        struct MonotonicTime { 
            double m_value; 
        } m_lastAppendTimestamp; 
        struct Data { 
            struct MonotonicTime { 
                double m_value; 
            } timestamp; 
            struct FloatPoint { 
                float m_x; 
                float m_y; 
            } position; 
            double scale; 
        } m_positionHistory[3]; 
    }  _historicalKinematicData;
    unsigned long long  _ignoreSelectionCommandFadeCount;
    struct WeakObjCPtr<id<UITextInputDelegate> > { 
        id m_weakReference; 
    }  _inputDelegate;
    struct RetainPtr<NSObject<WKFormPeripheral> > { 
        void *m_ptr; 
    }  _inputPeripheral;
    struct unique_ptr<WebKit::InputViewUpdateDeferrer, std::__1::default_delete<WebKit::InputViewUpdateDeferrer> > { 
        struct __compressed_pair<WebKit::InputViewUpdateDeferrer *, std::__1::default_delete<WebKit::InputViewUpdateDeferrer> > { 
            struct InputViewUpdateDeferrer {} *__value_; 
        } __ptr_; 
    }  _inputViewUpdateDeferrer;
    struct RetainPtr<WKInspectorHighlightView> { 
        void *m_ptr; 
    }  _inspectorHighlightView;
    struct RetainPtr<WKInspectorIndicationView> { 
        void *m_ptr; 
    }  _inspectorIndicationView;
    bool  _inspectorNodeSearchEnabled;
    struct RetainPtr<WKInspectorNodeSearchGestureRecognizer> { 
        void *m_ptr; 
    }  _inspectorNodeSearchGestureRecognizer;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _interactionViewsContainerView;
    bool  _isBlurringFocusedElement;
    bool  _isChangingFocus;
    bool  _isChangingFocusUsingAccessoryTab;
    bool  _isDoubleTapPending;
    bool  _isEditable;
    bool  _isExpectingFastSingleTapCommit;
    bool  _isFocusingElementWithKeyboard;
    bool  _isPrintingToPDF;
    bool  _isTapHighlightIDValid;
    struct BlockPtr<void (WebEvent *, bool)>="m_block"@? {}  _keyWebEventHandler;
    bool  _keyboardDidRequestDismissal;
    struct RetainPtr<WKKeyboardScrollViewAnimator> { 
        void *m_ptr; 
    }  _keyboardScrollingAnimator;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastInteractionLocation;
    struct WKSelectionDrawingInfo { 
        int type; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } caretRect; 
        struct Vector<WebCore::SelectionRect, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { 
            struct SelectionRect {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } selectionRects; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } selectionClipRect; 
    }  _lastSelectionDrawingInfo;
    unsigned long long  _latestTapID;
    struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { 
        unsigned long long m_identifier; 
    }  _layerTreeTransactionIdAtLastTouchStart;
    bool  _longPressCanClick;
    struct RetainPtr<UILongPressGestureRecognizer> { 
        void *m_ptr; 
    }  _longPressGestureRecognizer;
    struct RetainPtr<NSString> { 
        void *m_ptr; 
    }  _markedText;
    struct RetainPtr<WKMouseGestureRecognizer> { 
        void *m_ptr; 
    }  _mouseGestureRecognizer;
    bool  _needsDeferredEndScrollingSelectionUpdate;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    }  _nonBlockingDoubleTapGestureRecognizer;
    struct Optional<WebKit::InteractionInformationRequest> { 
        bool init_; 
        union constexpr_storage_t<WebKit::InteractionInformationRequest> { 
            unsigned char dummy_; 
            struct InteractionInformationRequest { 
                struct IntPoint { 
                    int m_x; 
                    int m_y; 
                } point; 
                bool includeSnapshot; 
                bool includeLinkIndicator; 
                bool includeCaretContext; 
                bool linkIndicatorShouldHaveLegacyMargins; 
            } value_; 
        } storage_; 
    }  _outstandingPositionInformationRequest;
    struct RefPtr<WebKit::WebPageProxy, WTF::DumbPtrTraits<WebKit::WebPageProxy> > { 
        struct WebPageProxy {} *m_ptr; 
    }  _page;
    struct unique_ptr<WebKit::PageClientImpl, std::__1::default_delete<WebKit::PageClientImpl> > { 
        struct __compressed_pair<WebKit::PageClientImpl *, std::__1::default_delete<WebKit::PageClientImpl> > { 
            struct PageClientImpl {} *__value_; 
        } __ptr_; 
    }  _pageClient;
    struct BlockPtr<void (UIWKAutocorrectionContext *)>="m_block"@? {}  _pendingAutocorrectionContextHandler;
    struct Vector<WTF::Optional<std::__1::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (WebKit::InteractionInformationAtPosition)> > >, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc>="m_buffer"^{Optional<std::__1::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (WebKit::InteractionInformationAtPosition)> > > {}  _pendingPositionInformationHandlers;
    struct InteractionInformationAtPosition { 
        struct InteractionInformationRequest { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } point; 
            bool includeSnapshot; 
            bool includeLinkIndicator; 
            bool includeCaretContext; 
            bool linkIndicatorShouldHaveLegacyMargins; 
        } request; 
        bool canBeValid; 
        bool nodeAtPositionHasDoubleClickHandler; 
        bool isSelectable; 
        bool prefersDraggingOverTextSelection; 
        bool isNearMarkedText; 
        bool touchCalloutEnabled; 
        bool isLink; 
        bool isImage; 
        bool isAttachment; 
        bool isAnimatedImage; 
        bool isElement; 
        unsigned long long containerScrollingNodeID; 
        bool isDataDetectorLink; 
        bool preventTextInteraction; 
        bool shouldNotUseIBeamInEditableContent; 
        struct FloatPoint { 
            float m_x; 
            float m_y; 
        } adjustedPointForNodeRespondingToClickEvents; 
        struct URL { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
            unsigned int m_isValid : 1; 
            unsigned int m_protocolIsInHTTPFamily : 1; 
            unsigned int m_cannotBeABaseURL : 1; 
            unsigned int m_portLength : 3; 
            unsigned int m_schemeEnd : 26; 
            unsigned int m_userStart; 
            unsigned int m_userEnd; 
            unsigned int m_passwordEnd; 
            unsigned int m_hostEnd; 
            unsigned int m_pathAfterLastSlash; 
            unsigned int m_pathEnd; 
            unsigned int m_queryEnd; 
        } url; 
        struct URL { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
            unsigned int m_isValid : 1; 
            unsigned int m_protocolIsInHTTPFamily : 1; 
            unsigned int m_cannotBeABaseURL : 1; 
            unsigned int m_portLength : 3; 
            unsigned int m_schemeEnd : 26; 
            unsigned int m_userStart; 
            unsigned int m_userEnd; 
            unsigned int m_passwordEnd; 
            unsigned int m_hostEnd; 
            unsigned int m_pathAfterLastSlash; 
            unsigned int m_pathEnd; 
            unsigned int m_queryEnd; 
        } imageURL; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } title; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } idAttribute; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } bounds; 
        struct RefPtr<WebKit::ShareableBitmap, WTF::DumbPtrTraits<WebKit::ShareableBitmap> > { 
            struct ShareableBitmap {} *m_ptr; 
        } image; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } textBefore; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } textAfter; 
        float caretHeight; 
        struct FloatRect { 
            struct FloatPoint { 
                float m_x; 
                float m_y; 
            } m_location; 
            struct FloatSize { 
                float m_width; 
                float m_height; 
            } m_size; 
        } lineCaretExtent; 
        struct Optional<WebCore::Cursor> { 
            bool init_; 
            union storage_t<WebCore::Cursor> { 
                unsigned char dummy_; 
                struct Cursor { 
                    int m_type; 
                    struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { 
                        struct Image {} *m_ptr; 
                    } m_image; 
                    struct IntPoint { 
                        int m_x; 
                        int m_y; 
                    } m_hotSpot; 
                    void *m_platformCursor; 
                } value_; 
            } storage_; 
        } cursor; 
        struct TextIndicatorData { 
            struct FloatRect { 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } m_location; 
                struct FloatSize { 
                    float m_width; 
                    float m_height; 
                } m_size; 
            } selectionRectInRootViewCoordinates; 
            struct FloatRect { 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } m_location; 
                struct FloatSize { 
                    float m_width; 
                    float m_height; 
                } m_size; 
            } textBoundingRectInRootViewCoordinates; 
            struct FloatRect { 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } m_location; 
                struct FloatSize { 
                    float m_width; 
                    float m_height; 
                } m_size; 
            } contentImageWithoutSelectionRectInRootViewCoordinates; 
            struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { 
                struct FloatRect {} *m_buffer; 
                unsigned int m_capacity; 
                unsigned int m_size; 
            } textRectsInBoundingRectCoordinates; 
            float contentImageScaleFactor; 
            struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { 
                struct Image {} *m_ptr; 
            } contentImageWithHighlight; 
            struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { 
                struct Image {} *m_ptr; 
            } contentImageWithoutSelection; 
            struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { 
                struct Image {} *m_ptr; 
            } contentImage; 
            struct Color { 
                union { 
                    unsigned long long rgbaAndFlags; 
                    struct ExtendedColor {} *extendedColor; 
                } m_colorData; 
            } estimatedBackgroundColor; 
            unsigned char presentationTransition; 
            unsigned short options; 
        } linkIndicator; 
        struct String { 
            struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } dataDetectorIdentifier; 
        struct RetainPtr<NSArray> { 
            void *m_ptr; 
        } dataDetectorResults; 
        struct Optional<WebCore::ElementContext> { 
            bool init_; 
            union constexpr_storage_t<WebCore::ElementContext> { 
                unsigned char dummy_; 
                struct ElementContext { 
                    struct FloatRect { 
                        struct FloatPoint { 
                            float m_x; 
                            float m_y; 
                        } m_location; 
                        struct FloatSize { 
                            float m_width; 
                            float m_height; 
                        } m_size; 
                    } boundingRect; 
                    struct ObjectIdentifier<WebCore::PageIdentifierType> { 
                        unsigned long long m_identifier; 
                    } webPageIdentifier; 
                    struct ObjectIdentifier<WebCore::DocumentIdentifierType> { 
                        unsigned long long m_identifier; 
                    } documentIdentifier; 
                    struct ObjectIdentifier<WebCore::ElementIdentifierType> { 
                        unsigned long long m_identifier; 
                    } elementIdentifier; 
                } value_; 
            } storage_; 
        } elementContext; 
    }  _positionInformation;
    unsigned long long  _positionInformationCallbackDepth;
    bool  _potentialTapInProgress;
    bool  _preventsPanningInXAxis;
    bool  _preventsPanningInYAxis;
    struct RetainPtr<UIGestureRecognizer> { 
        void *m_ptr; 
    }  _previewGestureRecognizer;
    struct RetainPtr<UIPreviewItemController> { 
        void *m_ptr; 
    }  _previewItemController;
    struct RetainPtr<UIGestureRecognizer> { 
        void *m_ptr; 
    }  _previewSecondaryGestureRecognizer;
    struct RetainPtr<CGPDFDocument *> { 
        void *m_ptr; 
    }  _printedDocument;
    struct RetainPtr<WKQuirkyNSUndoManager> { 
        void *m_ptr; 
    }  _quirkyUndoManager;
    bool  _resigningFirstResponder;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _rootContentView;
    bool  _seenHardwareKeyDownInNonEditableElement;
    bool  _selectionNeedsUpdate;
    struct RetainPtr<WKShareSheet> { 
        void *m_ptr; 
    }  _shareSheet;
    bool  _shouldRestoreCalloutBarAfterDrop;
    bool  _shouldRestoreSelection;
    bool  _showDebugTapHighlightsForFastClicking;
    bool  _showLinkPreviews;
    bool  _showingTextStyleOptions;
    struct RetainPtr<WKSyntheticTapGestureRecognizer> { 
        void *m_ptr; 
    }  _singleTapGestureRecognizer;
    bool  _sizeChangedSinceLastVisibleContentRectUpdate;
    struct unique_ptr<WebKit::SmartMagnificationController, std::__1::default_delete<WebKit::SmartMagnificationController> > { 
        struct __compressed_pair<WebKit::SmartMagnificationController *, std::__1::default_delete<WebKit::SmartMagnificationController> > { 
            struct SmartMagnificationController {} *__value_; 
        } __ptr_; 
    }  _smartMagnificationController;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    }  _stylusSingleTapGestureRecognizer;
    long long  _suppressNonEditableSingleTapTextInteractionCount;
    struct OptionSet<WebKit::SuppressSelectionAssistantReason> { 
        unsigned char m_storage; 
    }  _suppressSelectionAssistantReasons;
    struct TapHighlightInformation { 
        bool nodeHasBuiltInClickHandling; 
        struct Color { 
            union { 
                unsigned long long rgbaAndFlags; 
                struct ExtendedColor {} *extendedColor; 
            } m_colorData; 
        } color; 
        struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { 
            struct FloatQuad {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } quads; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } topLeftRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } topRightRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } bottomLeftRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } bottomRightRadius; 
    }  _tapHighlightInformation;
    struct RetainPtr<UIWKTextInteractionAssistant> { 
        void *m_ptr; 
    }  _textInteractionAssistant;
    struct RetainPtr<UISwipeGestureRecognizer> { 
        void *m_ptr; 
    }  _touchActionDownSwipeGestureRecognizer;
    struct RetainPtr<WKTouchActionGestureRecognizer> { 
        void *m_ptr; 
    }  _touchActionGestureRecognizer;
    struct RetainPtr<UISwipeGestureRecognizer> { 
        void *m_ptr; 
    }  _touchActionLeftSwipeGestureRecognizer;
    struct RetainPtr<UISwipeGestureRecognizer> { 
        void *m_ptr; 
    }  _touchActionRightSwipeGestureRecognizer;
    struct RetainPtr<UISwipeGestureRecognizer> { 
        void *m_ptr; 
    }  _touchActionUpSwipeGestureRecognizer;
    struct RetainPtr<UIWebTouchEventsGestureRecognizer> { 
        void *m_ptr; 
    }  _touchEventGestureRecognizer;
    bool  _touchEventsCanPreventNativeGestures;
    struct RetainPtr<UITextInputTraits> { 
        void *m_ptr; 
    }  _traits;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    }  _twoFingerDoubleTapGestureRecognizer;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    }  _twoFingerSingleTapGestureRecognizer;
    struct RetainPtr<NSUndoManager> { 
        void *m_ptr; 
    }  _undoManager;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _unselectedContentSnapshot;
    bool  _usingGestureForSelection;
    struct RetainPtr<_UILayerHostView> { 
        void *m_ptr; 
    }  _visibilityPropagationView;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _visibleContentViewSnapshot;
    bool  _waitingForEditDragSnapshot;
    struct WeakObjCPtr<WKWebView> { 
        id m_weakReference; 
    }  _webView;
    int  m_commitPotentialTapPointerId;
}

@property (nonatomic, copy) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic, readonly) RTIInputSystemSourceSession *_rtiSourceSession;
@property (nonatomic, readonly) bool _shouldAvoidResizingWhenInputViewBoundsChange;
@property (nonatomic, readonly) bool _shouldAvoidScrollingWhenFocusedContentIsVisible;
@property (nonatomic, readonly) bool _shouldUseContextMenus;
@property (nonatomic, readonly) bool _shouldUseLegacySelectPopoverDismissalBehavior;
@property (nonatomic) long long _textInputSource;
@property (nonatomic, readonly) struct CGPDFDocument { }*_wk_printedDocument;
@property (nonatomic) bool acceptsDictationSearchResults;
@property (nonatomic) bool acceptsEmoji;
@property (nonatomic) bool acceptsFloatingKeyboard;
@property (nonatomic) bool acceptsPayloads;
@property (nonatomic) bool acceptsSplitKeyboard;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic, copy) NSString *autocorrectionContext;
@property (nonatomic, readonly) const struct WKAutoCorrectionData { struct RetainPtr<UIFont> { void *x_1_1_1; } x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; }*autocorrectionData;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic, readonly) UITextPosition *beginningOfDocument;
@property (nonatomic, readonly) WKBrowsingContextController *browsingContextController;
@property (nonatomic) bool contentsIsSingleValue;
@property (nonatomic, readonly) struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; bool x_1_1_2; bool x_1_1_3; bool x_1_1_4; bool x_1_1_5; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; unsigned long long x13; bool x14; bool x15; bool x16; struct FloatPoint { float x_17_1_1; float x_17_1_2; } x17; /* Warning: unhandled struct encoding: '{URL={String={RefPtr<WTF::StringImpl' */ struct x18; } currentPositionInformation; /* unknown property attribute:  WTF::DumbPtrTraits<WTF::StringImpl> >=^{StringImpl}}}{RetainPtr<NSArray>=^v}{Optional<WebCore::ElementContext>=B(constexpr_storage_t<WebCore::ElementContext>=C{ElementContext={FloatRect={FloatPoint=ff}{FloatSize=ff}}{ObjectIdentifier<WebCore::PageIdentifierType>=Q}{ObjectIdentifier<WebCore::DocumentIdentifierType>=Q}{ObjectIdentifier<WebCore::ElementIdentifierType>=Q}})}} */
@property (nonatomic, readonly) long long cursorBehavior;
@property (nonatomic, retain) NSArray *dataListTextSuggestions;
@property (nonatomic, retain) UIView<WKFormControl> *dataListTextSuggestionsInputView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool deferBecomingResponder;
@property (readonly, copy) NSString *description;
@property (getter=isDevicePasscodeEntry, nonatomic) bool devicePasscodeEntry;
@property (nonatomic) bool disableInputBars;
@property (nonatomic) bool disablePrediction;
@property (nonatomic) bool displaySecureEditsUsingPlainText;
@property (nonatomic) bool displaySecureTextUsingPlainText;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) bool enablesReturnKeyAutomatically;
@property (nonatomic) bool enablesReturnKeyOnNonWhiteSpaceContent;
@property (nonatomic, readonly) UITextPosition *endOfDocument;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } floatingKeyboardEdgeInsets;
@property (nonatomic, readonly) const struct FocusedElementInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct ElementContext { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long x_2_2_1; } x_2_1_2; struct ObjectIdentifier<WebCore::DocumentIdentifierType> { unsigned long long x_3_2_1; } x_2_1_3; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long x_4_2_1; } x_2_1_4; } x2; struct IntPoint { int x_3_1_1; int x_3_1_2; } x3; double x4; double x5; double x6; double x7; bool x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; bool x10; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_11_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_11_1_2; } x11; bool x12; bool x13; bool x14; bool x15; bool x16; }*focusedElementInformation; /* unknown property attribute:  WTF::FastMalloc>=^{Color}II}BBBBBQ} */
@property (nonatomic) bool forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) bool forceDisableDictation;
@property (nonatomic) bool forceEnableDictation;
@property (nonatomic) bool forceFloatingKeyboard;
@property (nonatomic, readonly) UIWebFormAccessory *formAccessoryView;
@property (nonatomic, readonly) WKFormInputControl *formInputControl;
@property (nonatomic, readonly) NSString *formInputLabel;
@property (nonatomic) bool hasDefaultContents;
@property (nonatomic, readonly) bool hasText;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hidePrediction;
@property (nonatomic, readonly) UIView *inputAccessoryViewForWebView;
@property (nonatomic, readonly) UITextInputAssistantItem *inputAssistantItemForWebView;
@property (nonatomic, retain) UIInputContextHistory *inputContextHistory;
@property (nonatomic) <UITextInputDelegate> *inputDelegate;
@property (nonatomic, readonly) UIView *inputViewForWebView;
@property (nonatomic, readonly) id insertDictationResultPlaceholder;
@property (nonatomic, retain) UIColor *insertionPointColor;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic, readonly) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic, readonly) long long interfaceOrientation;
@property (nonatomic) bool isCarPlayIdiom;
@property (nonatomic, readonly) bool isEditable;
@property (nonatomic, readonly) bool isFocusingElement;
@property (nonatomic) bool isSingleLineDocument;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long keyboardType;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } lastInteractionLocation;
@property (nonatomic) bool learnsCorrections;
@property (nonatomic) bool loadKeyboardsForSiriLanguage;
@property (nonatomic, readonly) UITextRange *markedTextRange;
@property (nonatomic, copy) NSDictionary *markedTextStyle;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{WebPageProxy=^^?@^^?^^?^^?^^?^^?^^?{WeakPtrFactory<WebKit::WebPageProxy>={RefPtr<WTF::WeakPtrImpl' */ struct *page; /* unknown property attribute:  std::__1::default_delete<WebKit::WebDeviceOrientationUpdateProviderProxy> >=^{WebDeviceOrientationUpdateProviderProxy}}}{MonotonicTime=d}} */
@property (nonatomic, copy) UITextInputPasswordRules *passwordRules;
@property (nonatomic, readonly) const struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; bool x_1_1_2; bool x_1_1_3; bool x_1_1_4; bool x_1_1_5; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; unsigned long long x13; bool x14; bool x15; bool x16; struct FloatPoint { float x_17_1_1; float x_17_1_2; } x17; /* Warning: unhandled struct encoding: '{URL={String={RefPtr<WTF::StringImpl' */ struct x18; }*positionInformation; /* unknown property attribute:  WTF::DumbPtrTraits<WTF::StringImpl> >=^{StringImpl}}}{RetainPtr<NSArray>=^v}{Optional<WebCore::ElementContext>=B(constexpr_storage_t<WebCore::ElementContext>=C{ElementContext={FloatRect={FloatPoint=ff}{FloatSize=ff}}{ObjectIdentifier<WebCore::PageIdentifierType>=Q}{ObjectIdentifier<WebCore::DocumentIdentifierType>=Q}{ObjectIdentifier<WebCore::ElementIdentifierType>=Q}})}} */
@property (nonatomic, readonly) bool preventsPanningInXAxis;
@property (nonatomic, readonly) bool preventsPanningInYAxis;
@property (nonatomic, copy) NSString *recentInputIdentifier;
@property (getter=isResigningFirstResponder, nonatomic, readonly) bool resigningFirstResponder;
@property (nonatomic, copy) NSString *responseContext;
@property (nonatomic) bool returnKeyGoesToNextResponder;
@property (nonatomic) long long returnKeyType;
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry;
@property (nonatomic, readonly) NSString *selectFormPopoverTitle;
@property (copy) UITextRange *selectedTextRange;
@property (nonatomic) long long selectionAffinity;
@property (nonatomic, retain) UIColor *selectionBarColor;
@property (nonatomic, retain) UIImage *selectionDragDotImage;
@property (nonatomic) long long selectionGranularity;
@property (nonatomic, retain) UIColor *selectionHighlightColor;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic, readonly) bool shouldHideSelectionWhenScrolling;
@property (nonatomic, readonly) bool shouldIgnoreKeyboardWillHideNotification;
@property (nonatomic) bool showDictationButton;
@property (getter=isShowingInspectorIndication, nonatomic) bool showingInspectorIndication;
@property (nonatomic) bool sizeChangedSinceLastVisibleContentRectUpdate;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long spellCheckingType;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsImagePaste;
@property (nonatomic) bool suppressReturnKeyStyling;
@property (nonatomic, copy) NSString *textContentType;
@property (nonatomic, readonly) NSString *textContentTypeForTesting;
@property (nonatomic, readonly) <UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic, readonly) UIView *textInputView;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) long long textScriptType;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) struct __CFCharacterSet { }*textTrimmingSet;
@property (nonatomic, readonly) <UITextInputTokenizer> *tokenizer;
@property (nonatomic, retain) UIColor *underlineColorForSpelling;
@property (nonatomic, retain) UIColor *underlineColorForTextAlternatives;
@property (nonatomic) bool useAutomaticEndpointing;
@property (nonatomic) bool useInterfaceLanguageForLocalization;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } validTextRange;

+ (Class)_fileUploadPanelClass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_accessibilityClearSelection;
- (void)_accessibilityRegisterUIProcessTokens;
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)arg1 withText:(id)arg2;
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)arg1 withText:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_accessibilityRetrieveRectsEnclosingSelectionOffset:(long long)arg1 withGranularity:(long long)arg2;
- (void)_accessibilityStoreSelection;
- (SEL)_actionForLongPress;
- (SEL)_actionForLongPressFromPositionInformation:(const struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; bool x_1_1_2; bool x_1_1_3; bool x_1_1_4; bool x_1_1_5; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; unsigned long long x13; bool x14; bool x15; bool x16; struct FloatPoint { float x_17_1_1; float x_17_1_2; } x17; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_18_1_1; unsigned int x_18_1_2 : 1; unsigned int x_18_1_3 : 1; unsigned int x_18_1_4 : 1; unsigned int x_18_1_5 : 3; unsigned int x_18_1_6 : 26; unsigned int x_18_1_7; unsigned int x_18_1_8; unsigned int x_18_1_9; unsigned int x_18_1_10; unsigned int x_18_1_11; unsigned int x_18_1_12; unsigned int x_18_1_13; } x18; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_19_1_1; unsigned int x_19_1_2 : 1; unsigned int x_19_1_3 : 1; unsigned int x_19_1_4 : 1; unsigned int x_19_1_5 : 3; unsigned int x_19_1_6 : 26; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned int x_19_1_9; unsigned int x_19_1_10; unsigned int x_19_1_11; unsigned int x_19_1_12; unsigned int x_19_1_13; } x19; }*)arg1;
- (void)_addDefaultGestureRecognizers;
- (void)_addShortcut:(id)arg1;
- (void)_addShortcutForWebView:(id)arg1;
- (void)_alignCenter:(id)arg1;
- (void)_alignCenterForWebView:(id)arg1;
- (void)_alignJustified:(id)arg1;
- (void)_alignJustifiedForWebView:(id)arg1;
- (void)_alignLeft:(id)arg1;
- (void)_alignLeftForWebView:(id)arg1;
- (void)_alignRight:(id)arg1;
- (void)_alignRightForWebView:(id)arg1;
- (bool)_allowAnimatedUpdateSelectionRectViews;
- (bool)_allowGestureRecognizer:(id)arg1 toReceiveTouch:(id)arg2;
- (int)_allowedDragSourceActions;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_attemptClickAtLocation:(struct CGPoint { double x1; double x2; })arg1 modifierFlags:(long long)arg2;
- (id)_autofillContext;
- (void)_becomeFirstResponderWithSelectionMovingForward:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_cancelInteraction;
- (void)_cancelLongPressGestureRecognizer;
- (void)_cancelPendingAutocorrectionContextHandler;
- (void)_cancelPreviousResetInputViewDeferralRequest;
- (void)_cancelTouchEventGestureRecognizer;
- (void)_changeListType:(id)arg1;
- (void)_changeListTypeForWebView:(id)arg1;
- (unsigned int)_characterBeforeCaretSelection;
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;
- (void)_commitPotentialTapFailed;
- (id)_commonInitializationWithProcessPool:(struct WebProcessPool { int (**x1)(); id x2; struct WeakPtrFactory<WebKit::WebProcessPool> { struct RefPtr<WTF::WeakPtrImpl, WTF::DumbPtrTraits<WTF::WeakPtrImpl> > { struct WeakPtrImpl {} *x_1_2_1; } x_3_1_1; } x3; int (**x4)(); struct Ref<API::ProcessPoolConfiguration, WTF::DumbPtrTraits<API::ProcessPoolConfiguration> > { struct ProcessPoolConfiguration {} *x_5_1_1; } x5; struct MessageReceiverMap { struct HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<IPC::StringReference, WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> >, IPC::StringReference::Hash, WTF::HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<IPC::StringReference> > { struct KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> {} *x_1_3_1; } x_1_2_1; } x_6_1_1; struct HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<std::__1::pair<IPC::StringReference, unsigned long long>, WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> >, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> > > { struct KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> {} *x_1_3_1; } x_2_2_1; } x_6_1_2; } x6; }*)arg1 configuration:(struct Ref<API::PageConfiguration, WTF::DumbPtrTraits<API::PageConfiguration> > { struct PageConfiguration {} *x1; }*)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_computeUnobscuredContentRectRespectingInputViewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inputViewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (double)_contentZoomScale;
- (id)_contentsOfUserInterfaceItem:(id)arg1;
- (void)_contextMenuInteraction:(id)arg1 configurationForMenuAtLocation:(struct CGPoint { double x1; double x2; })arg2 completion:(id /* block */)arg3;
- (id)_contextMenuInteraction:(id)arg1 overrideSuggestedActionsForConfiguration:(id)arg2;
- (id)_contextMenuInteraction:(id)arg1 styleForMenuWithConfiguration:(id)arg2;
- (void)_createAndConfigureDoubleTapGestureRecognizer;
- (void)_createAndConfigureLongPressGestureRecognizer;
- (struct unique_ptr<WebKit::DrawingAreaProxy, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct __compressed_pair<WebKit::DrawingAreaProxy *, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct DrawingAreaProxy {} *x_1_1_1; } x1; })_createDrawingAreaProxy:(struct WebProcessProxy { int (**x1)(); int (**x2)(); struct Vector<WebKit::AuxiliaryProcessProxy::PendingMessage, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct PendingMessage {} *x_3_1_1; unsigned int x_3_1_2; unsigned int x_3_1_3; } x3; struct RefPtr<WebKit::ProcessLauncher, WTF::DumbPtrTraits<WebKit::ProcessLauncher> > { struct ProcessLauncher {} *x_4_1_1; } x4; struct RefPtr<IPC::Connection, WTF::DumbPtrTraits<IPC::Connection> > { struct Connection {} *x_5_1_1; } x5; struct MessageReceiverMap { struct HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<IPC::StringReference, WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> >, IPC::StringReference::Hash, WTF::HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<IPC::StringReference> > { struct KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> {} *x_1_3_1; } x_1_2_1; } x_6_1_1; struct HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<std::__1::pair<IPC::StringReference, unsigned long long>, WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> >, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> > > { struct KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> {} *x_1_3_1; } x_2_2_1; } x_6_1_2; } x6; }*)arg1;
- (id)_createTargetedPreviewIfPossible;
- (bool)_currentPositionInformationIsApproximatelyValidForRequest:(const struct InteractionInformationRequest { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; }*)arg1 radiusForApproximation:(int)arg2;
- (bool)_currentPositionInformationIsValidForRequest:(const struct InteractionInformationRequest { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; }*)arg1;
- (void)_cursorInteraction:(id)arg1 regionForLocation:(struct CGPoint { double x1; double x2; })arg2 defaultRegion:(id)arg3 completion:(id /* block */)arg4;
- (id)_dataDetectionResults;
- (id)_dataForPreviewItemController:(id)arg1 atPosition:(struct CGPoint { double x1; double x2; })arg2 type:(long long*)arg3;
- (void)_decreaseListLevel:(id)arg1;
- (void)_decreaseListLevelForWebView:(id)arg1;
- (void)_define:(id)arg1;
- (void)_defineForWebView:(id)arg1;
- (void)_deleteByWord;
- (void)_deleteForwardAndNotify:(bool)arg1;
- (void)_deleteToEndOfLine;
- (void)_deleteToEndOfParagraph;
- (void)_deleteToStartOfLine;
- (void)_deliverDelayedDropPreviewIfPossible:(struct Optional<WebCore::TextIndicatorData> { bool x1; union storage_t<WebCore::TextIndicatorData> { unsigned char x_2_1_1; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_4_1; float x_1_4_2; } x_1_3_1; struct FloatSize { float x_2_4_1; float x_2_4_2; } x_1_3_2; } x_2_2_1; struct FloatRect { struct FloatPoint { float x_1_4_1; float x_1_4_2; } x_2_3_1; struct FloatSize { float x_2_4_1; float x_2_4_2; } x_2_3_2; } x_2_2_2; struct FloatRect { struct FloatPoint { float x_1_4_1; float x_1_4_2; } x_3_3_1; struct FloatSize { float x_2_4_1; float x_2_4_2; } x_3_3_2; } x_2_2_3; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct FloatRect {} *x_4_3_1; unsigned int x_4_3_2; unsigned int x_4_3_3; } x_2_2_4; float x_2_2_5; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_6_3_1; } x_2_2_6; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_7_3_1; } x_2_2_7; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_8_3_1; } x_2_2_8; struct Color { union { unsigned long long x_1_4_1; struct ExtendedColor {} *x_1_4_2; } x_9_3_1; } x_2_2_9; } x_2_1_2; } x2; })arg1;
- (void)_didChangeDragCaretRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 currentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_didChangeDragInteractionPolicy;
- (void)_didChangeLinkPreviewAvailability;
- (void)_didChangeWebViewEditability;
- (void)_didCommitLayerTree:(const struct RemoteLayerTreeTransaction { unsigned long long x1; struct Vector<WTF::RefPtr<WebKit::PlatformCALayerRemote, WTF::DumbPtrTraits<WebKit::PlatformCALayerRemote> >, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct RefPtr<WebKit::PlatformCALayerRemote, WTF::DumbPtrTraits<WebKit::PlatformCALayerRemote> > {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > {} *x_1_2_1; } x_3_1_1; } x3; }*)arg1;
- (void)_didCommitLoadForMainFrame;
- (void)_didCompleteSyntheticClick;
- (void)_didEndScrollingOrZooming;
- (void)_didExitStableState;
- (void)_didGetTapHighlightForRequest:(unsigned long long)arg1 color:(const struct Color { union { unsigned long long x_1_1_1; struct ExtendedColor {} *x_1_1_2; } x1; }*)arg2 quads:(const struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct FloatQuad {} *x1; unsigned int x2; unsigned int x3; }*)arg3 topLeftRadius:(const struct IntSize { int x1; int x2; }*)arg4 topRightRadius:(const struct IntSize { int x1; int x2; }*)arg5 bottomLeftRadius:(const struct IntSize { int x1; int x2; }*)arg6 bottomRightRadius:(const struct IntSize { int x1; int x2; }*)arg7 nodeHasBuiltInClickHandling:(bool)arg8;
- (void)_didHandleAdditionalDragItemsRequest:(bool)arg1;
- (void)_didHandleDragStartRequest:(bool)arg1;
- (void)_didHandleKeyEvent:(id)arg1 eventWasHandled:(bool)arg2;
- (void)_didHideMenu:(id)arg1;
- (void)_didNotHandleTapAsClick:(const struct IntPoint { int x1; int x2; }*)arg1;
- (void)_didPerformAction:(SEL)arg1 sender:(id)arg2;
- (void)_didPerformDragOperation:(bool)arg1;
- (void)_didReceiveEditDragSnapshot:(struct Optional<WebCore::TextIndicatorData> { bool x1; union storage_t<WebCore::TextIndicatorData> { unsigned char x_2_1_1; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_4_1; float x_1_4_2; } x_1_3_1; struct FloatSize { float x_2_4_1; float x_2_4_2; } x_1_3_2; } x_2_2_1; struct FloatRect { struct FloatPoint { float x_1_4_1; float x_1_4_2; } x_2_3_1; struct FloatSize { float x_2_4_1; float x_2_4_2; } x_2_3_2; } x_2_2_2; struct FloatRect { struct FloatPoint { float x_1_4_1; float x_1_4_2; } x_3_3_1; struct FloatSize { float x_2_4_1; float x_2_4_2; } x_3_3_2; } x_2_2_3; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct FloatRect {} *x_4_3_1; unsigned int x_4_3_2; unsigned int x_4_3_3; } x_2_2_4; float x_2_2_5; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_6_3_1; } x_2_2_6; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_7_3_1; } x_2_2_7; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_8_3_1; } x_2_2_8; struct Color { union { unsigned long long x_1_4_1; struct ExtendedColor {} *x_1_4_2; } x_9_3_1; } x_2_2_9; } x_2_1_2; } x2; })arg1;
- (void)_didReceiveEditorStateUpdateAfterFocus;
- (void)_didRelaunchProcess;
- (void)_didScroll;
- (void)_didStartProvisionalLoadForMainFrame;
- (void)_didUpdateInputMode:(unsigned char)arg1;
- (bool)_disableAutomaticKeyboardUI;
- (void)_disableDoubleTapGesturesDuringTapIfNecessary:(unsigned long long)arg1;
- (void)_disableInspectorNodeSearch;
- (void)_doAfterReceivingEditDragSnapshotForTesting:(id /* block */)arg1;
- (void)_doAfterResettingSingleTapGesture:(id /* block */)arg1;
- (void)_doneDeferringNativeGestures:(bool)arg1;
- (void)_doubleTapDidFail:(id)arg1;
- (void)_doubleTapRecognized:(id)arg1;
- (void)_doubleTapRecognizedForDoubleClick:(id)arg1;
- (unsigned long long)_dragDestinationActionForDropSession:(id)arg1;
- (long long)_dragInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (bool)_dragInteraction:(id)arg1 item:(id)arg2 shouldDelaySetDownAnimationWithCompletion:(id /* block */)arg3;
- (void)_dragInteraction:(id)arg1 itemsForAddingToSession:(id)arg2 withTouchAtPoint:(struct CGPoint { double x1; double x2; })arg3 completion:(id /* block */)arg4;
- (void)_dragInteraction:(id)arg1 prepareForSession:(id)arg2 completion:(id /* block */)arg3;
- (bool)_dragInteraction:(id)arg1 shouldDelayCompetingGestureRecognizer:(id)arg2;
- (long long)_dropInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (void)_dropInteraction:(id)arg1 delayedPreviewProviderForDroppingItem:(id)arg2 previewProvider:(id /* block */)arg3;
- (void)_elementDidBlur;
- (void)_elementDidFocus:(const struct FocusedElementInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct ElementContext { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long x_2_2_1; } x_2_1_2; struct ObjectIdentifier<WebCore::DocumentIdentifierType> { unsigned long long x_3_2_1; } x_2_1_3; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long x_4_2_1; } x_2_1_4; } x2; struct IntPoint { int x_3_1_1; int x_3_1_2; } x3; double x4; double x5; double x6; double x7; bool x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; bool x10; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_11_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_11_1_2; } x11; bool x12; bool x13; bool x14; bool x15; bool x16; }*)arg1 userIsInteracting:(bool)arg2 blurPreviousNode:(bool)arg3 activityStateChanges:(struct OptionSet<WebCore::ActivityState::Flag> { unsigned int x1; })arg4 userObject:(id)arg5;
- (void)_enableInspectorNodeSearch;
- (void)_endEditing;
- (void)_endPotentialTapAndEnableDoubleTapGesturesIfNecessary;
- (void)_finishInteraction;
- (id)_formInputSession;
- (void)_handleAutocorrectionContext:(const struct WebAutocorrectionContext { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_1_1_1; } x1; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_2_1_1; } x2; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_3_1_1; } x3; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_4_1_1; } x4; struct EditingRange { unsigned long long x_5_1_1; unsigned long long x_5_1_2; } x5; }*)arg1;
- (bool)_handleDOMPasteRequestWithResult:(unsigned char)arg1;
- (bool)_handleDropByInsertingImagePlaceholders:(id)arg1 session:(id)arg2;
- (void)_handleKeyUIEvent:(id)arg1;
- (void)_handleSmartMagnificationInformationForPotentialTap:(unsigned long long)arg1 renderRect:(const struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg2 fitEntireRect:(bool)arg3 viewportMinimumScale:(double)arg4 viewportMaximumScale:(double)arg5 nodeIsRootLevel:(bool)arg6;
- (void)_handleTouchActionsForTouchEvent:(const struct NativeWebTouchEvent { unsigned int x1; struct OptionSet<WebKit::WebEvent::Modifier> { unsigned char x_2_1_1; } x2; struct WallTime { double x_3_1_1; } x3; struct Vector<WebKit::WebPlatformTouchPoint, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct WebPlatformTouchPoint {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; struct IntPoint { int x_5_1_1; int x_5_1_2; } x5; bool x6; bool x7; bool x8; float x9; float x10; }*)arg1;
- (void)_hardwareKeyboardAvailabilityChanged;
- (bool)_hasValidOutstandingPositionInformationRequest:(const struct InteractionInformationRequest { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; }*)arg1;
- (void)_hideContextMenuHintContainer;
- (void)_hideInspectorHighlight;
- (void)_hideKeyboard;
- (void)_highlightLongPressRecognized:(id)arg1;
- (void)_increaseListLevel:(id)arg1;
- (void)_increaseListLevelForWebView:(id)arg1;
- (void)_indent:(id)arg1;
- (void)_indentForWebView:(id)arg1;
- (double)_initialScaleFactor;
- (void)_insertNestedOrderedList:(id)arg1;
- (void)_insertNestedOrderedListForWebView:(id)arg1;
- (void)_insertNestedUnorderedList:(id)arg1;
- (void)_insertNestedUnorderedListForWebView:(id)arg1;
- (void)_insertOrderedList:(id)arg1;
- (void)_insertOrderedListForWebView:(id)arg1;
- (void)_insertUnorderedList:(id)arg1;
- (void)_insertUnorderedListForWebView:(id)arg1;
- (void)_inspectorNodeSearchRecognized:(id)arg1;
- (bool)_interactionShouldBeginFromPreviewItemController:(id)arg1 forPosition:(struct CGPoint { double x1; double x2; })arg2;
- (void)_interactionStartedFromPreviewItemController:(id)arg1;
- (void)_interactionStoppedFromPreviewItemController:(id)arg1;
- (bool)_interpretKeyEvent:(id)arg1 isCharEvent:(bool)arg2;
- (void)_invokeAndRemovePendingHandlersValidForCurrentPositionInformation;
- (void)_invokePendingAutocorrectionContextHandler:(id)arg1;
- (bool)_isInteractingWithFocusedElement;
- (id)_itemsForBeginningOrAddingToSessionWithRegistrationLists:(id)arg1 stagedDragSource:(const struct DragSourceState { int x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct RetainPtr<UIImage> { void *x_4_1_1; } x4; struct Optional<WebCore::TextIndicatorData> { bool x_5_1_1; union storage_t<WebCore::TextIndicatorData> { unsigned char x_2_2_1; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_5_1; float x_1_5_2; } x_1_4_1; struct FloatSize { float x_2_5_1; float x_2_5_2; } x_1_4_2; } x_2_3_1; struct FloatRect { struct FloatPoint { float x_1_5_1; float x_1_5_2; } x_2_4_1; struct FloatSize { float x_2_5_1; float x_2_5_2; } x_2_4_2; } x_2_3_2; struct FloatRect { struct FloatPoint { float x_1_5_1; float x_1_5_2; } x_3_4_1; struct FloatSize { float x_2_5_1; float x_2_5_2; } x_3_4_2; } x_2_3_3; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct FloatRect {} *x_4_4_1; unsigned int x_4_4_2; unsigned int x_4_4_3; } x_2_3_4; float x_2_3_5; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_6_4_1; } x_2_3_6; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_7_4_1; } x_2_3_7; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_8_4_1; } x_2_3_8; struct Color { union { unsigned long long x_1_5_1; struct ExtendedColor {} *x_1_5_2; } x_9_4_1; } x_2_3_9; } x_2_2_2; } x_5_1_2; } x5; }*)arg2;
- (void)_keyboardDidRequestDismissal:(id)arg1;
- (void)_layerTreeCommitComplete;
- (void)_longPressRecognized:(id)arg1;
- (void)_lookup:(id)arg1;
- (void)_lookupForWebView:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_markedTextNSRange;
- (bool)_mayDisableDoubleTapGesturesDuringSingleTap;
- (void)_mouseGestureRecognizerChanged:(id)arg1;
- (id)_moveDown:(bool)arg1 withHistory:(id)arg2;
- (id)_moveLeft:(bool)arg1 withHistory:(id)arg2;
- (id)_moveRight:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveUp:(bool)arg1 withHistory:(id)arg2;
- (void)_nextAccessoryTab:(id)arg1;
- (void)_nextAccessoryTabForWebView:(id)arg1;
- (void)_nonBlockingDoubleTapRecognized:(id)arg1;
- (void)_outdent:(id)arg1;
- (void)_outdentForWebView:(id)arg1;
- (struct OpaqueWKPage { }*)_pageRef;
- (void)_pasteAndMatchStyle:(id)arg1;
- (void)_pasteAndMatchStyleForWebView:(id)arg1;
- (void)_pasteAsQuotation:(id)arg1;
- (void)_pasteAsQuotationForWebView:(id)arg1;
- (void)_performAdditionalSetupDragAndDropInteractions;
- (void)_positionInformationDidChange:(const struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; bool x_1_1_2; bool x_1_1_3; bool x_1_1_4; bool x_1_1_5; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; unsigned long long x13; bool x14; bool x15; bool x16; struct FloatPoint { float x_17_1_1; float x_17_1_2; } x17; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_18_1_1; unsigned int x_18_1_2 : 1; unsigned int x_18_1_3 : 1; unsigned int x_18_1_4 : 1; unsigned int x_18_1_5 : 3; unsigned int x_18_1_6 : 26; unsigned int x_18_1_7; unsigned int x_18_1_8; unsigned int x_18_1_9; unsigned int x_18_1_10; unsigned int x_18_1_11; unsigned int x_18_1_12; unsigned int x_18_1_13; } x18; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_19_1_1; unsigned int x_19_1_2 : 1; unsigned int x_19_1_3 : 1; unsigned int x_19_1_4 : 1; unsigned int x_19_1_5 : 3; unsigned int x_19_1_6 : 26; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned int x_19_1_9; unsigned int x_19_1_10; unsigned int x_19_1_11; unsigned int x_19_1_12; unsigned int x_19_1_13; } x19; }*)arg1;
- (void)_prepareToDragPromisedAttachment:(const struct PromisedAttachmentInfo { struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_1_1_1; unsigned int x_1_1_2 : 1; unsigned int x_1_1_3 : 1; unsigned int x_1_1_4 : 1; unsigned int x_1_1_5 : 3; unsigned int x_1_1_6 : 26; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; unsigned int x_1_1_10; unsigned int x_1_1_11; unsigned int x_1_1_12; unsigned int x_1_1_13; } x1; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_2_1_1; } x2; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_3_1_1; } x3; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_4_1_1; } x4; struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct String {} *x_5_1_1; unsigned int x_5_1_2; unsigned int x_5_1_3; } x5; struct Vector<WTF::RefPtr<WebCore::SharedBuffer, WTF::DumbPtrTraits<WebCore::SharedBuffer> >, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct RefPtr<WebCore::SharedBuffer, WTF::DumbPtrTraits<WebCore::SharedBuffer> > {} *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; }*)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_presentationRectForPreviewItemController:(id)arg1;
- (id)_presentationRectsForPreviewItemController:(id)arg1;
- (id)_presentationSnapshotForPreviewItemController:(id)arg1;
- (id)_presentedViewControllerForPreviewItemController:(id)arg1;
- (void)_preserveFocusWithToken:(id)arg1 destructively:(bool)arg2;
- (void)_previewItemController:(id)arg1 commitPreview:(id)arg2;
- (void)_previewItemController:(id)arg1 didDismissPreview:(id)arg2 committing:(bool)arg3;
- (void)_previewItemControllerDidCancelPreview:(id)arg1;
- (void)_previousAccessoryTab:(id)arg1;
- (void)_previousAccessoryTabForWebView:(id)arg1;
- (void)_processDidCreateContextForVisibilityPropagation;
- (void)_processDidExit;
- (void)_processWillSwap;
- (void)_promptForReplace:(id)arg1;
- (void)_promptForReplaceForWebView:(id)arg1;
- (void)_registerPreview;
- (void)_removeDefaultGestureRecognizers;
- (void)_removeVisibilityPropagationView;
- (void)_requestDOMPasteAccessWithElementRect:(const struct IntRect { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; struct IntSize { int x_2_1_1; int x_2_1_2; } x2; }*)arg1 originIdentifier:(const struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_1_1; } x1; }*)arg2 completionHandler:(struct CompletionHandler<void (WebCore::DOMPasteAccessResponse)>={Function<void (WebCore::DOMPasteAccessResponse)>={unique_ptr<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> > >={__compressed_pair<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> *, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> > >=^{CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> {}*)arg3;
- (bool)_requiresKeyboardResetOnReload;
- (bool)_requiresKeyboardWhenFirstResponder;
- (void)_resetInputViewDeferral;
- (void)_resetIsDoubleTapPending;
- (void)_resetPanningPreventionFlags;
- (void)_restoreCalloutBarIfNeeded;
- (bool)_restoreFocusWithToken:(id)arg1;
- (void)_scheduleResetInputViewDeferralAfterBecomingFirstResponder;
- (bool)_scrollToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withOrigin:(struct CGPoint { double x1; double x2; })arg2 minimumScrollDistance:(double)arg3;
- (id)_scroller;
- (void)_scrollingNodeScrollingDidEnd;
- (void)_scrollingNodeScrollingWillBegin;
- (bool)_selectionAtDocumentStart;
- (void)_selectionChanged;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionClipRect;
- (void)_setAcceleratedCompositingRootView:(id)arg1;
- (void)_setAccessibilityWebProcessToken:(id)arg1;
- (void)_setDoubleTapGesturesEnabled:(bool)arg1;
- (void)_setFontForWebView:(id)arg1 sender:(id)arg2;
- (void)_setFontSizeForWebView:(double)arg1 sender:(id)arg2;
- (void)_setMarkedText:(id)arg1 highlights:(const struct Vector<WebCore::CompositionHighlight, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct CompositionHighlight {} *x1; unsigned int x2; unsigned int x3; }*)arg2 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)_setTextColorForWebView:(id)arg1 sender:(id)arg2;
- (void)_setupVisibilityPropagationView;
- (void)_share:(id)arg1;
- (void)_shareForWebView:(id)arg1;
- (bool)_shouldAvoidResizingWhenInputViewBoundsChange;
- (bool)_shouldAvoidScrollingWhenFocusedContentIsVisible;
- (bool)_shouldShowAutomaticKeyboardUIIgnoringInputMode;
- (bool)_shouldSuppressSelectionCommands;
- (bool)_shouldToggleSelectionCommandsAfterTapAt:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_shouldUseContextMenus;
- (bool)_shouldUseLegacySelectPopoverDismissalBehavior;
- (void)_showAttachmentSheet;
- (void)_showDataDetectorsSheet;
- (void)_showDictionary:(id)arg1;
- (void)_showImageSheet;
- (void)_showInspectorHighlight:(const struct Highlight { struct Color { union { unsigned long long x_1_2_1; struct ExtendedColor {} *x_1_2_2; } x_1_1_1; } x1; struct Color { union { unsigned long long x_1_2_1; struct ExtendedColor {} *x_1_2_2; } x_2_1_1; } x2; struct Color { union { unsigned long long x_1_2_1; struct ExtendedColor {} *x_1_2_2; } x_3_1_1; } x3; struct Color { union { unsigned long long x_1_2_1; struct ExtendedColor {} *x_1_2_2; } x_4_1_1; } x4; struct Color { union { unsigned long long x_1_2_1; struct ExtendedColor {} *x_1_2_2; } x_5_1_1; } x5; int x6; struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct FloatQuad {} *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; bool x8; }*)arg1;
- (void)_showKeyboard;
- (void)_showLinkSheet;
- (void)_showPlaybackTargetPicker:(bool)arg1 fromRect:(const struct IntRect { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; struct IntSize { int x_2_1_1; int x_2_1_2; } x2; }*)arg2 routeSharingPolicy:(unsigned char)arg3 routingContextUID:(id)arg4;
- (void)_showRunOpenPanel:(struct OpenPanelParameters { }*)arg1 resultListener:(struct WebOpenPanelResultListenerProxy { }*)arg2;
- (void)_showShareSheet:(const struct ShareDataWithParsedURL { struct ShareData { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_1_1_1; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_3_2_1; } x_1_1_3; } x1; struct Optional<WTF::URL> { bool x_2_1_1; union storage_t<WTF::URL> { unsigned char x_2_2_1; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_5_1; } x_1_4_1; } x_2_3_1; unsigned int x_2_3_2 : 1; unsigned int x_2_3_3 : 1; unsigned int x_2_3_4 : 1; unsigned int x_2_3_5 : 3; unsigned int x_2_3_6 : 26; unsigned int x_2_3_7; unsigned int x_2_3_8; unsigned int x_2_3_9; unsigned int x_2_3_10; unsigned int x_2_3_11; unsigned int x_2_3_12; unsigned int x_2_3_13; } x_2_2_2; } x_2_1_2; } x2; }*)arg1 inRect:(struct Optional<WebCore::FloatRect> { bool x1; union constexpr_storage_t<WebCore::FloatRect> { unsigned char x_2_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_2_1_2; } x2; })arg2 completionHandler:(struct CompletionHandler<void (bool)>={Function<void (bool)>={unique_ptr<WTF::Detail::CallableWrapperBase<void, bool>, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, bool> > >={__compressed_pair<WTF::Detail::CallableWrapperBase<void, bool> *, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, bool> > >=^{CallableWrapperBase<void, bool> {}*)arg3;
- (void)_showTapHighlight;
- (void)_showTextStyleOptions:(id)arg1;
- (void)_showTextStyleOptionsForWebView:(id)arg1;
- (void)_simulateLongPressActionAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_simulateTextEntered:(id)arg1;
- (void)_singleTapDidReset:(id)arg1;
- (void)_singleTapIdentified:(id)arg1;
- (void)_singleTapRecognized:(id)arg1;
- (void)_startDrag:(struct RetainPtr<CGImage *> { void *x1; })arg1 item:(const struct DragItem { struct DragImage { struct RetainPtr<CGImage *> { void *x_1_2_1; } x_1_1_1; struct Optional<WebCore::TextIndicatorData> { bool x_2_2_1; union storage_t<WebCore::TextIndicatorData> { unsigned char x_2_3_1; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_6_1; float x_1_6_2; } x_1_5_1; struct FloatSize { float x_2_6_1; float x_2_6_2; } x_1_5_2; } x_2_4_1; struct FloatRect { struct FloatPoint { float x_1_6_1; float x_1_6_2; } x_2_5_1; struct FloatSize { float x_2_6_1; float x_2_6_2; } x_2_5_2; } x_2_4_2; struct FloatRect { struct FloatPoint { float x_1_6_1; float x_1_6_2; } x_3_5_1; struct FloatSize { float x_2_6_1; float x_2_6_2; } x_3_5_2; } x_2_4_3; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct FloatRect {} *x_4_5_1; unsigned int x_4_5_2; unsigned int x_4_5_3; } x_2_4_4; float x_2_4_5; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_6_5_1; } x_2_4_6; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_7_5_1; } x_2_4_7; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_8_5_1; } x_2_4_8; struct Color { union { unsigned long long x_1_6_1; struct ExtendedColor {} *x_1_6_2; } x_9_5_1; } x_2_4_9; } x_2_3_2; } x_2_2_2; } x_1_1_2; } x1; }*)arg2;
- (void)_startSuppressingSelectionAssistantForReason:(unsigned char)arg1;
- (void)_stopSuppressingSelectionAssistantForReason:(unsigned char)arg1;
- (void)_stylusSingleTapRecognized:(id)arg1;
- (struct Color { union { unsigned long long x_1_1_1; struct ExtendedColor {} *x_1_1_2; } x1; })_tapHighlightColorForFastClick:(bool)arg1;
- (double)_targetContentZoomScaleForRect:(const struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1 currentScale:(double)arg2 fitEntireRect:(bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5;
- (void)_toggleStrikeThrough:(id)arg1;
- (void)_toggleStrikeThroughForWebView:(id)arg1;
- (void)_transliterateChinese:(id)arg1;
- (void)_transliterateChineseForWebView:(id)arg1;
- (void)_transpose;
- (void)_twoFingerDoubleTapRecognized:(id)arg1;
- (void)_twoFingerSingleTapGestureRecognized:(id)arg1;
- (id)_uiTextSelectionRects;
- (void)_unregisterPreview;
- (void)_updateAccessory;
- (void)_updateChangedSelection;
- (void)_updateChangedSelection:(bool)arg1;
- (void)_updateForScreen:(id)arg1;
- (void)_updateInitialWritingDirectionIfNecessary;
- (void)_updateInputContextAfterBlurringAndRefocusingElement;
- (void)_updateInteractionTintColor;
- (void)_updateLongPressAndHighlightLongPressGestures;
- (void)_updateRemoteAccessibilityRegistration:(bool)arg1;
- (void)_updateSelectionAssistantSuppressionState;
- (void)_updateTapHighlight;
- (bool)_waitForDrawToPDFCallback;
- (void)_webTouchEvent:(const struct NativeWebTouchEvent { unsigned int x1; struct OptionSet<WebKit::WebEvent::Modifier> { unsigned char x_2_1_1; } x2; struct WallTime { double x_3_1_1; } x3; struct Vector<WebKit::WebPlatformTouchPoint, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct WebPlatformTouchPoint {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; struct IntPoint { int x_5_1_1; int x_5_1_2; } x5; bool x6; bool x7; bool x8; float x9; float x10; }*)arg1 preventsNativeGestures:(bool)arg2;
- (void)_webTouchEventsRecognized:(id)arg1;
- (void)_webViewDestroyed;
- (void)_wheelChangedWithEvent:(id)arg1;
- (void)_willHideMenu:(id)arg1;
- (void)_willPerformAction:(SEL)arg1 sender:(id)arg2;
- (void)_willReceiveEditDragSnapshot;
- (void)_willStartScrollingOrZooming;
- (void)_windowDidMoveToScreenNotification:(id)arg1;
- (unsigned long long)_wk_pageCountForPrintFormatter:(id)arg1;
- (struct CGPDFDocument { }*)_wk_printedDocument;
- (void)_zoomOutWithOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)_zoomToFocusRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 selectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 insideFixed:(bool)arg3 fontSize:(float)arg4 minimumScale:(double)arg5 maximumScale:(double)arg6 allowScaling:(bool)arg7 forceScroll:(bool)arg8;
- (void)_zoomToInitialScaleWithOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_zoomToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withOrigin:(struct CGPoint { double x1; double x2; })arg2 fitEntireRect:(bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(double)arg6;
- (void)_zoomToRevealFocusedElement;
- (void)accessibilityRetrieveSpeakSelectionContent;
- (void)accessoryAutoFill;
- (void)accessoryClear;
- (void)accessoryDone;
- (void)accessoryOpen;
- (void)accessoryTab:(bool)arg1;
- (struct RetainPtr<NSArray> { void *x1; })actionSheetAssistant:(id)arg1 decideActionsForElement:(id)arg2 defaultActions:(struct RetainPtr<NSArray> { void *x1; })arg3;
- (void)actionSheetAssistant:(id)arg1 getAlternateURLForImage:(id)arg2 completion:(id /* block */)arg3;
- (void)actionSheetAssistant:(id)arg1 openElementAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)actionSheetAssistant:(id)arg1 performAction:(int)arg2;
- (void)actionSheetAssistant:(id)arg1 shareElementWithURL:(id)arg2 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (bool)actionSheetAssistant:(id)arg1 shouldIncludeAppLinkActionsForElement:(id)arg2;
- (bool)actionSheetAssistant:(id)arg1 showCustomSheetForElement:(id)arg2;
- (void)actionSheetAssistant:(id)arg1 willStartInteractionWithElement:(id)arg2;
- (void)actionSheetAssistantDidStopInteraction:(id)arg1;
- (struct Optional<unsigned int> { bool x1; union constexpr_storage_t<unsigned int> { unsigned char x_2_1_1; unsigned int x_2_1_2; } x2; })activeTouchIdentifierForGestureRecognizer:(id)arg1;
- (void)adjustSelectionWithDelta:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)alignCenterForWebView:(id)arg1;
- (void)alignJustifiedForWebView:(id)arg1;
- (void)alignLeftForWebView:(id)arg1;
- (void)alignRightForWebView:(id)arg1;
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (void)assignLegacyDataForContextMenuInteraction;
- (const struct WKAutoCorrectionData { struct RetainPtr<UIFont> { void *x_1_1_1; } x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; }*)autocorrectionData;
- (id)automaticallySelectedOverlay;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (bool)becomeFirstResponder;
- (bool)becomeFirstResponderForWebView;
- (void)beginSelectionChange;
- (void)beginSelectionInDirection:(long long)arg1 completionHandler:(id /* block */)arg2;
- (id)beginningOfDocument;
- (id)browsingContextController;
- (bool)canBecomeFirstResponder;
- (bool)canBecomeFirstResponderForWebView;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canPerformActionForWebView:(SEL)arg1 withSender:(id)arg2;
- (bool)canShowNonEmptySelectionView;
- (void)cancelActiveTextInteractionGestures;
- (void)cancelAutoscroll;
- (void)cancelPointersForGestureRecognizer:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (void)changeSelectionWithGestureAt:(struct CGPoint { double x1; double x2; })arg1 withGesture:(long long)arg2 withState:(long long)arg3;
- (void)changeSelectionWithGestureAt:(struct CGPoint { double x1; double x2; })arg1 withGesture:(long long)arg2 withState:(long long)arg3 withFlags:(long long)arg4;
- (void)changeSelectionWithTouchAt:(struct CGPoint { double x1; double x2; })arg1 withSelectionTouch:(long long)arg2 baseIsStart:(bool)arg3 withFlags:(long long)arg4;
- (void)changeSelectionWithTouchesFrom:(struct CGPoint { double x1; double x2; })arg1 to:(struct CGPoint { double x1; double x2; })arg2 withGesture:(long long)arg3 withState:(long long)arg4;
- (unsigned short)characterBeforeCaretSelection;
- (id)characterRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;
- (void)cleanUpDragSourceSessionState;
- (void)cleanupAdditionalInteractions;
- (void)cleanupCursorInteraction;
- (void)cleanupInteraction;
- (void)clearSelection;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1 withinRange:(id)arg2;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (void)computeClientAndGlobalPointsForDropSession:(id)arg1 outClientPoint:(struct CGPoint { double x1; double x2; }*)arg2 outGlobalPoint:(struct CGPoint { double x1; double x2; }*)arg3;
- (id)containerViewForTargetedPreviews;
- (id)contextMenuInteraction:(id)arg1 configurationForMenuAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (id)contextMenuInteraction:(id)arg1 previewForDismissingMenuWithConfiguration:(id)arg2;
- (id)contextMenuInteraction:(id)arg1 previewForHighlightingMenuWithConfiguration:(id)arg2;
- (void)contextMenuInteraction:(id)arg1 willDisplayMenuForConfiguration:(id)arg2 animator:(id)arg3;
- (void)contextMenuInteraction:(id)arg1 willEndForConfiguration:(id)arg2 animator:(id)arg3;
- (void)contextMenuInteraction:(id)arg1 willPerformPreviewActionForMenuWithConfiguration:(id)arg2 animator:(id)arg3;
- (void)continueContextMenuInteraction:(id /* block */)arg1;
- (bool)continueContextMenuInteractionWithDataDetectors:(id /* block */)arg1;
- (void)copy:(id)arg1;
- (void)copyForWebView:(id)arg1;
- (id)currentDragOrDropSession;
- (struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; bool x_1_1_2; bool x_1_1_3; bool x_1_1_4; bool x_1_1_5; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; unsigned long long x13; bool x14; bool x15; bool x16; struct FloatPoint { float x_17_1_1; float x_17_1_2; } x17; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_18_1_1; unsigned int x_18_1_2 : 1; unsigned int x_18_1_3 : 1; unsigned int x_18_1_4 : 1; unsigned int x_18_1_5 : 3; unsigned int x_18_1_6 : 26; unsigned int x_18_1_7; unsigned int x_18_1_8; unsigned int x_18_1_9; unsigned int x_18_1_10; unsigned int x_18_1_11; unsigned int x_18_1_12; unsigned int x_18_1_13; } x18; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_19_1_1; unsigned int x_19_1_2 : 1; unsigned int x_19_1_3 : 1; unsigned int x_19_1_4 : 1; unsigned int x_19_1_5 : 3; unsigned int x_19_1_6 : 26; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned int x_19_1_9; unsigned int x_19_1_10; unsigned int x_19_1_11; unsigned int x_19_1_12; unsigned int x_19_1_13; } x19; })currentPositionInformation;
- (id)cursorInteraction;
- (id)cursorInteraction:(id)arg1 styleForRegion:(id)arg2 modifiers:(long long)arg3;
- (id)cursorRegionForPositionInformation:(struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; bool x_1_1_2; bool x_1_1_3; bool x_1_1_4; bool x_1_1_5; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; unsigned long long x13; bool x14; bool x15; bool x16; struct FloatPoint { float x_17_1_1; float x_17_1_2; } x17; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_18_1_1; unsigned int x_18_1_2 : 1; unsigned int x_18_1_3 : 1; unsigned int x_18_1_4 : 1; unsigned int x_18_1_5 : 3; unsigned int x_18_1_6 : 26; unsigned int x_18_1_7; unsigned int x_18_1_8; unsigned int x_18_1_9; unsigned int x_18_1_10; unsigned int x_18_1_11; unsigned int x_18_1_12; unsigned int x_18_1_13; } x18; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_19_1_1; unsigned int x_19_1_2 : 1; unsigned int x_19_1_3 : 1; unsigned int x_19_1_4 : 1; unsigned int x_19_1_5 : 3; unsigned int x_19_1_6 : 26; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned int x_19_1_9; unsigned int x_19_1_10; unsigned int x_19_1_11; unsigned int x_19_1_12; unsigned int x_19_1_13; } x19; }*)arg1 point:(struct CGPoint { double x1; double x2; })arg2;
- (void)cut:(id)arg1;
- (void)cutForWebView:(id)arg1;
- (id)dataDetectionContextForActionSheetAssistant:(id)arg1;
- (id)dataDetectionContextForPositionInformation:(struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; bool x_1_1_2; bool x_1_1_3; bool x_1_1_4; bool x_1_1_5; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; unsigned long long x13; bool x14; bool x15; bool x16; struct FloatPoint { float x_17_1_1; float x_17_1_2; } x17; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_18_1_1; unsigned int x_18_1_2 : 1; unsigned int x_18_1_3 : 1; unsigned int x_18_1_4 : 1; unsigned int x_18_1_5 : 3; unsigned int x_18_1_6 : 26; unsigned int x_18_1_7; unsigned int x_18_1_8; unsigned int x_18_1_9; unsigned int x_18_1_10; unsigned int x_18_1_11; unsigned int x_18_1_12; unsigned int x_18_1_13; } x18; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_19_1_1; unsigned int x_19_1_2 : 1; unsigned int x_19_1_3 : 1; unsigned int x_19_1_4 : 1; unsigned int x_19_1_5 : 3; unsigned int x_19_1_6 : 26; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned int x_19_1_9; unsigned int x_19_1_10; unsigned int x_19_1_11; unsigned int x_19_1_12; unsigned int x_19_1_13; } x19; })arg1;
- (id)dataListTextSuggestions;
- (id)dataListTextSuggestionsInputView;
- (void)dealloc;
- (void)decreaseSize:(id)arg1;
- (void)decreaseSizeForWebView:(id)arg1;
- (bool)deferringGestureRecognizer:(id)arg1 shouldDeferGesturesAfterBeginningTouchesWithEvent:(id)arg2;
- (bool)deferringGestureRecognizer:(id)arg1 shouldDeferGesturesAfterEndingTouchesWithEvent:(id)arg2;
- (bool)deferringGestureRecognizer:(id)arg1 shouldDeferOtherGestureRecognizer:(id)arg2;
- (void)deleteBackward;
- (void)didFinishScrolling;
- (void)didInterruptScrolling;
- (void)didMoveToWindow;
- (void)didUpdateVisibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 unobscuredRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 contentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3 unobscuredRectInScrollViewCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 obscuredInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg5 unobscuredSafeAreaInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg6 inputViewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg7 scale:(double)arg8 minimumScale:(double)arg9 inStableState:(bool)arg10 isChangingObscuredInsetsInteractively:(bool)arg11 enclosedInScrollableAncestorView:(bool)arg12;
- (void)didZoomToScale:(double)arg1;
- (void)dismissFilePicker;
- (void)doAfterPositionInformationUpdate:(id /* block */)arg1 forRequest:(struct InteractionInformationRequest { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; })arg2;
- (struct DragData { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; struct IntPoint { int x_2_1_1; int x_2_1_2; } x2; void *x3; int x4; int x5; struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct String {} *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; int x7; struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; })dragDataForDropSession:(id)arg1 dragDestinationAction:(unsigned long long)arg2;
- (void)dragInteraction:(id)arg1 item:(id)arg2 willAnimateCancelWithAnimator:(id)arg3;
- (id)dragInteraction:(id)arg1 itemsForBeginningSession:(id)arg2;
- (id)dragInteraction:(id)arg1 previewForCancellingItem:(id)arg2 withDefault:(id)arg3;
- (id)dragInteraction:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;
- (void)dragInteraction:(id)arg1 session:(id)arg2 didEndWithOperation:(unsigned long long)arg3;
- (void)dragInteraction:(id)arg1 sessionDidTransferItems:(id)arg2;
- (void)dragInteraction:(id)arg1 sessionWillBegin:(id)arg2;
- (void)dragInteraction:(id)arg1 willAnimateLiftWithAnimator:(id)arg2 session:(id)arg3;
- (double)dragLiftDelay;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 concludeDrop:(id)arg2;
- (void)dropInteraction:(id)arg1 item:(id)arg2 willAnimateDropWithAnimator:(id)arg3;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (id)dropInteraction:(id)arg1 previewForDroppingItem:(id)arg2 withDefault:(id)arg3;
- (void)dropInteraction:(id)arg1 sessionDidEnd:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidEnter:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidExit:(id)arg2;
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (void)endEditingAndUpdateFocusAppearanceWithReason:(long long)arg1;
- (id)endOfDocument;
- (void)endSelectionChange;
- (bool)ensurePositionInformationIsUpToDate:(struct InteractionInformationRequest { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; })arg1;
- (void)executeEditCommandWithCallback:(id)arg1;
- (void)fileUploadPanelDidDismiss:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (const struct FocusedElementInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct ElementContext { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long x_2_2_1; } x_2_1_2; struct ObjectIdentifier<WebCore::DocumentIdentifierType> { unsigned long long x_3_2_1; } x_2_1_3; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long x_4_2_1; } x_2_1_4; } x2; struct IntPoint { int x_3_1_1; int x_3_1_2; } x3; double x4; double x5; double x6; double x7; bool x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; bool x10; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_11_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_11_1_2; } x11; bool x12; bool x13; bool x14; bool x15; bool x16; }*)focusedElementInformation;
- (struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct OptionItem {} *x1; unsigned int x2; unsigned int x3; }*)focusedSelectElementOptions;
- (id)fontForCaretSelection;
- (id)formAccessoryView;
- (id)formInputControl;
- (id)formInputLabel;
- (void)generateSyntheticEditingCommand:(unsigned char)arg1;
- (bool)gestureRecognizer:(id)arg1 canBePreventedByGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 canPreventGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 isInterruptingMomentumScrollingWithEvent:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldIgnoreWebTouchWithEvent:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerMayDoubleTapToZoomWebView:(id)arg1;
- (bool)gestureRecognizerMayPanWebView:(id)arg1;
- (bool)gestureRecognizerMayPinchToZoomWebView:(id)arg1;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)handleKeyWebEvent:(id)arg1;
- (void)handleKeyWebEvent:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (bool)hasContent;
- (bool)hasHiddenContentEditable;
- (bool)hasMarkedText;
- (bool)hasSelectablePositionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)hasSelection;
- (bool)hasText;
- (void)hideGlobalMenuController;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)increaseSize:(id)arg1;
- (void)increaseSizeForWebView:(id)arg1;
- (void)indentForWebView:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 processPool:(struct WebProcessPool { int (**x1)(); id x2; struct WeakPtrFactory<WebKit::WebProcessPool> { struct RefPtr<WTF::WeakPtrImpl, WTF::DumbPtrTraits<WTF::WeakPtrImpl> > { struct WeakPtrImpl {} *x_1_2_1; } x_3_1_1; } x3; int (**x4)(); struct Ref<API::ProcessPoolConfiguration, WTF::DumbPtrTraits<API::ProcessPoolConfiguration> > { struct ProcessPoolConfiguration {} *x_5_1_1; } x5; struct MessageReceiverMap { struct HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<IPC::StringReference, WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> >, IPC::StringReference::Hash, WTF::HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<IPC::StringReference> > { struct KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> {} *x_1_3_1; } x_1_2_1; } x_6_1_1; struct HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<std::__1::pair<IPC::StringReference, unsigned long long>, WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> >, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> > > { struct KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> {} *x_1_3_1; } x_2_2_1; } x_6_1_2; } x6; }*)arg2 configuration:(struct Ref<API::PageConfiguration, WTF::DumbPtrTraits<API::PageConfiguration> > { struct PageConfiguration {} *x1; }*)arg3 webView:(id)arg4;
- (id)inputAccessoryView;
- (id)inputAccessoryViewForWebView;
- (id)inputAssistantItem;
- (id)inputAssistantItemForWebView;
- (id)inputDelegate;
- (id)inputView;
- (id)inputViewForWebView;
- (void)insertNestedOrderedListForWebView:(id)arg1;
- (void)insertNestedUnorderedListForWebView:(id)arg1;
- (void)insertOrderedListForWebView:(id)arg1;
- (void)insertText:(id)arg1;
- (void)insertTextSuggestion:(id)arg1;
- (void)insertUnorderedListForWebView:(id)arg1;
- (id)insertionPointColor;
- (id)interactionAssistant;
- (long long)interfaceOrientation;
- (double)inverseScale;
- (bool)isAnyTouchOverActiveArea:(id)arg1;
- (bool)isEditable;
- (bool)isFocusingElement;
- (bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;
- (bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;
- (bool)isReplaceAllowed;
- (bool)isResigningFirstResponder;
- (bool)isScrollableForKeyboardScrollViewAnimator:(id)arg1;
- (bool)isShowingInspectorIndication;
- (double)keyboardScrollViewAnimator:(id)arg1 distanceForIncrement:(unsigned char)arg2 inDirection:(unsigned char)arg3;
- (void)keyboardScrollViewAnimatorDidFinishScrolling:(id)arg1;
- (void)keyboardScrollViewAnimatorWillScroll:(id)arg1;
- (struct CGPoint { double x1; double x2; })lastInteractionLocation;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionLeftToRightForWebView:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)makeTextWritingDirectionNaturalForWebView:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (void)makeTextWritingDirectionRightToLeftForWebView:(id)arg1;
- (id)markedText;
- (id)markedTextRange;
- (id)markedTextStyle;
- (id)metadataDictionariesForDictationResults;
- (void)modifierFlagsDidChangeFrom:(long long)arg1 to:(long long)arg2;
- (void)moveBackward:(unsigned int)arg1;
- (void)moveByOffset:(long long)arg1;
- (void)moveForward:(unsigned int)arg1;
- (void)moveSelectionAtBoundary:(long long)arg1 inDirection:(long long)arg2 completionHandler:(id /* block */)arg3;
- (id)nextUnperturbedDictationResultBoundaryFromPosition:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (void)outdentForWebView:(id)arg1;
- (struct WebPageProxy { int (**x1)(); id x2; int (**x3)(); int (**x4)(); int (**x5)(); int (**x6)(); int (**x7)(); int (**x8)(); struct WeakPtrFactory<WebKit::WebPageProxy> { struct RefPtr<WTF::WeakPtrImpl, WTF::DumbPtrTraits<WTF::WeakPtrImpl> > { struct WeakPtrImpl {} *x_1_2_1; } x_9_1_1; } x9; struct RetainPtr<NSArray> { void *x_10_1_1; } x10; struct ObjectIdentifier<WebKit::WebPageProxyIdentifierType> { unsigned long long x_11_1_1; } x11; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long x_12_1_1; } x12; struct WeakPtr<WebKit::PageClient> { struct RefPtr<WTF::WeakPtrImpl, WTF::DumbPtrTraits<WTF::WeakPtrImpl> > { struct WeakPtrImpl {} *x_1_2_1; } x_13_1_1; } x13; struct Ref<API::PageConfiguration, WTF::DumbPtrTraits<API::PageConfiguration> > { struct PageConfiguration {} *x_14_1_1; } x14; struct unique_ptr<API::LoaderClient, std::__1::default_delete<API::LoaderClient> > { struct __compressed_pair<API::LoaderClient *, std::__1::default_delete<API::LoaderClient> > { struct LoaderClient {} *x_1_2_1; } x_15_1_1; } x15; }*)page;
- (void)paste:(id)arg1;
- (void)pasteAndMatchStyle:(id)arg1;
- (void)pasteAndMatchStyleForWebView:(id)arg1;
- (void)pasteForWebView:(id)arg1;
- (void)pasteWithCompletionHandler:(id /* block */)arg1;
- (bool)pointIsNearMarkedText:(struct CGPoint { double x1; double x2; })arg1;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;
- (const struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; bool x_1_1_2; bool x_1_1_3; bool x_1_1_4; bool x_1_1_5; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; unsigned long long x13; bool x14; bool x15; bool x16; struct FloatPoint { float x_17_1_1; float x_17_1_2; } x17; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_18_1_1; unsigned int x_18_1_2 : 1; unsigned int x_18_1_3 : 1; unsigned int x_18_1_4 : 1; unsigned int x_18_1_5 : 3; unsigned int x_18_1_6 : 26; unsigned int x_18_1_7; unsigned int x_18_1_8; unsigned int x_18_1_9; unsigned int x_18_1_10; unsigned int x_18_1_11; unsigned int x_18_1_12; unsigned int x_18_1_13; } x18; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_19_1_1; unsigned int x_19_1_2 : 1; unsigned int x_19_1_3 : 1; unsigned int x_19_1_4 : 1; unsigned int x_19_1_5 : 3; unsigned int x_19_1_6 : 26; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned int x_19_1_9; unsigned int x_19_1_10; unsigned int x_19_1_11; unsigned int x_19_1_12; unsigned int x_19_1_13; } x19; }*)positionInformation;
- (struct Optional<WebKit::InteractionInformationAtPosition> { bool x1; union storage_t<WebKit::InteractionInformationAtPosition> { unsigned char x_2_1_1; struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x_1_4_1; int x_1_4_2; } x_1_3_1; bool x_1_3_2; bool x_1_3_3; bool x_1_3_4; bool x_1_3_5; } x_2_2_1; bool x_2_2_2; bool x_2_2_3; bool x_2_2_4; bool x_2_2_5; bool x_2_2_6; bool x_2_2_7; bool x_2_2_8; bool x_2_2_9; bool x_2_2_10; bool x_2_2_11; bool x_2_2_12; unsigned long long x_2_2_13; bool x_2_2_14; bool x_2_2_15; bool x_2_2_16; struct FloatPoint { float x_17_3_1; float x_17_3_2; } x_2_2_17; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_5_1; } x_1_4_1; } x_18_3_1; unsigned int x_18_3_2 : 1; unsigned int x_18_3_3 : 1; unsigned int x_18_3_4 : 1; unsigned int x_18_3_5 : 3; unsigned int x_18_3_6 : 26; unsigned int x_18_3_7; unsigned int x_18_3_8; unsigned int x_18_3_9; unsigned int x_18_3_10; unsigned int x_18_3_11; unsigned int x_18_3_12; unsigned int x_18_3_13; } x_2_2_18; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_5_1; } x_1_4_1; } x_19_3_1; unsigned int x_19_3_2 : 1; unsigned int x_19_3_3 : 1; unsigned int x_19_3_4 : 1; unsigned int x_19_3_5 : 3; unsigned int x_19_3_6 : 26; unsigned int x_19_3_7; unsigned int x_19_3_8; unsigned int x_19_3_9; unsigned int x_19_3_10; unsigned int x_19_3_11; unsigned int x_19_3_12; unsigned int x_19_3_13; } x_2_2_19; } x_2_1_2; } x2; })positionInformationForActionSheetAssistant:(id)arg1;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (bool)preventsPanningInXAxis;
- (bool)preventsPanningInYAxis;
- (id)previousUnperturbedDictationResultBoundaryFromPosition:(id)arg1;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectContainingCaretSelection;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)reloadContextViewForPresentedListViewController;
- (void)replace:(id)arg1;
- (void)replaceDictatedText:(id)arg1 withText:(id)arg2;
- (void)replaceForWebView:(id)arg1;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)replaceText:(id)arg1 withText:(id)arg2;
- (void)requestAsynchronousPositionInformationUpdate:(struct InteractionInformationRequest { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; })arg1;
- (void)requestAutocorrectionContextWithCompletionHandler:(id /* block */)arg1;
- (void)requestAutocorrectionRectsForString:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)requestDictationContext:(id /* block */)arg1;
- (void)requestDocumentContext:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)requestRectsToEvadeForSelectionCommandsWithCompletionHandler:(id /* block */)arg1;
- (bool)requiresAccessoryView;
- (bool)requiresKeyEvents;
- (bool)resignFirstResponder;
- (bool)resignFirstResponderForWebView;
- (void)scrollSelectionToVisible:(bool)arg1;
- (void)scrollViewWillStartPanOrPinchGesture;
- (void)select:(id)arg1;
- (void)selectAll;
- (void)selectAll:(id)arg1;
- (void)selectAllForWebView:(id)arg1;
- (void)selectForWebView:(id)arg1;
- (void)selectFormAccessoryPickerRow:(long long)arg1;
- (id)selectFormPopoverTitle;
- (void)selectPositionAtBoundary:(long long)arg1 inDirection:(long long)arg2 fromPoint:(struct CGPoint { double x1; double x2; })arg3 completionHandler:(id /* block */)arg4;
- (void)selectPositionAtPoint:(struct CGPoint { double x1; double x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)selectPositionAtPoint:(struct CGPoint { double x1; double x2; })arg1 withContextRequest:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)selectTextWithGranularity:(long long)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 completionHandler:(id /* block */)arg3;
- (void)selectWordBackward;
- (void)selectWordForReplacement;
- (id)selectedDOMRange;
- (id)selectedText;
- (id)selectedTextForActionSheetAssistant:(id)arg1;
- (id)selectedTextRange;
- (id)selectionBarColor;
- (long long)selectionGranularity;
- (id)selectionHighlightColor;
- (id)selectionInteractionAssistant;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectionRange;
- (id)selectionRectsForRange:(id)arg1;
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setBottomBufferHeight:(double)arg1;
- (void)setContinuousSpellCheckingEnabled:(bool)arg1;
- (void)setCursorInteraction:(id)arg1;
- (void)setDataListTextSuggestions:(id)arg1;
- (void)setDataListTextSuggestionsInputView:(id)arg1;
- (void)setInputDelegate:(id)arg1;
- (bool)setIsEditable:(bool)arg1;
- (void)setMarkedText:(id)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setSelectedDOMRange:(id)arg1 affinityDownstream:(bool)arg2;
- (void)setSelectedTextRange:(id)arg1;
- (void)setShowingInspectorIndication:(bool)arg1;
- (void)setSizeChangedSinceLastVisibleContentRectUpdate:(bool)arg1;
- (void)setTimePickerValueToHour:(long long)arg1 minute:(long long)arg2;
- (void)setUpTextSelectionAssistant;
- (void)setupAdditionalInteractions;
- (void)setupCursorInteraction;
- (void)setupDragAndDropInteractions;
- (void)setupInteraction;
- (void)shareSheetDidDismiss:(id)arg1;
- (bool)shouldAllowHidingSelectionCommands;
- (bool)shouldHideSelectionWhenScrolling;
- (bool)shouldIgnoreKeyboardWillHideNotification;
- (bool)shouldShowAutomaticKeyboardUI;
- (bool)shouldSuppressUpdateCandidateView;
- (bool)shouldSynthesizeKeyEvents;
- (void)showGlobalMenuControllerInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)sizeChangedSinceLastVisibleContentRectUpdate;
- (void)startAutoscroll:(struct CGPoint { double x1; double x2; })arg1;
- (id)supportedPasteboardTypesForCurrentSelection;
- (bool)supportsImagePaste;
- (bool)supportsTextSelectionWithCharacterGranularity;
- (void)takeTraitsFrom:(id)arg1;
- (id)targetForAction:(SEL)arg1 withSender:(id)arg2;
- (id)targetForActionForWebView:(SEL)arg1 withSender:(id)arg2;
- (void)teardownDragAndDropInteractions;
- (id)textColorForCaretSelection;
- (id)textContentTypeForTesting;
- (id)textEffectsWindow;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textFirstRect;
- (id)textInRange:(id)arg1;
- (id)textInputTraits;
- (bool)textInteractionGesture:(long long)arg1 shouldBeginAtPoint:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textLastRect;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;
- (void)tintColorDidChange;
- (void)toggleBoldface:(id)arg1;
- (void)toggleBoldfaceForWebView:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleItalicsForWebView:(id)arg1;
- (void)toggleStrikeThroughForWebView:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (void)toggleUnderlineForWebView:(id)arg1;
- (id)tokenizer;
- (id)touchActionActiveTouches;
- (id)undoManager;
- (void)unmarkText;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unobscuredContentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unoccludedWindowBoundsForActionSheetAssistant:(id)arg1;
- (id)unscaledView;
- (void)updateCurrentFocusedElementInformation:(struct Function<void (bool)>={unique_ptr<WTF::Detail::CallableWrapperBase<void, bool>, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, bool> > >={__compressed_pair<WTF::Detail::CallableWrapperBase<void, bool> *, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, bool> > >=^{CallableWrapperBase<void, bool> {}*)arg1;
- (void)updateFixedClippingView:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)updatePositionInformationForActionSheetAssistant:(id)arg1;
- (void)updateSelectionWithExtentPoint:(struct CGPoint { double x1; double x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)updateSelectionWithExtentPoint:(struct CGPoint { double x1; double x2; })arg1 withBoundary:(long long)arg2 completionHandler:(id /* block */)arg3;
- (void)updateTextSuggestionsForInputDelegate;
- (id)webSelectionRects;
- (id)webSelectionRectsForSelectionRects:(const struct Vector<WebCore::SelectionRect, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct SelectionRect {} *x1; unsigned int x2; unsigned int x3; }*)arg1;
- (id)webView;
- (id)webViewUIDelegate;
- (void)willFinishIgnoringCalloutBarFadeAfterPerformingAction;
- (void)willMoveToWindow:(id)arg1;
- (void)willStartZoomOrScroll;
- (id)wordContainingCaretSelection;
- (id)wordRangeContainingCaretSelection;

@end
