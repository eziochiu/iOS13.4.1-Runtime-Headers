/* Generated by EzioChiu
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@interface MPMusicPlayerController : NSObject <MPArtworkDataSource, MPMediaPlayback, MPMusicPlayerControllerClient, MPVolumeControllerDelegate> {
    NSString * _clientIdentifier;
    NSXPCConnection * _connection;
    bool  _isPreparedToPlay;
    MPMusicPlayerControllerNowPlaying * _lastServerNowPlaying;
    MPMusicPlayerControllerNowPlayingTimeSnapshot * _lastServerTimeSnapshot;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    long long  _notificationsCounter;
    NSObject<OS_dispatch_queue> * _queue;
    MPMusicPlayerControllerNowPlaying * _serverNowPlaying;
    MPMusicPlayerQueueDescriptor * _serverQueueDescriptor;
    MPMusicPlayerControllerNowPlayingTimeSnapshot * _serverTimeSnapshot;
    MPMusicPlayerQueueDescriptor * _targetQueueDescriptor;
    MPVolumeController * _volumeController;
}

@property (nonatomic, readonly, copy) NSString *clientIdentifier;
@property (nonatomic, readonly) NSXPCConnection *connection;
@property (nonatomic) unsigned long long currentChapterIndex;
@property (nonatomic) float currentPlaybackRate;
@property (nonatomic) double currentPlaybackTime;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned long long indexOfNowPlayingItem;
@property (nonatomic, readonly) bool isNowPlayingItemFromGeniusMix;
@property (nonatomic, readonly) bool isPreparedToPlay;
@property (nonatomic, readonly) MPMusicPlayerControllerNowPlaying *lastServerNowPlaying;
@property (nonatomic, readonly) MPMusicPlayerControllerNowPlayingTimeSnapshot *lastServerTimeSnapshot;
@property (nonatomic, readonly) long long notificationsCounter;
@property (nonatomic, copy) MPMediaItem *nowPlayingItem;
@property (nonatomic) long long playbackSpeed;
@property (nonatomic, readonly) long long playbackState;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic) long long repeatMode;
@property (nonatomic, readonly) MPMusicPlayerControllerNowPlaying *serverNowPlaying;
@property (nonatomic, readonly) MPMusicPlayerQueueDescriptor *serverQueueDescriptor;
@property (nonatomic, readonly) MPMusicPlayerControllerNowPlayingTimeSnapshot *serverTimeSnapshot;
@property (nonatomic) long long shuffleMode;
@property (readonly) Class superclass;
@property (nonatomic, readonly) MPMusicPlayerQueueDescriptor *targetQueueDescriptor;
@property (nonatomic) float volume;
@property (nonatomic, readonly) MPVolumeController *volumeController;

// Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer

+ (id)alloc;
+ (id)applicationMusicPlayer;
+ (id)applicationQueuePlayer;
+ (id)iPodMusicPlayer;
+ (void)setRunLoopForNotifications:(id)arg1;
+ (id)systemMusicPlayer;

- (void).cxx_destruct;
- (id)_asyncServer;
- (void)_clearConnection;
- (void)_establishConnectionIfNeeded;
- (id)_mediaItemFromNowPlaying:(id)arg1;
- (id)_nowPlaying;
- (id)_queueDescriptor;
- (id)_server;
- (id)_snapshot;
- (void)adjustLoadedQueueRangeToReverseCount:(long long)arg1 forwardCount:(long long)arg2;
- (void)appendQueueDescriptor:(id)arg1;
- (bool)areRepresentationsAvailableForCatalog:(id)arg1;
- (void)beginGeneratingPlaybackNotifications;
- (void)beginSeekingBackward;
- (void)beginSeekingForward;
- (void)cancelLoadingRepresentationForArtworkCatalog:(id)arg1;
- (id)clientIdentifier;
- (id)connection;
- (unsigned long long)currentChapterIndex;
- (float)currentPlaybackRate;
- (double)currentPlaybackTime;
- (void)dealloc;
- (id)description;
- (void)endGeneratingPlaybackNotifications;
- (void)endSeeking;
- (id)existingRepresentationForArtworkCatalog:(id)arg1;
- (unsigned long long)indexOfNowPlayingItem;
- (id)initWithClientIdentifier:(id)arg1;
- (id)initWithClientIdentifier:(id)arg1 queue:(id)arg2;
- (bool)isGeniusAvailable;
- (bool)isGeniusAvailableForSeedItems:(id)arg1;
- (bool)isNowPlayingItemFromGeniusMix;
- (bool)isPreparedToPlay;
- (bool)isRepresentation:(id)arg1 bestRepresentationForArtworkCatalog:(id)arg2;
- (id)lastServerNowPlaying;
- (id)lastServerTimeSnapshot;
- (void)loadRepresentationForArtworkCatalog:(id)arg1 completionHandler:(id /* block */)arg2;
- (long long)notificationsCounter;
- (id)nowPlayingAtIndex:(long long)arg1;
- (id)nowPlayingItem;
- (id)nowPlayingItemAtIndex:(unsigned long long)arg1;
- (unsigned long long)numberOfItems;
- (void)pause;
- (void)pauseWithFadeoutDuration:(double)arg1;
- (void)play;
- (long long)playbackSpeed;
- (long long)playbackState;
- (void)prepareQueueForPlayback;
- (void)prepareToPlay;
- (void)prepareToPlayWithCompletionHandler:(id /* block */)arg1;
- (void)prependQueueDescriptor:(id)arg1;
- (id)queue;
- (id)queueAsQuery;
- (id)queueAsRadioStation;
- (long long)repeatMode;
- (void)serverItemDidEnd;
- (id)serverNowPlaying;
- (void)serverPlaybackModeDidChange;
- (id)serverQueueDescriptor;
- (void)serverQueueDidEnd;
- (id)serverTimeSnapshot;
- (void)setCurrentChapterIndex:(unsigned long long)arg1;
- (void)setCurrentPlaybackRate:(float)arg1;
- (void)setCurrentPlaybackTime:(double)arg1;
- (void)setNowPlayingItem:(id)arg1;
- (void)setPlaybackSpeed:(long long)arg1;
- (void)setQueueWithDescriptor:(id)arg1;
- (void)setQueueWithGeniusMixPlaylist:(id)arg1;
- (void)setQueueWithItemCollection:(id)arg1;
- (void)setQueueWithQuery:(id)arg1;
- (void)setQueueWithQuery:(id)arg1 firstItem:(id)arg2;
- (void)setQueueWithRadioStation:(id)arg1;
- (bool)setQueueWithSeedItems:(id)arg1;
- (void)setQueueWithStoreIDs:(id)arg1;
- (void)setRepeatMode:(long long)arg1;
- (void)setServerNowPlaying:(id)arg1;
- (void)setServerQueueDescriptor:(id)arg1;
- (void)setServerTimeSnapshot:(id)arg1;
- (void)setShuffleMode:(long long)arg1;
- (void)setUserQueueModificationsDisabled:(bool)arg1;
- (void)setVolume:(float)arg1;
- (void)setVolumePrivate:(float)arg1;
- (void)shuffle;
- (long long)shuffleMode;
- (void)skipToBeginning;
- (void)skipToBeginningOrPreviousItem;
- (void)skipToNextItem;
- (void)skipToPreviousItem;
- (void)stop;
- (id)targetQueueDescriptor;
- (bool)userQueueModificationsDisabled;
- (id)visualIdenticalityIdentifierForCatalog:(id)arg1;
- (float)volume;
- (id)volumeController;
- (void)volumeController:(id)arg1 mutedStateDidChange:(bool)arg2;
- (void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2;

// Image: /System/Library/PrivateFrameworks/SpeechRecognitionCommandAndControl.framework/SpeechRecognitionCommandAndControl

- (bool)isPlayingOrInterrupted;
- (void)playSomething;

@end
