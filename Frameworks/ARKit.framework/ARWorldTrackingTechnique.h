/* Generated by EzioChiu
   Image: /System/Library/Frameworks/ARKit.framework/ARKit
 */

@interface ARWorldTrackingTechnique : ARImageBasedTechnique {
    bool  _allowPoseGraphUpdates;
    NSMutableSet * _anchorsReceived;
    <MTLFunction> * _annotateDepthDataKernelFunction;
    ARWorldTrackingPoseData * _cachedPoseData;
    struct __CVPixelBufferPool { } * _confidence8BufferPool;
    unsigned long long  _currentVIOMapSize;
    struct __CVPixelBufferPool { } * _depth16grayBufferPool;
    struct __CVPixelBufferPool { } * _depthRenderPool;
    bool  _didClearMap;
    ARWorldTrackingErrorData * _errorData;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _extrinsicsToWideSensor;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _floorPlanStorageLock;
    bool  _hasQualityKeyframe;
    NSString * _lastCameraType;
    struct map<CV3DVIOError, double, std::__1::less<CV3DVIOError>, std::__1::allocator<std::__1::pair<const CV3DVIOError, double> > > { 
        struct __tree<std::__1::__value_type<CV3DVIOError, double>, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true>, std::__1::allocator<std::__1::__value_type<CV3DVIOError, double> > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CV3DVIOError, double>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CV3DVIOError, std::__1::__value_type<CV3DVIOError, double>, std::__1::less<CV3DVIOError>, true> > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _lastErrorLogTimestamp;
    double  _lastMajorRelocalizationTimestamp;
    double  _lastPoseMetaDataTimestamp;
    double  _lastPoseTrackingMapTimestamp;
    double  _lastQualityKeyframeTimestamp;
    double  _lastRelocalizationTimestamp;
    NSMutableArray * _latestSpatialMappingData;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _latestSpatialMappingDataLock;
    NSMutableDictionary * _meshChunkIdentifiersCurrentlyBeingProcessed;
    NSMutableDictionary * _meshChunksWaitingForSemantics;
    bool  _meshReconstructionBusy;
    double  _minVergenceAngleCosine;
    struct CV3DMLModel { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; } x1; struct CV3DMLModelData {} *x2; } * _mlModel;
    ARWorldTrackingOptions * _mutableOptions;
    struct unordered_map<unsigned long long, std::__1::vector<float, std::__1::allocator<float> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<float, std::__1::allocator<float> > > > > { 
        struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > > > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, std::__1::hash<unsigned long long>, true> > { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, std::__1::equal_to<unsigned long long>, true> > { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _normalsForFloorPlan;
    struct __CVPixelBufferPool { } * _novelViewSynthesisDepthBufferPool;
    <MTLTexture> * _novelViewSynthesisDepthTexture;
    unsigned long long  _numberOfCameraSwitches;
    NSHashTable * _observers;
    NSObject<OS_dispatch_semaphore> * _observersSemaphore;
    double  _originTimestamp;
    NSMutableSet * _participantAnchors;
    bool  _participantAnchorsEnabled;
    struct __CVPixelBufferPool { } * _poolForConfidenceAnnotatedDepth;
    struct __CVPixelBufferPool { } * _poolForSemanticsAnnotatedDepth;
    int  _previousKeyframeCount;
    unsigned int  _primaryCameraID;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _referenceOriginTransform;
    int  _reinitializationAttempts;
    long long  _reinitializationAttemptsAtInitialization;
    bool  _relocalizingAfterSensorDataDrop;
    NSObject<OS_dispatch_queue> * _resultDataQueue;
    double  _resultLatency;
    NSObject<OS_dispatch_semaphore> * _resultSemaphore;
    struct unordered_map<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > > > { 
        struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, std::__1::hash<unsigned long long>, true> > { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, std::__1::equal_to<unsigned long long>, true> > { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _semanticsForFloorPlan;
    <MTLDevice> * _sharedMetalDevice;
    bool  _spatialMappingActivated;
    <MTLCommandQueue> * _spatialMappingCommandQueue;
    struct CV3DSMRenderer { } * _spatialMappingDepthRenderer;
    NSObject<OS_dispatch_queue> * _spatialMappingObjectRefinementQueue;
    NSMutableDictionary * _spatialMappingPointClouds;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _spatialMappingPointCloudsLock;
    NSObject<OS_dispatch_queue> * _spatialMappingQueue;
    NSMutableDictionary * _spatialMappingResultDataWaitingForSemantics;
    bool  _spatialMappingSetup;
    struct CV3DSurfaceDetectionRuntimeConfiguration { 
        int desiredOrientations; 
        int desiredExtentType; 
        double minVergenceAngle; 
        bool lineTrackingAlwaysOn; 
        int detectionPolicy; 
    }  _surfaceDetectionConfiguration;
    struct CV3DSurfaceDetectionParameters { 
        unsigned int minDetections; 
        unsigned int minimumSupportHorizontal; 
        unsigned int minimumSupportVertical; 
    }  _surfaceDetectionParameters;
    unsigned long long  _techniqueIndex;
    ARTrackedRaycastPostProcessor * _trackedRaycastPostProcessor;
    bool  _useFixedIntrinsics;
    struct unordered_map<unsigned long long, std::__1::vector<float, std::__1::allocator<float> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<float, std::__1::allocator<float> > > > > { 
        struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > > > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, std::__1::hash<unsigned long long>, true> > { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<float, std::__1::allocator<float> > >, std::__1::equal_to<unsigned long long>, true> > { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _verticesForFloorPlan;
    struct CV3DVIOContext { } * _vioHandle;
    long long  _vioHandleState;
    NSObject<OS_dispatch_semaphore> * _vioHandleStateSemaphore;
    unsigned long long  _vioSessionIdentifier;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _volumeSamplingLock;
    <MTLTexture> * display_texture_;
}

@property struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } extrinsicsToWideSensor;
@property bool hasQualityKeyframe;
@property bool meshReconstructionBusy;
@property (retain) ARWorldTrackingOptions *mutableOptions;
@property (nonatomic, readonly, copy) ARWorldTrackingOptions *options;
@property struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } referenceOriginTransform;
@property unsigned long long techniqueIndex;
@property (retain) ARTrackedRaycastPostProcessor *trackedRaycastPostProcessor;
@property (nonatomic) struct CV3DVIOContext { }*vioHandle;
@property (readonly) unsigned long long vioSessionIdentifier;

+ (bool)isSupported;
+ (bool)supportsVideoResolution:(struct CGSize { double x1; double x2; })arg1 forDeviceType:(id)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_configureMeshPlaneHarmonization;
- (void)_didFailWithError:(id)arg1;
- (id)_featurePointDataFromSLAMState:(const struct CV3DSLAMStateContext { }*)arg1;
- (id)_fullDescription;
- (void)_initializeSurfaceDetection;
- (long long)_initializeVIOHandle;
- (long long)_mappingStatusFromMapSize:(int)arg1 keyframeQuality:(int)arg2 isTrackingMap:(bool)arg3 timestamp:(double)arg4;
- (int)_poseFromSnapshot:(const struct CV3DSLAMStateSnapshotContext { }*)arg1 state:(const struct CV3DSLAMStateContext { }*)arg2 trackingCamera:(unsigned int)arg3 rotationWorldToCamera:(double)arg4 translationWorldToCamera:(double)arg5;
- (void)_reportCollaborationData:(id)arg1 type:(int)arg2 metadata:(const void*)arg3;
- (void)_reportError:(double)arg1 error:(int)arg2;
- (void)_setupSpatialMappingIfRequired;
- (bool)_shouldEnableQualityMode;
- (unsigned int)_trackingCameraID:(const struct CV3DSLAMStateSnapshotContext { }*)arg1 state:(const struct CV3DSLAMStateContext { }*)arg2;
- (void)_updatePose:(double)arg1 frame:(struct __CVBuffer { }*)arg2 snapshotHandle:(const struct CV3DSLAMStateSnapshotContext { }*)arg3;
- (void)_updatePoseDataTrackingState:(id)arg1 slamState:(const struct CV3DSLAMStateContext { }*)arg2;
- (void)activateSpatialMapping;
- (void)addObserver:(id)arg1;
- (void)addReferenceAnchors:(id)arg1;
- (void)annotateDepth:(id)arg1 withSemantics:(id)arg2 toTargetSemanticsImage:(struct __CVBuffer { }*)arg3 targetConfidenceBuffer:(struct __CVBuffer { }*)arg4;
- (void)annotateDepth:(id)arg1 withSemantics:(id)arg2 toTargetSemanticsImage:(struct __CVBuffer { }*)arg3 targetConfidenceBuffer:(struct __CVBuffer { }*)arg4 useGpu:(bool)arg5;
- (long long)captureBehavior;
- (struct CGImage { }*)cgImageFromTexture:(id)arg1;
- (void)clearMap;
- (id)convertFromRecon3dUUIDs:(struct { struct __CFUUID {} **x1; unsigned long long x2; }*)arg1;
- (void)deactivateSpatialMapping;
- (void)dealloc;
- (id)depthTextureForSurface:(struct CV3DSMRasterSurface { }*)arg1;
- (bool)deterministicMode;
- (void)didReceiveKeyframesUpdatedCallbackWithSurfaces:(struct { struct CV3DSMRasterSurface {} **x1; unsigned long long x2; }*)arg1 poses:(struct { struct CV3DSMTransform {} **x1; unsigned long long x2; }*)arg2 indices:(struct { struct __CFUUID {} **x1; unsigned long long x2; }*)arg3;
- (void)didReceivePredictedSurfaceCallbackWithTimestamp:(double)arg1 surface:(struct CV3DSMRasterSurface { }*)arg2;
- (void)didReceiveSpatialMappingCallbackWithResults:(struct { unsigned int x1; unsigned int x2; unsigned int x3; struct { /* ? */ } *x4; struct { /* ? */ } *x5; struct { /* ? */ } *x6; struct { /* ? */ } *x7; }*)arg1 forTimestamp:(double)arg2;
- (void)didReceiveVolumeSamplingCallbackWithData:(struct __CFData { }*)arg1 numSamples:(unsigned int)arg2 requestTimestamp:(double)arg3 sampleTimestamp:(double)arg4 sampleType:(int)arg5;
- (void)didUpdateRaycastResult:(struct CV3DHitTestResults { struct CV3DHitTestResult {} *x1; unsigned long long x2; }*)arg1;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })extrinsicsToWideSensor;
- (id)getObservers;
- (bool)hasQualityKeyframe;
- (id)init;
- (id)initWithOptions:(id)arg1;
- (void)invalidateAllRaycasts;
- (bool)isEqual:(id)arg1;
- (void)loadSurfaceData:(id)arg1;
- (void)mergeResultData:(id)arg1 intoData:(id)arg2 context:(id)arg3;
- (id)meshChunksFromResults:(struct { unsigned int x1; unsigned int x2; unsigned int x3; struct { /* ? */ } *x4; struct { /* ? */ } *x5; struct { /* ? */ } *x6; struct { /* ? */ } *x7; }*)arg1 timestamp:(double)arg2;
- (bool)meshReconstructionBusy;
- (id)mutableOptions;
- (id)newDisplayTextureForSurface:(struct CV3DSMRasterSurface { }*)arg1;
- (id)options;
- (id)predictedResultDataAtTimestamp:(double)arg1 context:(id)arg2;
- (void)prepare:(bool)arg1;
- (void)prepareResultData:(id)arg1 forContext:(id)arg2;
- (id)processData:(id)arg1;
- (void)pushCollaborationData:(id)arg1;
- (void)pushToHitTestingDepth:(id)arg1 pose:(id)arg2;
- (void)pushToSceneUnderstandingDepth:(id)arg1 segmentation:(id)arg2 pose:(id)arg3;
- (void)pushToSceneUnderstandingSegmentation:(id)arg1 pose:(id)arg2;
- (void)pushToSpatialMappingDepth:(id)arg1 semanticSegmentationData:(id)arg2 personSegmentationData:(id)arg3 pose:(id)arg4;
- (void)pushVolumeSampingRequestWithSpatialMappingResultData:(id)arg1;
- (id)raycast:(id)arg1;
- (id)raycastResultFrom:(struct CV3DHitTestResult { struct __CFUUID {} *x1; double x2[16]; int x3; int x4; int x5; struct __CFUUID {} *x6; }*)arg1;
- (id)raycastResultsFrom:(struct CV3DHitTestResults { struct CV3DHitTestResult {} *x1; unsigned long long x2; }*)arg1 forRay:(id)arg2;
- (bool)reconfigurableFrom:(id)arg1;
- (void)reconfigureFrom:(id)arg1;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })referenceOriginTransform;
- (void)removeObserver:(id)arg1;
- (void)removeReferenceAnchors:(id)arg1;
- (void)renderSurface:(struct CV3DSMRasterSurface { }*)arg1 intoDisplayTexture:(id)arg2;
- (void)requestResultDataAtTimestamp:(double)arg1 context:(id)arg2;
- (unsigned long long)requiredSensorDataTypes;
- (double)requiredTimeInterval;
- (void)resetSpatialMapping;
- (id)resultDataClasses;
- (id)serializeSurfaceData;
- (id)serializeWorldMapWithReferenceOrigin:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)setExtrinsicsToWideSensor:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)setHasQualityKeyframe:(bool)arg1;
- (void)setMeshReconstructionBusy:(bool)arg1;
- (void)setMutableOptions:(id)arg1;
- (void)setReferenceOriginTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)setTechniqueIndex:(unsigned long long)arg1;
- (void)setTrackedRaycastPostProcessor:(id)arg1;
- (void)setVioHandle:(struct CV3DVIOContext { }*)arg1;
- (void)stopAllRaycasts;
- (void)stopRaycast:(id)arg1;
- (unsigned long long)techniqueIndex;
- (id)trackedRaycast:(id)arg1 updateHandler:(id /* block */)arg2;
- (id)trackedRaycastPostProcessor;
- (void)updateSurfaceDetectionConfiguration;
- (struct CV3DVIOContext { }*)vioHandle;
- (long long)vioHandleState;
- (unsigned long long)vioSessionIdentifier;

@end
