/* Generated by EzioChiu
   Image: /System/Library/Frameworks/ARKit.framework/ARKit
 */

@interface AR2DSkeletonDetectionPostProcessingTechnique : ARImageBasedTechnique {
    bool  _deterministic;
    struct SkeletonJointFilter<float> { 
        struct vector<float, std::__1::allocator<float> > { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::__1::allocator<float> > { 
                float *__value_; 
            } __end_cap_; 
        } m_values; 
        struct vector<float, std::__1::allocator<float> > { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::__1::allocator<float> > { 
                float *__value_; 
            } __end_cap_; 
        } m_speed; 
        struct vector<double, std::__1::allocator<double> > { 
            double *__begin_; 
            double *__end_; 
            struct __compressed_pair<double *, std::__1::allocator<double> > { 
                double *__value_; 
            } __end_cap_; 
        } m_timestamps; 
        float m_smoothing; 
        float m_lowest_threshold; 
        float m_low_threshold; 
        float m_high_threshold; 
        float m_highest_threshold; 
        float m_temporal_smoothing; 
        float m_prediction_factor; 
        float m_min_smoothing; 
        float m_up_slope; 
        float m_down_slope; 
        float m_temporal_slope; 
    }  _extrapolationFilter2D;
    struct SkeletonJointFilter<float> { 
        struct vector<float, std::__1::allocator<float> > { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::__1::allocator<float> > { 
                float *__value_; 
            } __end_cap_; 
        } m_values; 
        struct vector<float, std::__1::allocator<float> > { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::__1::allocator<float> > { 
                float *__value_; 
            } __end_cap_; 
        } m_speed; 
        struct vector<double, std::__1::allocator<double> > { 
            double *__begin_; 
            double *__end_; 
            struct __compressed_pair<double *, std::__1::allocator<double> > { 
                double *__value_; 
            } __end_cap_; 
        } m_timestamps; 
        float m_smoothing; 
        float m_lowest_threshold; 
        float m_low_threshold; 
        float m_high_threshold; 
        float m_highest_threshold; 
        float m_temporal_smoothing; 
        float m_prediction_factor; 
        float m_min_smoothing; 
        float m_up_slope; 
        float m_down_slope; 
        float m_temporal_slope; 
    }  _extrapolationFilter2DForLiftingData;
    double  _extrapolationTime;
    AR2DSkeletonDetectionPostProcessGPU * _postProcessorGPU;
    AR2DSkeletonDetectionResult * _previous3DSkeleton;
    AR2DSkeletonRawEspressoResult * _previousRawEspressoResult;
    NSObject<OS_dispatch_queue> * _processingQueue;
    bool  _shouldPush3DSupportSkeleton;
    bool  _use3DSupportSkeletonForExtrapolation;
}

@property (nonatomic, retain) AR2DSkeletonRawEspressoResult *previousRawEspressoResult;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)init;
- (void)prepare:(bool)arg1;
- (id)previousRawEspressoResult;
- (id)processData:(id)arg1;
- (void)requestResultDataAtTimestamp:(double)arg1 context:(id)arg2;
- (double)requiredTimeInterval;
- (void)setPreviousRawEspressoResult:(id)arg1;

@end
